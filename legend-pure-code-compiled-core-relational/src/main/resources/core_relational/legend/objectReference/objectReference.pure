// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::json::*;
import meta::relational::mapping::*;
import meta::alloy::objectReference::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;

function meta::alloy::objectReference::decodeObjectReferencesAndGetPkMap(clientVersion:String[1], encodedObjectReferences : String[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   let versionedFuncString = 'meta::protocols::pure::'+$clientVersion+'::invocation::execution::execute::getAlloyObjectReferenceAsMap_String_1__Map_1_';
   let versionedFunc       = $versionedFuncString->pathToElement()->cast(@Function<{String[1]->Map<String, Any>[1]}>);

   let refs                = $encodedObjectReferences->split(',');

   $refs->map(ref | let parsedObjectRef = $versionedFunc->eval($ref->trim());
                    $parsedObjectRef->getPkMapFromObjectReference($extensions);)->toJSON();
}

function <<access.private>> meta::alloy::objectReference::getPkMapFromObjectReference(parsedObjectRef : Map<String, Any>[1], extensions:meta::pure::router::extension::RouterExtension[*]):Map<String, Any>[1]
{
   let pathToMapping           = $parsedObjectRef->get('pathToMapping')->cast(@String)->toOne();
   let orgPkMap                = $parsedObjectRef->get('pkMap')->cast(@Map<String, Any>)->toOne();
   let operationResolvedSetsId = $parsedObjectRef->get('operationResolvedSetsId')->cast(@List<String>).values->toOneMany();
   let setId                   = $parsedObjectRef->get('setId')->cast(@String)->toOne();
   let type                    = $parsedObjectRef->get('type')->cast(@String)->toOne();

   let mapping                 = $pathToMapping->pathToElement()->cast(@Mapping);
   let setIdx                  = $operationResolvedSetsId->indexOf($setId);

   let set                     = $mapping.classMappingById($setId)->toOne();

   if($type->toLower() == 'relational',
      |let newPkMap = resolvePrimaryKeysNames($set->cast(@RelationalInstanceSetImplementation), $orgPkMap, if($operationResolvedSetsId->size() == 1, | '', | '_' + $setIdx->toString()), false, $extensions);
       [pair('pathToMapping', $pathToMapping),
        pair('setId', $setId),
        pair('pkMap', $newPkMap)]->newMap();,
      |fail('Not Supported yet !!'); ^Map<String, String>(););
}