// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::path::*;

native function meta::pure::functions::meta::openVariableValues(f:Function<Any>[1]):Map<String, List<Any>>[1];

native function meta::pure::functions::meta::stereotype(profile:Profile[1], str:String[1]):Stereotype[1];

native function meta::pure::functions::meta::tag(profile:Profile[1], str:String[1]):Tag[1];

native function meta::pure::functions::meta::newUnit(type:Unit[1], value:Number[1]):Any[1];

native function meta::pure::functions::meta::getUnitValue(unit:Any[1]):Number[1];

native function meta::pure::functions::meta::newClass(name:String[1]):Class<Any>[1];

native function meta::pure::functions::meta::newAssociation(name:String[1], p1:Property<Nil,Any|*>[1], p2:Property<Nil,Any|*>[1]):Association[1];

native function meta::pure::functions::meta::newEnumeration(name:String[1], values:String[*]):Enumeration<Any>[1];

native function meta::pure::functions::meta::newProperty(name:String[1], owner:GenericType[1], target:GenericType[1], multiplicity:Multiplicity[1]):Property<Nil,Any|*>[1];

native function meta::pure::functions::meta::newLambdaFunction(functionType:FunctionType[1]):LambdaFunction<Any>[1];

native function meta::pure::functions::meta::enumName<T>(enum:Enumeration<T>[1]):String[1];

native function meta::pure::functions::meta::enumValues<T>(enum:Enumeration<T>[1]):T[*];

native function meta::pure::functions::meta::genericTypeClass(g:GenericType[1]):Class<Any>[1];

native function meta::pure::functions::meta::generalizations(class:Type[1]):Type[1..*];

native function meta::pure::functions::meta::subTypeOf(subType:Type[1], superType:Type[1]):Boolean[1];

native function meta::pure::functions::meta::functionDescriptorToId(functionDescriptor:String[1]):String[1];

native function meta::pure::functions::meta::isValidFunctionDescriptor(functionDescriptor:String[1]):Boolean[1];

Class meta::pure::functions::meta::CompilationResult
{
    result:ValueSpecification[0..1];
    failure:CompilationFailure[0..1];

    succeeded()
    {
        $this.failure->isEmpty()
    }:Boolean[1];

    failed()
    {
        !$this.succeeded();
    }:Boolean[1];
}

Class meta::pure::functions::meta::CompilationFailure
{
    message:String[1];
    sourceInformation:SourceInformation[0..1];
}

native function meta::pure::functions::meta::compileValueSpecification<|m>(value:String[m]):CompilationResult[m];

native function meta::pure::functions::meta::deactivate(var:Any[*]):ValueSpecification[1];

native function meta::pure::functions::meta::reactivate(vs:ValueSpecification[1], vars:Map<String, List<Any>>[1]):Any[*];

native function meta::pure::functions::meta::canReactivateDynamically(vs:ValueSpecification[1]):Boolean[1];

native function meta::pure::functions::meta::evaluateAndDeactivate<T|m>(var:T[m]):T[m];

Class meta::pure::functions::meta::SourceInformation
{
    <<equality.Key>> source : String[1];
    <<equality.Key>> startLine : Integer[1];
    <<equality.Key>> startColumn : Integer[1];
    <<equality.Key>> line : Integer[1];
    <<equality.Key>> column : Integer[1];
    <<equality.Key>> endLine : Integer[1];
    <<equality.Key>> endColumn : Integer[1];
}

native function meta::pure::functions::meta::sourceInformation(node:Any[1]):SourceInformation[0..1];

native function meta::pure::functions::meta::isSourceReadOnly(node:String[1]):Boolean[1];

function meta::pure::functions::meta::elementToPath(element:Function<Any>[1]):String[1]
{
    $element->match(
        [
            p : PackageableElement[1] | $p->elementToPath('::'),
            p : AbstractProperty<Any>[1] | $p.name->toOne()
        ]
    )
}

function meta::pure::functions::meta::elementToPath(element:Type[1]):String[1]
{
    $element->cast(@PackageableElement)->elementToPath('::')
}

function meta::pure::functions::meta::elementToPath(element:Type[1], separator:String[1]):String[1]
{
    $element->cast(@PackageableElement)->elementToPath($separator)
}

function meta::pure::functions::meta::elementToPath(element:PackageableElement[1]):String[1]
{
    $element->elementToPath('::')
}

function meta::pure::functions::meta::elementToPath(element:PackageableElement[1], separator:String[1]):String[1]
{
    let path = $element->elementPath();
    if($path->size() == 1,
       | let first = $path->at(0);
         if(is(::, $first),
            | '',
            | $first.name->toOne());,
       | $path->tail()->map(e | $e.name)->joinStrings($separator));
}

function meta::pure::functions::meta::elementPath(element:PackageableElement[1]):PackageableElement[1..*]
{
    let pkg = $element.package;
    if ($pkg->isEmpty(),
        | $element->toOneMany(), // this is a hack to work around a problem with the compiled execution
        | elementPath($pkg->toOne())->add($element));
}