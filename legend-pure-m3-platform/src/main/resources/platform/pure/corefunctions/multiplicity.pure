// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function meta::pure::functions::multiplicity::hasToOneUpperBound(multiplicity:Multiplicity[1]):Boolean[1]
{
    $multiplicity->hasUpperBound() && eq($multiplicity->getUpperBound(), 1)
}

function meta::pure::functions::multiplicity::hasUpperBound(multiplicity:Multiplicity[1]):Boolean[1]
{
    let upperBound = $multiplicity.upperBound;
    !$upperBound->isEmpty() && !$upperBound->toOne().value->isEmpty() && $upperBound->toOne().value != -1;
}

function meta::pure::functions::multiplicity::getUpperBound(multiplicity:Multiplicity[1]):Integer[1]
{
    $multiplicity.upperBound->toOne().value->toOne()
}

function meta::pure::functions::multiplicity::isToOne(multiplicity:Multiplicity[1]):Boolean[1]
{
    hasToOneUpperBound($multiplicity) && eq($multiplicity->getLowerBound(), 1)
}

function meta::pure::functions::multiplicity::isToMany(m:Multiplicity[1]):Boolean[1]
{
   !$m->hasUpperBound() || ($m->getUpperBound() > 1);
}

function meta::pure::functions::multiplicity::getLowerBound(multiplicity:Multiplicity[1]):Integer[1]
{
    $multiplicity.lowerBound->toOne().value->toOne()
}