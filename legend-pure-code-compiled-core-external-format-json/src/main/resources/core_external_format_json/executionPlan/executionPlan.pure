// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::pure::executionPlan::engine::java::platform::*;
import meta::pure::executionPlan::engine::*;
import meta::external::language::java::factory::*;
import meta::pure::executionPlan::engine::java::naming::*;
import meta::external::language::java::factory::project::*;
import meta::pure::executionPlan::engine::java::graphFetch::json::*;
import meta::external::language::java::transform::*;
import meta::pure::executionPlan::engine::java::typeInfo::*;
import meta::external::shared::format::binding::validation::*;
import meta::external::shared::format::executionPlan::*;

import meta::external::format::json::binding::validation::*;
import meta::external::format::json::executionPlan::*;
import meta::external::format::json::executionPlan::engine::java::jsonDeserialize::*;
import meta::external::format::json::executionPlan::engine::java::jsonSerialize::*;

import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::metamodel::path::*;
import meta::pure::router::extension::*;
import meta::pure::runtime::*;

Class meta::external::format::json::executionPlan::JsonSerializeExecutionNode extends ExternalFormatSerializeExecutionNode
{
}

Class meta::external::format::json::executionPlan::JsonDeserializeExecutionNode extends ExternalFormatDeserializeExecutionNode
{
   binding : Binding[1];
   tree    : RootGraphFetchTree<Any>[0..1]; 
}

Class meta::external::format::json::executionPlan::JsonPathReference extends meta::external::shared::format::executionPlan::PathReference
{
   path    : String[1];
}

function meta::external::format::json::executionPlan::generateSerializeNode(checked:Boolean[1], binding:Binding[1], children:ExecutionNode[*]): ExternalFormatSerializeExecutionNode[1]
{
   ^JsonSerializeExecutionNode(
      resultType      = ^ResultType(type=String),
      resultSizeRange = PureOne,
      checked         = $checked,
      binding         = $binding,
      executionNodes  = $children
   );
}

function meta::external::format::json::executionPlan::generateDeserializeNode(connection:Connection[1], children:ExecutionNode[1], tree:RootGraphFetchTree<Any>[0..1]): ExecutionNode[1]
{
   assert($tree->isNotEmpty(), 'Deserialization without Graph Fetch Tree not yet supported');
   let returnedClass = $tree.class->toOne();
   
   ^JsonDeserializeExecutionNode
   (
      resultType      = ^PartialClassResultType
                         (
                            type = $tree->toOne()->typeFromGraphFetchTree(),
                            propertiesWithParameters = $tree.subTrees->cast(@PropertyGraphFetchTree)->map(x | $x->map(x | ^PropertyWithParameters(property = $x.property, parameters = $x.parameters)))
                         ),
      resultSizeRange = ZeroMany,
      pathOffset      = $connection->cast(@ExternalFormatConnection).pathOffset->cast(@JsonPathReference),
      binding         = $connection->cast(@ExternalFormatConnection).element->cast(@Binding),
      tree            = $tree,
      executionNodes  = $children
   );
}

function meta::external::format::json::executionPlan::generatePathReference(path:Path<Nil,Any|*>[1]): PathReference[1]
{
   let pathString = $path.path->filter(ele | $ele->instanceOf(PropertyPathElement))->cast(@PropertyPathElement).property.name->joinStrings('/', '/', '');
   ^JsonPathReference(
      path = $pathString
   );
}

function meta::external::format::json::executionPlan::printPlanNodeToString(space:String[1], extensions:RouterExtension[*]): Function<{Nil[1]->String[1]}>[*]
{
   [
      {node:JsonSerializeExecutionNode[1] |
         'JSON_Serialize\n' + 
         $space + '(' + header($node, $space, $extensions) + '\n' +
         $space + '  checked = ' + $node.checked->toString() + '\n' +
         $space + '  binding = ' + $node.binding->elementToPath() + '\n' +
         $node->childrenToString($space+'  ', $extensions) + '\n' +
         $node.implementation->printImplementation('implementation', $space+'  ', $extensions) +
         $space + ')\n'
      },
      {node:JsonDeserializeExecutionNode[1] |
         'JSON_Deserialize\n' + 
         $space + '(' + header($node, $space, $extensions) + '\n' +
         $space + '  binding = ' + $node.binding->elementToPath() + '\n' +
         if($node.pathOffset->isEmpty(), | '', | $space + '  pathOffset = ' + $node.pathOffset->cast(@JsonPathReference).path->toOne() + '\n')  +
         $node->childrenToString($space+'  ', $extensions) + '\n' +
         $node.implementation->printImplementation('implementation', $space+'  ', $extensions) +
         $space + ')\n'
      }
   ]
}

function meta::external::format::json::executionPlan::planJavaPrepare(path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]): Function<{Nil[1]->GenerationContext[1]}>[*]
{
   [
      node:JsonSerializeExecutionNode[1]   | prepareForJsonSerialize($node, $path, $context, $extensions, $debug),
      node:JsonDeserializeExecutionNode[1] | prepareForJsonDeserialize($node, $path, $context, $extensions, $debug)
   ]
}

function meta::external::format::json::executionPlan::planJavaGenerate(path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]): Function<{Nil[1]->GeneratedCode[1]}>[*]
{
   [
       node:JsonSerializeExecutionNode[1]   | generateForJsonSerialize($node, $path, $context, $extensions, $debug),
       node:JsonDeserializeExecutionNode[1] | generateForJsonDeserialize($node, $path, $context, $extensions, $debug)
   ]
}

function meta::external::format::json::executionPlan::getInternalizeDetails(binding:Binding[1], debug:DebugContext[1]): InternalizeDetails[1]
{
  print(if($debug.debug,|$debug.space+'getInternalizeDetails for JSON\n', |''));

  let bindingDetail = bindDetails($binding);
  assert($bindingDetail->instanceOf(JsonSchemaBindingDetail), | 'Detailed binding failed: ' + $bindingDetail->cast(@FailedBindingDetail).errorMessages->joinStrings('\n'));

  ^InternalizeDetails
  (
    bindingDetail     = $bindingDetail,
    sourceRecordClass = JsonDataRecord,
    graphFetchTrees   = #{JsonDataRecord {number, record}}#,
    generator         = {node:InternalizeExecutionNode[1], path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]|             
       print(if($debug.debug,|$debug.space+'('+$path+') generateForInternalize for JSON\n', |''));   

       let conventions       = $context.conventions;
       let pureClass         = $node.resultType.type->cast(@Class<Any>)->toOne();
       let dependentClass    = $context.typeInfos->classDependenciesViaPropertiesWithsubTypes($pureClass);
       let readableClasses   = $pureClass->concatenate($dependentClass);
       let readableEnums     = $context.typeInfos->enumDependenciesViaProperties($pureClass);
       let storeReaderProject = createJsonReading($pureClass, $conventions->className($pureClass), $path, $readableClasses, $readableEnums, $context, $debug->indent());
       
       let storeStreamReadingContext = $conventions->iStoreStreamReadingExecutionNodeContextParam();   
       
       let streamReaderMethodCodes = $node.dataSource->match([
          url: UrlConstant[1]         | $conventions->jsonReaderClass($path, $pureClass)
                                          ->j_new($storeStreamReadingContext->j_invoke('createUrl', j_string($url.url))->j_invoke('openStream', []))
                                          ->j_return()
                                          ->j_ioExTryCatch(),
          data: StringConstant[1]     | $conventions->jsonReaderClass($path, $pureClass)
                                          ->j_new(j_new(javaClass('java.io.ByteArrayInputStream'), j_string($data.data)->j_invoke('getBytes', [])))
                                          ->j_return()
                                          ->j_ioExTryCatch(),
          runtime: RuntimeVariable[1] | assert(false, 'RuntimeVariable is not yet supported'); [];//TODO
       ]);

       $conventions->jsonReaderClass($path, $pureClass)
               ->j_new($storeStreamReadingContext->j_invoke('createUrl', j_string('$json.url'))->j_invoke('openStream', []))
               ->j_return()
               ->j_ioExTryCatch();
          
       let executeClassWithImports = $conventions->planNodeClass('public', $path, 'Execute')
         ->usingKnownPackages($conventions->knownPackages())
         ->imports($conventions->standardImports())
         ->imports([IStoreStreamReadingExecutionNodeSpecifics, StoreStreamReader, IStoreStreamReadingExecutionNodeContext]->map(x | $conventions->className($x)))
         ->implements($conventions->className(IStoreStreamReadingExecutionNodeSpecifics));

       let executeClass = $executeClassWithImports->addMethod(
          javaMethod(['public'], $conventions->className(StoreStreamReader), 'streamReader', [$conventions->iStoreStreamReadingExecutionNodeContextParam()], $streamReaderMethodCodes)
       );
       
       let executeProject = newProject()->addClasses($executeClass);
       let allProjects    = $executeProject
         ->concatenate($storeReaderProject)
         ->concatenate($streamReaderMethodCodes->dependencies()->resolveAndGetProjects())
         ->toOneMany();

       $allProjects->mergeProjects()->generatedCode($executeClass);
    }
  );
}
