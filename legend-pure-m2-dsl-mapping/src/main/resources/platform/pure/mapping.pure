// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::*;
import meta::pure::runtime::*;
import meta::pure::store::*;
import meta::pure::tools::*;
import meta::pure::functions::collection::*;
import meta::pure::mapping::aggregationAware::*;

// Mapping
Class meta::pure::mapping::Mapping extends PackageableElement
{
    includes : MappingInclude[*];
    classMappings : SetImplementation[*];
    enumerationMappings : EnumerationMapping<Any>[*];
    associationMappings : AssociationImplementation[*];

    enumerationMappingByName(name:String[1])
    {
        let enumMapping = $this.includes->map(i | $i.included)
                      ->map(m | $m.enumerationMappingByName($name))
                      ->concatenate($this.enumerationMappings->filter(em|$em.name == $name))->removeDuplicates();

        if ($enumMapping->isEmpty(), | [], | $enumMapping->toOne());
    }:EnumerationMapping<Any>[0..1];

    classMappingByClass(class:Class<Any>[1])
    {
        let assocPropertyMappings = $this.associationMappings.allPropertyMappings();
        let assocPropertyMappingsGroupedById = $assocPropertyMappings->groupBy({p | $p.sourceSetImplementationId});
        $this.includes->map(i | $i.included)
                      ->map(m | $m.classMappingByClass($class))
                      ->concatenate($this.classMappings->filter(cm|$cm.class == $class))
                      ->concatenate($this.classMappings->map(impl|$impl->instanceOf(AggregationAwareSetImplementation)->if(|$impl->cast(@AggregationAwareSetImplementation).aggregateSetImplementations.setImplementation,|[]))->filter(cm|$cm.mappingClass == $class))
                      ->map(cm | $cm->addAssociationMappingsIfRequired($assocPropertyMappingsGroupedById));
    }:SetImplementation[*];

    rootClassMappingByClass(class:Class<Any>[1])
    {
        $this.classMappingByClass($class)->filter(s|$s.root == true)->last();
    }:SetImplementation[0..1];

    _classMappingByIdRecursive(id:String[*])
    {
        let result = $this.includes->map(i | $i.included)
                                   ->map(m | $m._classMappingByIdRecursive($id))
                                   ->concatenate($this.classMappings->filter(cm|$cm.id == $id))
                                   ->distinct();
    }:SetImplementation[*];

    classMappingById(id:String[1])
    {
        let assocPropertyMappings = $this._associationPropertyMappingsByIdRecursive($id)->removeDuplicates()->groupBy({p | $p.sourceSetImplementationId});
        let allClassMappings = $this._classMappingByIdRecursive($id);
        if($allClassMappings->isEmpty(),| [],| $allClassMappings->toOne()->addAssociationMappingsIfRequired($assocPropertyMappings));
    }:SetImplementation[0..1];

    _associationPropertyMappingsByIdRecursive(id:String[1])
    {
        let result = $this.includes->map(i | $i.included)
                                   ->map(m | $m._associationPropertyMappingsByIdRecursive($id))
                                   ->concatenate($this.associationMappings.allPropertyMappings()->filter(pm | $pm.sourceSetImplementationId == $id));
    }:PropertyMapping[*];

    classMappings()
    {
       let allAssocPropertyMappings = $this._allAssociationMappingsRecursive()->removeDuplicates().allPropertyMappings()->groupBy({p | $p.sourceSetImplementationId});
       let allClassMappings = $this._allClassMappingsRecursive()->removeDuplicates();
       $allClassMappings->map(cm | $cm->addAssociationMappingsIfRequired($allAssocPropertyMappings));
    }:SetImplementation[*];

    _allClassMappingsRecursive()
    {
       $this.includes.included->map(m | $m._allClassMappingsRecursive())->concatenate($this.classMappings);
    }:SetImplementation[*];

    _allAssociationMappingsRecursive()
    {
       $this.includes.included->map(m | $m._allAssociationMappingsRecursive())->concatenate($this.associationMappings);
    }:AssociationImplementation[*];

    findSubstituteStore(store:Store[1])
    {
        $this.includes->fold({inc:MappingInclude[1], sub:Store[0..1] | if($sub->isEmpty(), |$inc.findSubstituteStore($store), |$sub)}, [])
    }:Store[0..1];

    resolveStore(store:Store[1])
    {
        let substitute = $this.findSubstituteStore($store);
        if($substitute->isEmpty(), |$store, |$substitute->toOne());
    }:Store[1];

    allSuperSetImplementationIds(id : String[1])
    {
        let setImplementation = $this.classMappingById($id);
        $id->concatenate(if ($setImplementation->isEmpty() || $setImplementation.superSetImplementationId->isEmpty(),
                             | [],
                             | $this.allSuperSetImplementationIds($setImplementation.superSetImplementationId->toOne())));
    }:String[*];
}

function <<access.private>> meta::pure::mapping::addAssociationMappingsIfRequired(classMapping:SetImplementation[1], associationPropertyMappingsById:Map<String,List<PropertyMapping>>[1]):SetImplementation[1]
{
    if ($classMapping->instanceOf(InstanceSetImplementation),
        | let assocProperties = $associationPropertyMappingsById->get($classMapping.id);
          if ($assocProperties->isEmpty(),
              | $classMapping,
              | let pmr = $classMapping->cast(@InstanceSetImplementation);
                ^$pmr(propertyMappings=$pmr.propertyMappings->concatenate($assocProperties.values));
          );,
        | $classMapping
    );
}

Class meta::pure::mapping::ValueTransformer<T>
{
    toDomainValue(sourceValue: Any[1]) { $sourceValue; }:Any[1];

    toSourceValues(domainValue: Any[1]) { $domainValue; }:Any[*];
}

Class meta::pure::mapping::EnumerationMapping<T> extends meta::pure::mapping::ValueTransformer<T>
{
    name : String[1];
    parent : Mapping[1];
    enumeration : Enumeration<T>[1];
    enumValueMappings: EnumValueMapping[*];

    toDomainValue(sourceValue: Any[1])
    {
        let enumValueMapping = $this.enumValueMappings->filter( m | $m.sourceValues->contains($sourceValue) );
        assertEquals(1, $enumValueMapping->size(), 'The system can\'t find an enum value from the enum: \''+$this.enumeration->enumName()+'\' in the enumMapping \''+$this.name+'\' for the value \''+$sourceValue->toString()+'\'');
        $enumValueMapping->toOne().enum;
    }:Any[1];

    toSourceValues(domainValue: Any[1])
    {
        let enumValueMapping = $this.enumValueMappings->filter( m | $m.enum == $domainValue );
        assertEquals(1, $enumValueMapping->size(), 'The system can\'t find source values in the enumMapping \''+$this.name+'\' for the enum \''+$this.enumeration->enumName()+ '.' +$domainValue->toString()+'\'');
        $enumValueMapping->toOne().sourceValues;
    }:Any[*];

}

Class meta::pure::mapping::EnumValueMapping
{
   enum : Enum[1];
   sourceValues : Any[*];
}

Class meta::pure::mapping::PropertyOwnerImplementation
{
    id : String[1];
    superSetImplementationId: String[0..1];
    parent : Mapping[1];
}

Class meta::pure::mapping::SetImplementation extends PropertyOwnerImplementation
{
    root : Boolean[1];
    class : Class<Any>[1];
}


Class meta::pure::mapping::PropertyMappingsImplementation extends PropertyOwnerImplementation
{
    stores : meta::pure::store::Store[*];
    propertyMappings : PropertyMapping[*];

    superMapping()
    {
       if ($this.superSetImplementationId->isEmpty(),
           | [],
           | let superMapping = $this.parent.classMappingById($this.superSetImplementationId->toOne());
             if($superMapping->isEmpty(),
                | [],
                | $superMapping->toOne()->cast(@PropertyMappingsImplementation)
             );
       );
    }:PropertyMappingsImplementation[0..1];

    allPropertyMappings()
    {
       let thisPropertyMappings = $this.propertyMappings;
       let superMapping = $this.superMapping();
       if ($superMapping->isEmpty(),
           | $thisPropertyMappings,
           | let inheritedPropertyMappings = $superMapping.allPropertyMappings()->filter(pm | !$pm.property.name->isEmpty() && !$thisPropertyMappings.property.name->contains($pm.property.name->toOne()));
             $thisPropertyMappings->concatenate($inheritedPropertyMappings)->removeDuplicates();
       );
    }:PropertyMapping[*];

    propertyMappingsByPropertyName(s:String[1])
    {
        $this.allPropertyMappings()->filter(pm|$pm.property.name == $s)
    }:PropertyMapping[*];

    propertyMappingByPropertyNameAndTargetId(s:String[1], targetId:String[1])
    {
        $this.allPropertyMappings()->filter(pm|$pm.property.name == $s && $pm.targetSetImplementationId == $targetId)->first()
    }:PropertyMapping[0..1];
}

Class meta::pure::mapping::InstanceSetImplementation extends SetImplementation, PropertyMappingsImplementation
{
    mappingClass : MappingClass<Any>[0..1];
    aggregateSpecification: AggregateSpecification[0..1];
}

Class meta::pure::mapping::EmbeddedSetImplementation extends InstanceSetImplementation, PropertyMapping
{

}

Class meta::pure::mapping::AssociationImplementation extends PropertyMappingsImplementation
{
    association:Association[1];
}

Class meta::pure::mapping::OtherwiseEmbeddedSetImplementation extends EmbeddedSetImplementation
{
    otherwisePropertyMapping: PropertyMapping[1];
    propertyMappingsByPropertyName(s:String[1])
    {
        $this.allPropertyMappings()->concatenate($this.otherwisePropertyMapping)->filter(pm|$pm.property.name == $s)
    }:PropertyMapping[*];
}

Class meta::pure::mapping::InlineEmbeddedSetImplementation extends EmbeddedSetImplementation
{
    inlineSetImplementationId: String[1];
    inlineEmbeddedProperty(propertyName:String[1])
    {
        if ($this.owner->isEmpty()
                 ,| []
                 ,| let propertyMappings = $this.owner->toOne().propertyMappingsByPropertyName($this.property.name->toOne())->filter(pm | !$pm->instanceOf(EmbeddedSetImplementation));
                      if ($propertyMappings->isEmpty()
                      ,| let cm = $this.parent._classMappingByIdRecursive($this.inlineSetImplementationId);
                         let result = $cm->cast(@InstanceSetImplementation).propertyMappingsByPropertyName($propertyName);
                         assertEquals(1, $result->size(), 'Inline embedded mapping for property '+ $propertyName+ ' has more than one root mapping is, not supported yet! : ' + $result.sourceSetImplementationId->joinStrings(','));
                         let from =  $result->at(0);
                         ^$from(owner = $this.owner, sourceSetImplementationId = $this.sourceSetImplementationId);
                      ,|  $propertyMappings);
        )}:PropertyMapping[*];
}

Class meta::pure::mapping::SetImplementationContainer
{
    id : String[1];
    setImplementation : SetImplementation[1];
}

Class meta::pure::mapping::OperationSetImplementation extends meta::pure::mapping::SetImplementation
{
    parameters : SetImplementationContainer[*];
    operation : Function<{OperationSetImplementation[1] -> SetImplementation[*]}>[1];
}


Class meta::pure::mapping::MergeOperationSetImplementation extends meta::pure::mapping::OperationSetImplementation
{
    validationFunction : LambdaFunction<Any>[1];
}


Class meta::pure::mapping::PropertyMapping
{
    owner : PropertyMappingsImplementation[0..1];
    targetSetImplementationId : String[1];
    sourceSetImplementationId : String[1];
    property : Property<Nil,Any|*>[1];
    localMappingProperty : Boolean[0..1];
    localMappingPropertyType : Type[0..1];
    localMappingPropertyMultiplicity : Multiplicity[0..1];
    store : meta::pure::store::Store[0..1];
}

Class meta::pure::mapping::PropertyMappingValueSpecificationContext extends ValueSpecificationContext
{
    propertyMapping : PropertyMapping[1];
}

Class meta::pure::mapping::MappingClass<T> extends Class<T>
{
  setImplementation : SetImplementation[0..1];
  class : Class<T>[0..1];
  localProperties : Property<Nil,Any|*>[*];
}

Class meta::pure::mapping::Result<T|m>
{
   values:T[m];
   activities:Activity[*];
}

Class meta::pure::mapping::Activity
{
}

Class meta::pure::mapping::RoutingActivity extends meta::pure::mapping::Activity
{
   routingTimeInNanoSecond : Integer[0..1];
}

Class meta::pure::mapping::MappingInclude
{
    owner : Mapping[1];
    included : Mapping[1];
    storeSubstitutions : SubstituteStore[*];
    findSubstituteStore(store:Store[1])
    {
        let includedSub = $this.included.findSubstituteStore($store);
        if ($includedSub->isEmpty(),
            | $this.storeSubstitutions->filter(s | $store == $s.original)->first()->map(s | $s.substitute),
            | let sub = $this.storeSubstitutions->filter(s | $includedSub == $s.original);
              if ($sub->isEmpty(),
                  | $includedSub,
                  | $sub->first()->map(s | $s.substitute));
           );
    }:Store[0..1];
}

Class meta::pure::mapping::SubstituteStore
{
    owner : MappingInclude[1];
    original : Store[1];
    substitute : Store[1];
}

// M2M

Class meta::pure::mapping::modelToModel::PureInstanceSetImplementation extends InstanceSetImplementation
{
    srcClass : Type[0..1];
    filter : LambdaFunction<Any>[0..1]; // Boolean Expression
}

Class meta::pure::mapping::modelToModel::PurePropertyMapping extends PropertyMapping
{
    transform : LambdaFunction<Any>[1];
    transformer : ValueTransformer<Any>[0..1];
    valueTransform(sourceValue:Any[1])
    {
        if ($this.transformer->isEmpty(),
            | $sourceValue,
            | $this.transformer->toOne()->cast(@EnumerationMapping<Any>).toDomainValue($sourceValue)
        )
    }:Any[1];
    explodeProperty : Boolean[0..1];
}

// XStore

Class meta::pure::mapping::xStore::XStoreAssociationImplementation extends AssociationImplementation
{
}

Class meta::pure::mapping::xStore::XStorePropertyMapping extends PropertyMapping
{
    crossExpression : LambdaFunction<{Nil[1],Nil[1]->Boolean[1]}>[1];
}

// Aggregation Aware

Class meta::pure::mapping::aggregationAware::AggregationAwareSetImplementation extends InstanceSetImplementation
{
    aggregateSetImplementations: AggregateSetImplementationContainer[*];
    mainSetImplementation: InstanceSetImplementation[1];

    propertyMappingsByPropertyName(s:String[1])
    {
        $this.mainSetImplementation.propertyMappingsByPropertyName($s)
    }:PropertyMapping[*];
}

Class meta::pure::mapping::aggregationAware::AggregationAwarePropertyMapping extends PropertyMapping
{
}

Class meta::pure::mapping::aggregationAware::AggregateSetImplementationContainer
{
    index: Integer[1];
    aggregateSpecification: AggregateSpecification[1];
    setImplementation: InstanceSetImplementation[1];
}

Class meta::pure::mapping::aggregationAware::AggregateSpecification
{
    canAggregate: Boolean[1];
    groupByFunctions: meta::pure::mapping::aggregationAware::GroupByFunctionSpecification[*];
    aggregateValues: meta::pure::mapping::aggregationAware::AggregationFunctionSpecification[*];
}

Class meta::pure::mapping::aggregationAware::GroupByFunctionSpecification
{
    groupByFn: LambdaFunction<Any>[1];
}

Class meta::pure::mapping::aggregationAware::AggregationFunctionSpecification
{
    mapFn: LambdaFunction<Any>[1];
    aggregateFn: LambdaFunction<Any>[1];
}

Class meta::pure::mapping::aggregationAware::AggregateSpecificationValueSpecificationContext extends ValueSpecificationContext
{
    aggregateSetImplementation: InstanceSetImplementation[1];
}