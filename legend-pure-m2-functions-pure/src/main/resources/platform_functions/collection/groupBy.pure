// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


import meta::pure::functions::collection::tests::model::*;

native function meta::pure::functions::collection::groupBy<X,K>(set:X[*], f:Function<{X[1]->K[1]}>[1]):Map<K,List<X>>[1];
//{
//   $set->fold({value,map|let key = $f->eval($value);
//                         let currentList = $map->get($key);
//                         $map->put($key, ^List<X>(values=if($currentList->isEmpty(), |$value, |$currentList->toOne().values->concatenate($value))));
//              },^Map<K,List<X>>());
//}


function <<test.Test>> meta::pure::functions::collection::tests::groupBy::testGroupBy():Boolean[1]
{
   let set = [^CO_Person(firstName='David', lastName='Roe'), ^CO_Person(firstName='John', lastName='Dean'), ^CO_Person(firstName='David', lastName='Miles'), ^CO_Person(firstName='Bob', lastName='Branche')];
   assertEquals(['Roe', 'Miles'], $set->groupBy(p|$p.firstName)->get('David').values.lastName);
   assertEquals(['David'], $set->groupBy(p|$p.lastName)->get('Roe').values.firstName);
}

function <<test.Test>> meta::pure::functions::collection::tests::groupBy::testGroupByObj():Boolean[1]
{
   let address = ^CO_Address(name='ok1');
   let address2 = ^CO_Address(name='ok2');
   let set = [^CO_NPerson(firstName='David', lastName='Roe', address = $address), ^CO_NPerson(firstName='John', lastName='Dean', address = $address2), ^CO_NPerson(firstName='David', lastName='Miles', address = $address), ^CO_NPerson(firstName='Bob', lastName='Branche', address = $address2)];
   assertEquals(['ok1', 'ok2'], $set->groupBy(p|$p.address->toOne())->keys().name->sort());
}