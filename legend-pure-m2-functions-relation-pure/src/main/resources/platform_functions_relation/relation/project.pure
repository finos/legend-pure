// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::relation::*;
import meta::pure::functions::relation::tests::project::*;

native function meta::pure::functions::relation::project<C,T>(cl:C[*], x:FuncColSpecArray<{C[1]->Any[*]},T>[1]):Relation<T>[1];



Class meta::pure::functions::relation::tests::project::Address
{
  value : String[1];
}

Class meta::pure::functions::relation::tests::project::Person
{
  name : String[1];
  addresses : Address[*];
  values : Integer[*];
}

function <<test.Test>> meta::pure::functions::relation::tests::project::testSimpleProject():Boolean[1]
{
  assertEquals(
          [
            'ok,no,1',
            'ok,no,2',
            'ok,no,3',
            'ok,other,1',
            'ok,other,2',
            'ok,other,3'
          ],
          ^Person
          (
            name = 'ok',
            addresses = [
                ^Address(value='no'),
                ^Address(value='other')
            ],
            values = [1,2,3]
          )->project(~[
                          one:x|$x.name,
                          two:x|$x.addresses.value,
                          three:x|$x.values
                       ])
             ->map(x|[$x.one->s(), $x.two->s(), $x.three->s()]->joinStrings(','))
         );
}

function <<test.Test>> meta::pure::functions::relation::tests::project::testSimpleProjectWithEmpty():Boolean[1]
{
  assertEquals(
          [
            'ok,no,null',
            'ok,other,null'
          ],
          ^Person
          (
            name = 'ok',
            addresses = [
                ^Address(value='no'),
                ^Address(value='other')
            ],
            values = []
          )->project(~[
                          one:x|$x.name,
                          two:x|$x.addresses.value,
                          three:x|$x.values
                       ])
             ->map(x|[$x.one->s(), $x.two->s(), $x.three->s()]->joinStrings(','))
         );
}
