// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::relation::*;

Enum meta::pure::functions::relation::JoinKind
{
    LEFT,
    INNER
}

native function meta::pure::functions::relation::join<T,V>(rel1:Relation<T>[1], rel2:Relation<V>[1], joinKind:JoinKind[1], f:Function<{T[1],V[1]->Boolean[1]}>[1]):Relation<T+V>[1];

function <<test.Test>> meta::pure::functions::relation::tests::join::testSimpleJoin():Boolean[1]
{
  let tds = #TDS
              id, name
              1, George
              2, Pierre
              3, Sachin
              4, David
            #;

  let tds2 = #TDS
              id2, col, other
              1, More George 1, 1
              1, More George 2, 2
              4, More David, 1
            #;


  assertEquals(
    '1 1 George More George 1\n'+
    '1 1 George More George 2\n'+
    '4 4 David More David', $tds->join($tds2, JoinKind.INNER, {x,y| $x.id == $y.id2})->map(x|$x.id->s() + ' ' + $x.id2->s()+ ' ' + $x.name->s()+ ' ' + $x.col->s())->joinStrings('\n'));

  assertEquals(
    '1 1 George More George 1\n'+
    '1 1 George More George 2\n'+
    '4 4 David More David\n'+
    '2 null Pierre null\n'+
    '3 null Sachin null', $tds->join($tds2, JoinKind.LEFT, {x,y| $x.id == $y.id2})->map(x|$x.id->s() + ' ' + $x.id2->s()+ ' ' + $x.name->s()+ ' ' + $x.col->s())->joinStrings('\n'));

}