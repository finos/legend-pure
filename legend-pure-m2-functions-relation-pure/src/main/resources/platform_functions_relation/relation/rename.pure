// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::relation::*;

native function meta::pure::functions::relation::rename<T,Z,V>(r:Relation<T>[1], old:ColSpec<Z>[1], new:ColSpec<V>[1]):Relation<T-Z+V>[1];

function meta::pure::functions::relation::rename<T,Z,V>(r:TDS<T>[1], old:ColSpec<Z>[1], new:ColSpec<V>[1]):Relation<T-Z+V>[1]
{
    $r->cast(@Relation<T>)->rename($old, $new);
}

function <<test.Test>> meta::pure::functions::relation::tests::rename::testSimpleRename():Boolean[1]
{
    let res = #TDS
                value, str
                1, a
                3, ewe
                4, qw
                5, wwe
                6, weq
              #->rename(~str:String, ~newStr:String);
    assertEquals(5, $res->size());
    assertEquals('aeweqwwweweq', $res->map(c|$c.newStr)->joinStrings(''));
}