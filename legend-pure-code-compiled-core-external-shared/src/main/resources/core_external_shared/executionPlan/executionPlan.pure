// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::*;
import meta::alloy::runtime::java::naming::*;
import meta::alloy::runtime::java::typeInfo::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::executionPlan::engine::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::runtime::*;
import meta::java::generation::code::*;
import meta::java::generation::convention::*;
import meta::java::generation::utils::*;
import meta::java::metamodel::factory::*;
import meta::java::metamodel::project::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::pure::router::extension::*;

function meta::external::shared::format::executionPlan::createDataClassesProject(classes:Class<Any>[*], path:String[1], context:GenerationContext[1], debug:DebugContext[1]): Project[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') createDataClassesProject\n', |''));
   mergeProjects($classes->map(c| $c->createDataClass($path, $context, $debug->indent()))->toOneMany());
}

function meta::external::shared::format::executionPlan::generateDataQualityNode(deserializeNode:ExecutionNode[1], enableConstraints:Boolean[1], checked:Boolean[1]): ExecutionNode[1]
{
   ^DataQualityExecutionNode(
      resultType        = $deserializeNode.resultType,
      resultSizeRange   = $deserializeNode.resultSizeRange,
      enableConstraints = $enableConstraints,
      checked           = $checked,
      executionNodes    = $deserializeNode
   );
}

function meta::external::shared::format::executionPlan::planPrepareDataQuality(path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]): Function<{Nil[1]->GenerationContext[1]}>[*]
{
   {node:DataQualityExecutionNode[1] | 
      print(if($debug.debug,|$debug.space+'('+$path+') prepare DataQualityExecutionNode\n', |''));
      let childNodeInfo   = $context->nodeInfosForPath($path + '.n1')->toOne();
      $context->addNodeInfo(^$childNodeInfo(path=$path));
   };
}

function meta::external::shared::format::executionPlan::printPlanNodeToString(space:String[1], extensions:RouterExtension[*]): Function<{Nil[1]->String[1]}>[*]
{
   {node:DataQualityExecutionNode[1] |
      'DataQuality\n' + 
      $space + '(' + header($node, $space, $extensions) + '\n' +
      $space + '  enableConstraints = ' + $node.enableConstraints->toString() + '\n' +
      $space + '  checked = ' + $node.checked->toString() + '\n' +
      $node->childrenToString($space+'  ', $extensions) + '\n' +
      $node.implementation->printImplementation('implementation', $space+'  ', $extensions) +
      $space + ')\n'
   };
}

Class <<access.private>> meta::external::shared::format::executionPlan::PropertyDetails
{
   property          : AbstractProperty<Any>[1];
   fieldName         : String[1];
   sizeFieldName     : String[1];
   propType          : Type[1];
   javaType          : meta::java::metamodel::Type[1];
   itemType          : meta::java::metamodel::Type[1];
   getterName        : String[1];
   adderName         : String[1];
   adderParam        : Code[1];
   multiplicityCheck : Code[0..1];
   
   name() {$this.property.name->toOne()}: String[1];
   isViaAssociation() {$this.property.owner->instanceOf(Association)}: Boolean[1];
}

function meta::external::shared::format::executionPlan::createDataClass(class:Class<Any>[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]): Project[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') createDataClass for '+$class->elementToPath()+'\n', |''));
   
   let conventions = $context.conventions;
   let pureDate    = $conventions->className(PureDate);
   let defects     = j_variable(javaList($conventions->defectClass()), 'defects');
   
   let baseClass = $conventions->dataClass($class, $path)->addModifiers('public')
      ->implements($conventions->className($class))
      ->implements($conventions->className(_IExternalData))
      ->addField(c|
           javaField(['public', 'static', 'final'], $conventions->className(_IExternalDataFactory), 'FACTORY',
              j_newAnon($conventions->className(_IExternalDataFactory), [],
                 [
                    j_method(['public'], $conventions->className(_IExternalData), 'newInstance', [], j_return(j_new($c, []))),
                    j_method(['public'], javaString(), 'getPureClassName', [], j_return(j_string($class->elementToPath())))
                 ]
              ) 
           )
        );
   
   let properties = $context.typeInfos->allProperties($class)->map(p|
      let fieldName     = $conventions->fieldName($p);
      let sizeFieldName = $fieldName+'Size';
      let javaType      = $conventions->pureTypeToJavaType($p);
      let propType      = $p->functionReturnType().rawType->toOne();
      let itemType      = if($javaType->isJavaList(), |$javaType->elementType(), |$javaType)->toUnboxed();
                                                                   
      let occurs                = occursFromMultiplicity($p.multiplicity);
      let getSize               = if($javaType->isJavaList(), 
                                     | j_this($baseClass)->j_field($fieldName, $javaType)->j_invoke('size', [], javaInt()),
                                     | j_this($baseClass)->j_field($sizeFieldName, javaInt())
                                  );
      let lowerBoundClause      = $getSize->j_lt($occurs.first);
      let upperBoundClause      = $getSize->j_gt($occurs.second);
      let expectedMultiplicity  = $p.multiplicity->printMultiplicity();
      let addMultiplicityDefect = $defects->j_invoke('add', $conventions->newClassStructureDefect(j_string('Invalid multiplicity for '+$p.name->toOne()+': expected ['+$expectedMultiplicity+'] found [')->j_plus($getSize)->j_plus(j_string(']')), j_string($class->elementToPath())), javaVoid());
                                                                   
      ^PropertyDetails(
         property          = $p,
         fieldName         = $fieldName,
         sizeFieldName     = $sizeFieldName,
         propType          = $propType,
         javaType          = $javaType,
         itemType          = $itemType,
         getterName        = $conventions->getterName($p),
         adderName         = '_'+$fieldName+'Add',
         adderParam        = if($propType->instanceOf(Class),
                                | j_parameter($conventions->dataClass($propType->cast(@Class<Any>), $path), 'value'),
                                |
                             if($itemType == $pureDate,
                                | j_parameter(javaTemporal(), 'value'),
                                | j_parameter($itemType, 'value')
                             )),
         multiplicityCheck = if($p.multiplicity->hasLowerBound() && $p.multiplicity->hasUpperBound(),
                                | j_if($lowerBoundClause->j_or($upperBoundClause), $addMultiplicityDefect),
                                |
                             if($p.multiplicity->hasLowerBound(),
                                | j_if($lowerBoundClause, $addMultiplicityDefect),
                                |
                             if($p.multiplicity->hasUpperBound(),
                                | j_if($upperBoundClause, $addMultiplicityDefect),
                                | []
                             )))
      );
   );

   let withFieldsAndGetters = $properties->fold(
      {p, c|
         if($p.javaType->isJavaList(), 
            {|
               let withField = $c->addField(javaField('private', $p.javaType, $p.fieldName));
               
               let field = j_this($withField)->j_field($p.fieldName);
               
               let withGetter = $withField->addMethod(
                  javaMethod('public', $p.javaType, $p.getterName, [],
                     j_return(j_conditional($field->j_eq(j_null()), javaCollections()->j_invoke($p.itemType, 'emptyList', [], $p.javaType), $field))
                  )
               );

               $withGetter->addAdderMethods($p, $conventions,
                     [
                        j_if($field->j_eq(j_null()), 
                           $field->j_assign(javaArrayList($p.itemType)->j_new([]))
                        ),
                        if($p.itemType == $pureDate && $p.propType == StrictDate, 
                           | $field->j_invoke('add', $pureDate->j_invoke('fromTemporal', [$p.adderParam, javaCalendar()->j_field('DAY_OF_MONTH', javaInt())], $pureDate)), 
                           |
                        if($p.itemType == $pureDate, 
                           | $field->j_invoke('add', $pureDate->j_invoke('fromTemporal', [$p.adderParam, javaCalendar()->j_field('MILLISECOND', javaInt())], $pureDate)), 
                           | $field->j_invoke('add', $p.adderParam)
                        ))
                     ] 
               );
            }, 
            {|
               let withFields = $c
                  ->addField(javaField('private', $p.javaType->toUnboxed(), $p.fieldName))
                  ->addField(javaField('private', javaInt(), $p.sizeFieldName));

               let field     = j_this($withFields)->j_field($p.fieldName);
               let fieldSize = j_this($withFields)->j_field($p.sizeFieldName);
               
               let withGetter = $withFields->addMethod(
                  javaMethod('public', $p.javaType, $p.getterName, [],
                     j_return(j_conditional($fieldSize->j_eq(j_int(0)), j_null(), $field))
                  )
               );

               $withGetter->addAdderMethods($p, $conventions,
                     [
                        j_if($fieldSize->j_eq(j_int(0)), 
                           if($p.itemType == $pureDate && $p.propType == StrictDate, 
                              | $field->j_assign($pureDate->j_invoke('fromTemporal', [$p.adderParam, javaCalendar()->j_field('DAY_OF_MONTH', javaInt())], $pureDate)), 
                              |
                           if($p.itemType == $pureDate, 
                              | $field->j_assign($pureDate->j_invoke('fromTemporal', [$p.adderParam, javaCalendar()->j_field('MILLISECOND', javaInt())], $pureDate)), 
                              | $field->j_assign($p.adderParam)
                           ))
                        ),
                        $fieldSize->j_inc()
                     ] 
               );
            }
         );
      }, 
      $baseClass      
   );
   
   let propertyName = j_parameter(javaString(), 'propertyName');
   let objectParam  = j_parameter($withFieldsAndGetters, 'object');

   let adderClauses  = $properties->map(
      {p|
         let adderImpl = if($p.itemType == javaBoolean(),
                            {|
                               let value = j_parameter(javaBoolean(), 'value');
                               j_return(j_newAnon(
                                  javaParameterizedType($conventions->className(_ExternalDataBooleanAdder), $withFieldsAndGetters), j_string($p.name),
                                  j_method(['public'], javaVoid(), 'addTo', [$objectParam, $value], $objectParam->j_invoke($p.adderName, $value, javaVoid()))
                               ));
                            },
                            |
                         if($p.itemType == javaLong(),
                            {|
                               let value = j_parameter(javaLong(), 'value');
                               j_return(j_newAnon(
                                  javaParameterizedType($conventions->className(_ExternalDataLongAdder), $withFieldsAndGetters), j_string($p.name),
                                  j_method(['public'], javaVoid(), 'addTo', [$objectParam, $value], $objectParam->j_invoke($p.adderName, $value, javaVoid()))
                               ));
                            },
                            |
                         if($p.itemType == javaDouble(),
                            {|
                               let value = j_parameter(javaDouble(), 'value');
                               j_return(j_newAnon(
                                  javaParameterizedType($conventions->className(_ExternalDataDoubleAdder), $withFieldsAndGetters), j_string($p.name),
                                  j_method(['public'], javaVoid(), 'addTo', [$objectParam, $value], $objectParam->j_invoke($p.adderName, $value, javaVoid()))
                               ));
                            },
                            {|
                               let value = j_parameter($p.adderParam.type, 'value');
                               j_return(j_newAnon(
                                  javaParameterizedType($conventions->className(_ExternalDataObjectAdder), [$withFieldsAndGetters, $p.adderParam.type]), j_string($p.name),
                                  j_method(['public'], javaVoid(), 'addTo', [$objectParam, $value], $objectParam->j_invoke($p.adderName, $value, javaVoid()))
                               ));
                            }
                         )));
         
         pair($propertyName->j_invoke('equals', j_string($p.name)), $adderImpl);
      }
   );

   let dataClass = $withFieldsAndGetters
      ->addMethod({c|
          javaMethod('public', javaList($conventions->defectClass()), 'checkMultiplicities', [],
             $defects->j_declare(j_new(javaArrayList($conventions->defectClass()), []))
                ->concatenate($properties.multiplicityCheck)
                ->concatenate(j_return($defects))
          );
        })
      ->addMethod({c|
          let exception = javaIllegalArgumentException()->j_new(j_string('Unknown property ')->j_plus($propertyName))->j_throw();
         
          javaMethod(['public', 'static'], javaParameterizedType($conventions->className(_ExternalDataAdder), $c), '_getAdderForProperty', $propertyName,
             if($adderClauses->isEmpty(), |$exception, |j_if(list($adderClauses), $exception))
          );
        })
      ->addAlloyStoreObjectReferenceMethodsForClass($context);   

   let constraintChecking = $dataClass->createConstraintCheckingForClass($class, $context, $debug);
   mergeProjects(newProject()->concatenate($constraintChecking)->toOneMany());
}

function <<access.private>> meta::external::shared::format::executionPlan::addAdderMethods(jc:meta::java::metamodel::Class[1], prop: PropertyDetails[1], conventions:Conventions[1], impl:Code[*]): meta::java::metamodel::Class[1]
{
   if($prop.isViaAssociation,
      {|
         let implName      = $prop.adderName+'Impl';
         let otherProp     = $prop.property.owner->cast(@Association).properties->filter(p| $p != $prop.property)->toOne();
         let otherImplName = '_' + $conventions->fieldName($otherProp) + 'AddImpl';
         
         $jc->addMethod(
                 javaMethod([], javaVoid(), $implName, $prop.adderParam, $impl)
              )
            ->addMethod({c|
                 javaMethod('public', javaVoid(), $prop.adderName, $prop.adderParam,
                     [
                        j_this($c)->j_invoke($implName, $prop.adderParam, javaVoid()),
                        $prop.adderParam->j_invoke($otherImplName, j_this($c), javaVoid()) 
                     ]
                 )
              });
      },
      {|
         $jc->addMethod(
                 javaMethod('public', javaVoid(), $prop.adderName, $prop.adderParam, $impl)
              );
      }
   )
}

function meta::external::shared::format::executionPlan::dataClass(conventions:Conventions[1], class:Class<Any>[1], path:String[1]): meta::java::metamodel::Class[1]
{
  $conventions->planNodeClass([], $path, $conventions->identifier($class->elementToPath('_')) + '_Impl');
}


function meta::external::shared::format::executionPlan::occursFromMultiplicity(mult:Multiplicity[1]): Pair<Code, Code>[1]
{
   if($mult == PureOne,
      | pair(j_long(1), j_long(1)),
      |
   if($mult == ZeroOne,
      | pair(j_long(0), j_long(1)),
      |
   if($mult == ZeroMany,
      | pair(j_long(0), javaLongMax()),
      | pair(j_long($mult->getLowerBound()), if($mult->hasUpperBound(), |j_long($mult->getUpperBound()), |javaLongMax()))
   )));
}

function meta::external::shared::format::executionPlan::printConnection(extensions:RouterExtension[*]): Function<{Nil[1]->String[1]}>[*]
{
   [
      {url:UrlConnection[1] |
         'url="'+$url.url+'", contentType="'+$url.contentType+'", class = '+$url.class->elementToPath()+$url.schema->match([s0:Schema[0]|'', s1:Schema[1]|', schema='+$s1->elementToPath()])
      },
      {ext:ExternalFormatConnection[1] |
         let source = $ext.externalSource->match([
            u:UrlStreamExternalSource[1] | 'url="'+$u.url+'"'
         ]);
         'schemaBinding="'+$ext.schemaBinding->elementToPath()+'", source=('+$source+')';
      }
   ];
}

