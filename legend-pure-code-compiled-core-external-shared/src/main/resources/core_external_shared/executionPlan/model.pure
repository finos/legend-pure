// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::format::binding::*;
import meta::external::shared::format::binding::validation::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::metamodel::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::java::*;
import meta::pure::graphFetch::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::router::extension::*;
import meta::pure::runtime::*;

Class meta::external::shared::format::executionPlan::DataQualityExecutionNode extends ExecutionNode
{
   enableConstraints : Boolean[1];
   checked           : Boolean[1];   
}

Class meta::external::shared::format::executionPlan::ExternalFormatSerializeExecutionNode extends ExecutionNode
{
   checked : Boolean[1];      
   binding : Binding[1];
}

Class meta::external::shared::format::executionPlan::ExternalFormatDeserializeExecutionNode extends ExecutionNode
{
   pathOffset : PathReference[0..1];
}

Class meta::external::shared::format::executionPlan::InternalizeExecutionNode extends ExecutionNode
{
   pathOffset : PathReference[0..1];
   binding    : Binding[1];
   dataSource : InternalizeDataSource[1];
   enableConstraints : Boolean[1];
   checked           : Boolean[1];   
   graphFetchTree    : RootGraphFetchTree<Any>[0..1];
}

Class meta::external::shared::format::executionPlan::InternalizeDataSource
{
}

Class meta::external::shared::format::executionPlan::UrlConstant extends InternalizeDataSource
{
  url: String[1];
}

Class meta::external::shared::format::executionPlan::StringConstant extends InternalizeDataSource
{
  data: String[1];
}

Class meta::external::shared::format::executionPlan::RuntimeVariable extends InternalizeDataSource
{
  variable: String[1];
  type: Type[1];
}

Class meta::external::shared::format::executionPlan::UrlStreamExecutionNode extends ExecutionNode
{
   url : String[1];
}

// ------------------------------------------------------------------------------------------------------------------------
// URL
// ------------------------------------------------------------------------------------------------------------------------

Class meta::external::shared::format::executionPlan::Url
{
   url : String[1];
}

// ------------------------------------------------------------------------------------------------------------------------
// Connections - Deprecated to be replaced by internalize
// ------------------------------------------------------------------------------------------------------------------------

Class meta::external::shared::format::executionPlan::ExternalFormatConnection extends Connection
[
   $this.element->instanceOf(Binding)
]
{
   externalSource : ExternalSource[1];
   pathOffset : PathReference[0..1];
}

Class <<typemodifiers.abstract>> meta::external::shared::format::executionPlan::PathReference
{
}

Class <<typemodifiers.abstract>> meta::external::shared::format::executionPlan::ExternalSource
{
}

Class meta::external::shared::format::executionPlan::UrlStreamExternalSource extends ExternalSource
{
   url : String[1];
}

// ------------------------------------------------------------------------------------------------------------------------
// Classes for planning and binding state
// ------------------------------------------------------------------------------------------------------------------------

Class meta::external::shared::format::executionPlan::InternalizeDetails
{
  bindingDetail     : BindingDetail[1];
  sourceRecordClass : Class<Any>[1];
  graphFetchTrees   : RootGraphFetchTree<Any>[*];
  generator         : Function<{InternalizeExecutionNode[1], String[1], GenerationContext[1], RouterExtension[*], DebugContext[1] -> GeneratedCode[1]}>[1];
}
