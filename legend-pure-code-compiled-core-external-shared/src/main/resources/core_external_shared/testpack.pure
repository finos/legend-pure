// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::functions::*;
import meta::external::shared::metamodel::*;
import meta::external::shared::runtime::*;
import meta::pure::executionPlan::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::runtime::*;

Enum meta::external::shared::testpack::simple::AddressType
{
   Headquarters,
   RegionalOffice,
   Home
}

Class meta::external::shared::testpack::simple::Firm
{
   name      : String[1];
   ranking   : Integer[0..1];
   addresses : meta::external::shared::testpack::simple::AddressUse[1..*];
}

Class meta::external::shared::testpack::simple::Address
{
   firstLine  : String[1];
   secondLine : String[0..1];
   city       : String[0..1];
   region     : String[0..1];
   country    : String[1];
   position   : meta::external::shared::testpack::simple::GeographicPosition[0..1];
}

Class meta::external::shared::testpack::simple::GeographicPosition
[
   validLatitude: ($this.latitude >= -90) && ($this.latitude <= 90),
   validLongitude: ($this.longitude >= -180) && ($this.longitude <= 180)
]
{
   latitude  : Decimal[1];
   longitude : Decimal[1];
}


Class meta::external::shared::testpack::simple::AddressUse
{
   addressType : meta::external::shared::testpack::simple::AddressType[1];
   address     : meta::external::shared::testpack::simple::Address[1];
}

Class meta::external::shared::testpack::simple::Person
{
   firstName      : String[1];
   lastName       : String[1];
   dateOfBirth    : StrictDate[0..1];   
   addresses      : meta::external::shared::testpack::simple::AddressUse[*];
   isAlive        : Boolean[1];
   heightInMeters : Float[1];
}

Association meta::external::shared::testpack::simple::Firm_Person
{
   firm      : meta::external::shared::testpack::simple::Firm[1];
   employees : meta::external::shared::testpack::simple::Person[*];
}

function meta::external::shared::testpack::simple::javaExecutionPlan(schema:Schema[0..1], contentType:String[1]): ExecutionPlan[1]
{
   let tree = #{meta::external::shared::testpack::simple::Firm {
      name, 
      addresses {
         addressType, 
         address {firstLine, secondLine, city, region, country, position {latitude, longitude}}
      },
      employees {
         firstName,
         lastName,
         dateOfBirth,
         addresses {
            addressType, 
            address {firstLine, secondLine, city, region, country, position {latitude, longitude}}
         }
      }
   }}#;
   
   let plan = executionPlan(
      | meta::external::shared::testpack::simple::Firm.all()->graphFetch($tree)->serialize($tree),
      meta::external::shared::testpack::simple::SelfMapping,
      ^Runtime(
         connections = ^UrlConnection(
            element     = ^ModelStore(),
            schema      = $schema,
            contentType = $contentType,
            class       = meta::external::shared::testpack::simple::Firm,
            url         = 'executor:default'
         )
      ),
      []
   );

   $plan->generatePlatformCode(^PlatformCodeGenerationConfig(platform=Platform.JAVA), []);
}

function meta::external::shared::testpack::simple::lambda(): LambdaFunction<Any>[1]
{
   let tree = #{meta::external::shared::testpack::simple::Firm {
      name,
      ranking,
      addresses {
         addressType, 
         address {firstLine, secondLine, city, region, country, position {latitude, longitude}}
      },
      employees {
         firstName,
         lastName,
         dateOfBirth,
         addresses {
            addressType, 
            address {firstLine, secondLine, city, region, country, position {latitude, longitude}}
         }
      }
   }}#;
   
   {|meta::external::shared::testpack::simple::Firm.all()->graphFetchChecked($tree)->serialize($tree)}; //, 'application/xml')};
}

function meta::external::shared::testpack::simple::mapping(): Mapping[1]
{
   meta::external::shared::testpack::simple::SelfMapping;
}

function meta::external::format::testpack::simple::runtime(schema:Schema[0..1], contentType:String[1]): Runtime[1]
{
   ^Runtime(
      connections = ^UrlConnection(
         element     = ^ModelStore(),
         schema      = $schema,
         contentType = $contentType,
         class       = meta::external::shared::testpack::simple::Firm,
         url         = 'executor:default'
      )
   );
}

###Mapping

Mapping meta::external::shared::testpack::simple::SelfMapping
(
   meta::external::shared::testpack::simple::Firm: Pure
   {
      ~src meta::external::shared::testpack::simple::Firm
      
      name      : $src.name,
      ranking   : $src.ranking,
      addresses : $src.addresses,
      employees : $src.employees      
   }

   meta::external::shared::testpack::simple::Person: Pure
   {
      ~src meta::external::shared::testpack::simple::Person
      
      firstName   : $src.firstName,
      lastName    : $src.lastName,
      dateOfBirth : $src.dateOfBirth,
      addresses   : $src.addresses
   }
   
   meta::external::shared::testpack::simple::AddressUse: Pure
   {
      ~src meta::external::shared::testpack::simple::AddressUse
      
      addressType : $src.addressType,
      address     : $src.address
   }

   meta::external::shared::testpack::simple::Address: Pure
   {
      ~src meta::external::shared::testpack::simple::Address
      
      firstLine  : $src.firstLine,
      secondLine : $src.secondLine,
      city       : $src.city,
      region     : $src.region,
      country    : $src.country,
      position   : $src.position
   }  
   
   meta::external::shared::testpack::simple::GeographicPosition: Pure
   {
      ~src meta::external::shared::testpack::simple::GeographicPosition
      
      latitude  : $src.latitude,
      longitude : $src.longitude
   }
)