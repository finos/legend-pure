// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::*;
import meta::external::shared::format::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::runtime::*;
import meta::java::generation::convention::*;
import meta::java::metamodel::factory::*;
import meta::pure::executionPlan::*;
import meta::pure::graphFetch::*;
import meta::pure::mapping::*;
import meta::pure::router::extension::*;
import meta::pure::runtime::*;

function meta::external::shared::format::routerExtensions(type:String[1], externalFormatExtensions:ExternalFormatExtension[*]) : RouterExtension[*]
{
   let shared = ^RouterExtension(
      type = $type,
      plan_javaRuntime_enginePlatformDependencies_conventions = meta::external::shared::format::executionPlan::engine::extendJavaEngineDependencies_Conventions_1__Conventions_1_,
      serializerExtension      = meta::external::shared::format::serializerExtensionName_String_1__String_1_,
      routing_extraShouldStop  = serializeFunctions(),
      routing_extraIsSerialize = isSerialize_FunctionExpression_1__Boolean_1_,
      executionPlan_generation_isConnectionForClass = 
         {class:Class<Any>[1] |
            [ 
               u:UrlConnection[1]            | $u.class == $class,
               x:ExternalFormatConnection[1] | $x.schemaBinding.model->contains($class)
            ]
         },
      executionPlan_generation_nodeFromConnection = 
         {tree:RootGraphFetchTree<Any>[0..1], enableConstraints:Boolean[1], checked:Boolean[1] |
            [
               {u:UrlConnection[1] | 
                  let formatExtension = $externalFormatExtensions->getExtension($u.contentType);
                  let deserializeNode = $formatExtension.generateDeserializeNode->eval($u, $tree);
                  generateDataQualityNode($deserializeNode, $enableConstraints, $checked);
               },
               {x:ExternalFormatConnection[1] | 
                  let formatExtension = $externalFormatExtensions->getExtensionForFormat($x.schemaBinding.schema.format);
                  let deserializeNode = $formatExtension.generateDeserializeNode->eval($x, $tree);
                  generateDataQualityNode($deserializeNode, $enableConstraints, $checked);
               }
            ]
         },
      executionPlan_generation_nodeFromFunctionExpression =
         {fe:FunctionExpression[1], children:ExecutionNode[*] |
            if($fe->isSerialize(),
               {|
                  let schemaBindingArg = $fe.parametersValues->at(1);
                  assert($schemaBindingArg->instanceOf(InstanceValue), 'Only literal schemaBinding is supported');
                  let checked         = $fe.func == meta::external::shared::format::executionPlan::externalize_Checked_MANY__SchemaBinding_1__String_1_;
                  let schemaBinding   = $schemaBindingArg->cast(@InstanceValue).values->cast(@SchemaBinding)->toOne();
                  let formatExtension = $externalFormatExtensions->getExtensionForFormat($schemaBinding.schema.format);
                  $formatExtension.generateSerializeNode->eval($checked, $schemaBinding, $children);
               },
               | []
            );
         },
      executionPlan_print_connectionToString = meta::external::shared::format::executionPlan::printConnection_RouterExtension_MANY__Function_MANY_,
      executionPlan_print_planNodeToString =
         {space:String[1], extensions:RouterExtension[*] |
            printPlanNodeToString($space, $extensions)
               ->concatenate($externalFormatExtensions.printPlanNodeToString->map(x|$x->eval($space, $extensions)));
         },
      plan_javaRuntime_main_prepare2 = 
         {path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1] |
            planPrepareDataQuality($path, $context, $extensions, $debug)
               ->concatenate($externalFormatExtensions.planJavaPrepare->map(x|$x->eval($path, $context, $extensions, $debug)));
         },
      plan_javaRuntime_main_generatePlatformCode1 = 
         {path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1] |
            $externalFormatExtensions.planJavaGenerate->map(x|$x->eval($path, $context, $extensions, $debug));
         }
   );

   let perFormat = $externalFormatExtensions->map(formatExt| ^RouterExtension(type                                                    = $type+':'+$formatExt.externalFormat, 
                                                                              plan_javaRuntime_enginePlatformDependencies_conventions = $formatExt.plan_javaRuntime_enginePlatformDependencies_conventions,
                                                                              serializerExtension                                     = $formatExt.serializerExtension
                                                                             ));

   $shared->concatenate($perFormat);
}

function <<access.private>> meta::external::shared::format::serializerExtensionName(version:String[1]): String[1]
{
   'meta::protocols::pure::' + $version + '::external::shared::format::serializerExtension_String_1__SerializerExtension_1_'
}

function <<access.private>> meta::external::shared::format::getExtension(externalFormatExtensions:ExternalFormatExtension[*], contentType:String[1]): ExternalFormatExtension[1]
{
   let formatExtension = $externalFormatExtensions->filter(ext| $ext.contentType == $contentType);
   assert($formatExtension->size() == 1, | 'Expected to find 1 extension for ' + $contentType + ', found ' + $formatExtension->size()->toString());
   $formatExtension->toOne();
}

function <<access.private>> meta::external::shared::format::getExtensionForFormat(externalFormatExtensions:ExternalFormatExtension[*], format:String[1]): ExternalFormatExtension[1]
{
   let formatExtension = $externalFormatExtensions->filter(ext| $ext.externalFormat == $format);
   assert($formatExtension->size() == 1, | 'Expected to find 1 extension for ' + $format + ', found ' + $formatExtension->size()->toString());
   $formatExtension->toOne();
}

Class meta::external::shared::format::ExternalFormatExtension
{
   contentType               : String[1];
   externalFormat            : String[1];
   
   generateSerializeNode     : Function<{Boolean[1], SchemaBinding[1], ExecutionNode[*] -> ExecutionNode[1]}>[1];  
   generateDeserializeNode   : Function<{Connection[1], RootGraphFetchTree<Any>[0..1] -> ExecutionNode[1]}>[1];  
   printPlanNodeToString     : Function<{String[1], RouterExtension[*] -> Function<{Nil[1] -> String[1]}>[*]}>[1];
   
   planJavaPrepare           : Function<{String[1], GenerationContext[1], RouterExtension[*], DebugContext[1] -> Function<{Nil[1]->GenerationContext[1]}>[*]}>[1];
   planJavaGenerate          : Function<{String[1], GenerationContext[1], RouterExtension[*], DebugContext[1] -> Function<{Nil[1]->GeneratedCode[1]}>[*]}>[1];
   plan_javaRuntime_enginePlatformDependencies_conventions : Function<{Conventions[1]->Conventions[1]}>[0..1];

   serializerExtension       : Function<{String[1]->String[1]}>[1];
}
