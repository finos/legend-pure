// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='Returns true if both parameters are true, otherwise false',
        PCT.grammarDoc='$first && $second',
        PCT.grammarCharacters='&&'
    }
    meta::pure::functions::boolean::and(first:Boolean[1], second:Boolean[1]):Boolean[1];


function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::and::testBinaryTruthTable<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    //Dummy commit to test if we can commit on invalid review
    assert($f->eval(|true && true));
    assertFalse($f->eval(|true && false));
    assertFalse($f->eval(|false && true));
    assertFalse($f->eval(|false && false));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::and::testBinaryExpressions<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|(1 == 1) && (2 != 3)));
    assertFalse($f->eval(|(1 == 2) && (2 != 3)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::and::testTernaryTruthTable<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|true && true && true));
    assertFalse($f->eval(|true && true && false));
    assertFalse($f->eval(|true && false && true));
    assertFalse($f->eval(|true && false && false));
    assertFalse($f->eval(|false && true && true));
    assertFalse($f->eval(|false && true && false));
    assertFalse($f->eval(|false && false && true));
    assertFalse($f->eval(|false && false && false));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::and::testTernaryExpressions<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|(1 == 1) && (2 != 3) && true));
    assertFalse($f->eval(|(1 == 2) && (2 != 3) && false));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::and::testShortCircuitSimple<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertFalse($f->eval(|false && (12/0 > 0)));
}

function <<test.Test>> meta::pure::functions::boolean::tests::conjunctions::and::testShortCircuit():Boolean[1]
{
    let val1 = ^List<String>(values=['Claudius', 'Ptolemy']);
    let val2 = 'Claudius Ptolemy';
    assert($val1->instanceOf(List) && ($val1->cast(@List<String>).values == ['Claudius', 'Ptolemy']));
    assertFalse($val2->instanceOf(List) && ($val2->cast(@List<String>).values == ['Claudius', 'Ptolemy']));
}

function <<test.Test>> meta::pure::functions::boolean::tests::conjunctions::and::testShortCircuitInDynamicEvaluation():Boolean[1]
{
    let fn1 = {|let val1 = ^List<String>(values=['Claudius', 'Ptolemy']);
                $val1->instanceOf(List) && ($val1->cast(@List<String>).values == ['Claudius', 'Ptolemy']);};
    let lambda1 = ^LambdaFunction<{->Boolean[1]}>(expressionSequence = $fn1.expressionSequence);
    assertEquals(true, $lambda1->evaluate([]));

    let fn2 = {|let val2 = 'Claudius Ptolemy';
                $val2->instanceOf(List) && ($val2->cast(@List<String>).values == ['Claudius', 'Ptolemy']);};
    let lambda2 = ^LambdaFunction<{->Boolean[1]}>(expressionSequence = $fn2.expressionSequence);
    assertEquals(false, $lambda2->evaluate([]));
}
