// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

native function meta::pure::functions::boolean::lessThanEqual(left:Number[1], right:Number[1]):Boolean[1];

function meta::pure::functions::boolean::lessThanEqual(left:Number[0..1], right:Number[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Number[1], right:Number[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Number[0..1], right:Number[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThanEqual(left:Date[0..1], right:Date[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Date[1], right:Date[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Date[0..1], right:Date[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThanEqual(left:String[0..1], right:String[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:String[1], right:String[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:String[0..1], right:String[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThanEqual(left:Boolean[0..1], right:Boolean[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Boolean[1], right:Boolean[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Boolean[0..1], right:Boolean[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThanEqual(left:Date[1], right:Date[1]):Boolean[1]
{
    compare($left, $right) <= 0
}

function meta::pure::functions::boolean::lessThanEqual(left:String[1], right:String[1]):Boolean[1]
{
    compare($left, $right) <= 0
}

function meta::pure::functions::boolean::lessThanEqual(left:Boolean[1], right:Boolean[1]):Boolean[1]
{
    !$left || $right
}

function <<test.Test>> meta::pure::functions::boolean::tests::lessThanEqual::testLessThanEqual_Number():Boolean[1]
{
    assert(3 <= 4);
    assert(lessThanEqual(3, 4));
    assert(3 <= 3);
    assert(lessThanEqual(3, 3));

    assertFalse(4 <= 3);
    assertFalse(lessThanEqual(4, 3));
}

function <<test.Test>> meta::pure::functions::boolean::tests::lessThanEqual::testLessThanEqual_Date():Boolean[1]
{
   assert(%2012-10-01 <= %2012-10-02);
   assert(lessThanEqual(%2012-10-01, %2012-10-02));
   assert(%2012-10-02 <= %2012-10-02);
   assert(lessThanEqual(%2012-10-02, %2012-10-02));

   assertFalse(%2012-10-03 <= %2012-10-02);
   assertFalse(lessThanEqual(%2012-10-03, %2012-10-02));
}

function <<test.Test>> meta::pure::functions::boolean::tests::lessThanEqual::testLessThanEqual_String():Boolean[1]
{
    assert('a' <= 'b');
    assert(lessThanEqual('a', 'b'));
    assert('a' <= 'a');
    assert(lessThanEqual('a', 'a'));

    assertFalse('b' <= 'a');
    assertFalse(lessThanEqual('b', 'a'));
}

function <<test.Test>> meta::pure::functions::boolean::tests::lessThanEqual::testLessThanEqual_Boolean():Boolean[1]
{
    assert(false <= true);
    assert(lessThanEqual(false, true));
    assert(false <= false);
    assert(lessThanEqual(false, false));
    assert(true <= true);
    assert(lessThanEqual(true, true));

    assertFalse(true <= false);
    assertFalse(lessThanEqual(true, false));
}
