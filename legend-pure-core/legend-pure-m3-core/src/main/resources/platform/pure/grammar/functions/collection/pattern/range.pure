// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='Returns a collection of numbers, starting with the value of the first parameter, then adding the third parameter value (step) ' +
                'until the new number is strictly greater than the value of the second parameter.',
        PCT.grammarDoc='[$start:$stop:$step]',
        PCT.grammarCharacters='[::]'
    }
    meta::pure::functions::collection::range(start:Integer[1], stop:Integer[1], step:Integer[1]):Integer[*];

function
    <<PCT.function>>
    {
        doc.doc='Returns a collection of numbers, starting with 0, then adding 1 ' +
                'until the new number is strictly greater than the value of the second parameter.',
        PCT.grammarDoc='[:$stop]'
    }
    meta::pure::functions::collection::range(stop:Integer[1]):Integer[*]
{
    range(0, $stop);
}

function
    <<PCT.function>>
    {
        doc.doc='Returns a collection of numbers, starting with the value of the first parameter, then adding 1 ' +
                'until the new number is strictly greater than the value of the second parameter.',
        PCT.grammarDoc='[$start:$stop]'
    }
    meta::pure::functions::collection::range(start:Integer[1], stop:Integer[1]):Integer[*]
{
    range($start, $stop, 1)
}


function <<PCT.test>> meta::pure::functions::collection::tests::range::testRange<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([0, 1, 2, 3, 4], $f->eval(|range(0, 5, 1)));
    assertEquals([0, 1, 2, 3, 4], $f->eval(|range(0, 5)));
    assertEquals([0, 1, 2, 3, 4], $f->eval(|range(5)));

    assertEquals([0, 1, 2, 3, 4], $f->eval(|[0:5:1]));
    assertEquals([0, 1, 2, 3, 4], $f->eval(|[0:5]));
    assertEquals([0, 1, 2, 3, 4], $f->eval(|[:5]));
}

function <<PCT.test>> meta::pure::functions::collection::tests::range::testRangeWithStep<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([1, 3, 5], $f->eval(|range(1, 6, 2)));
    assertEquals([1, 4], $f->eval(|range(1, 6, 3)));
    assertEquals([1, 5], $f->eval(|range(1, 6, 4)));
    assertEquals([1], $f->eval(|range(1, 6, 5)));
    assertEquals([1], $f->eval(|range(1, 6, 6)));

    assertEquals([1, 3, 5], $f->eval(|[1:6:2]));
    assertEquals([1, 4], $f->eval(|[1:6:3]));
    assertEquals([1, 5], $f->eval(|[1:6:4]));
    assertEquals([1], $f->eval(|[1:6:5]));
    assertEquals([1], $f->eval(|[1:6:6]));
}

function <<PCT.test>> meta::pure::functions::collection::tests::range::testRangeWithVariables<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let start = 1;
    let stop = 5;
    let step = 2;
    assertEquals([1, 3], $f->eval(|range($start, $stop, $step)));
    assertEquals([1, 3], $f->eval(|[$start:$stop:$step]));
}

function <<PCT.test>> meta::pure::functions::collection::tests::range::testReverseRange<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([5, 4, 3, 2], $f->eval(|[5:1:-1]));
    assertEquals([5, 4, 3, 2], $f->eval(|range(5, 1, -1)));

    let step = -1;
    assertEquals([5, 4, 3, 2], $f->eval(|[5:1:$step]));
}

function <<PCT.test>> meta::pure::functions::collection::tests::range::testReverseRangeWithStep<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([5, 3], [5:1:-2]);
    assertEquals([5, 2], [5:1:-3]);
    assertEquals([5], [5:1:-4]);

    assertEquals([5, 3], range(5, 1, -2));
    assertEquals([5, 2], range(5, 1, -3));
    assertEquals([5], range(5, 1, -4));

    let step1 = -2;
    assertEquals([5, 3], [5:1:$step1]);
    let step2 = -3;
    assertEquals([5, 2], [5:1:$step2]);
    let step3 = -4;
    assertEquals([5], [5:1:$step3]);
}

function <<PCT.test>> meta::pure::functions::collection::tests::range::testReverseRangeWithPositiveStep<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([],range(5, 1, 1));
    assertEquals([],range(5, 1));
    assertEquals([],[5:1:1]);
    assertEquals([],[5:1]);
}

function <<PCT.test>> meta::pure::functions::collection::tests::range::testRangeWithStartStopEqual<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([],range(5, 5));
    assertEquals([],[5:5]);
}
