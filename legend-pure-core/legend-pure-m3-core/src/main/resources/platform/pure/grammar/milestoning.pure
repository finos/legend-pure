// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::milestoning::*;
import meta::pure::functions::string::*;

Profile meta::pure::profiles::temporal
{
    stereotypes: [bitemporal, businesstemporal, processingtemporal];
}

Class meta::pure::milestoning::TemporalStrategy{}

Class meta::pure::milestoning::SingleDateTemporalStrategy extends TemporalStrategy{}
Class meta::pure::milestoning::ProcessingTemporal extends SingleDateTemporalStrategy{}
Class meta::pure::milestoning::BusinessTemporal extends SingleDateTemporalStrategy{}

Class meta::pure::milestoning::BiTemporal extends TemporalStrategy{}

Class meta::pure::milestoning::DateMilestoning
{
}

Class meta::pure::milestoning::ProcessingDateMilestoning extends DateMilestoning
{
   in  : Date[1];
   out : Date[1];
}

Class meta::pure::milestoning::BusinessDateMilestoning extends DateMilestoning
{
   from : Date[1];
   thru : Date[1];
}

Class meta::pure::milestoning::BiTemporalMilestoning extends ProcessingDateMilestoning, BusinessDateMilestoning
{
}

Profile meta::pure::profiles::milestoning
{
    stereotypes: [generatedmilestoningproperty, generatedmilestoningdateproperty];
}

native function <<functionType.SideEffectFunction>> meta::pure::functions::collection::getAllVersionsInRange<T>(type:Class<T>[1], start:Date[1], end:Date[1]):T[*];
native function <<functionType.SideEffectFunction>> meta::pure::functions::collection::getAll<T>(type:Class<T>[1], milestoningDate:Date[1]):T[*];
native function <<functionType.SideEffectFunction>> meta::pure::functions::collection::getAll<T>(type:Class<T>[1], processingDate:Date[1], businessDate:Date[1]):T[*];





