// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='Subtracts all the provided values',
        PCT.grammarDoc='1 - 2',
        PCT.grammarCharacters='-'
    }
    meta::pure::functions::math::minus(ints:Integer[*]):Integer[1];

native function <<PCT.function>> meta::pure::functions::math::minus(float:Float[*]):Float[1];

native function <<PCT.function>> meta::pure::functions::math::minus(decimal:Decimal[*]):Decimal[1];

native function <<PCT.function>> meta::pure::functions::math::minus(numbers:Number[*]):Number[1];


function <<PCT.test>> meta::pure::functions::math::tests::minus::testSimpleMinus<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(1, $f->eval(|3 - 2));
    assertEq(1, $f->eval(|minus([3, 2])));
    assertEq(1, $f->eval(|3-2));
    assertEq(5, $f->eval(|3 - -2));
    assertEq(5, $f->eval(|3--2));
    assertEq(-5, $f->eval(|-3 - 2));
    assertEq(-5, $f->eval(|-3-2));
}

function <<PCT.test>> meta::pure::functions::math::tests::minus::testComplexMinus<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(0, $f->eval(|6 - (4 - 5) - 7));
    assertEq(0, $f->eval(|minus([6, minus([4, 5]), 7])));
    assertEq(-3, $f->eval(| 3 - (4 - 5) - 7));
    assertEq(-3, $f->eval(|3-(4-5)-7));
    assertEq(-9, $f->eval(|-3 - (4 - 5) - 7));
    assertEq(-9, $f->eval(|-3-(4-5)-7));
}

function <<PCT.test>> meta::pure::functions::math::tests::minus::testFloatMinus<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(1.5, $f->eval(|3 - 1.5));
    assertEq(-1.5, $f->eval(|0 - 1.5));
    assertEq(-1.5, $f->eval(|1.5 - 3));
    assertEq(-4.5, $f->eval(|-1.5 - 3));
}

function <<PCT.test>> meta::pure::functions::math::tests::minus::testSingleMinus<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(-1, $f->eval(|0 - 1));
    assertEq(-1, $f->eval(|minus(1)));
    assertEq(1, $f->eval(|--1));
    assertEq(-1, $f->eval(|---1));
}

function <<PCT.test>> meta::pure::functions::math::tests::minus::testSingleMinusType<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertIs(Integer, $f->eval(|type(-1)->toOne()));
    assertIs(Float, $f->eval(|type(-1.0)->toOne()));
}

function <<PCT.test>> meta::pure::functions::math::tests::minus::testDecimalMinus<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq(-4.0d, $f->eval(|[1.0d, 2.0d, 3.0d]->minus()));
   assertEq(-4.0d, $f->eval(|[1.0d, 2, 3.0]->minus()));
   assertEq(-7.0d, $f->eval(|-4.0d-2.0d-1));
}

function <<PCT.test>> meta::pure::functions::math::tests::minus::testSingleExpressionMinus<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let val = 1;
    assertEq(-1, $f->eval(|-$val));
    assertEq(-1, $f->eval(|-(3 - 2)));
}

function <<PCT.test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::math::tests::minus::testLargeMinus<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(9223372036854775766, $f->eval(|9223372036854775898 - 132));
    assertEq(9223372036854775766, $f->eval(|minus([9223372036854775898, 132])));
}