// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='Returns true when the parameter is false, otherwise false',
        PCT.grammarDoc='!$first',
        PCT.grammarCharacters='!'
    }
    meta::pure::functions::boolean::not(first:Boolean[1]):Boolean[1];


function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::not::testNotTrue<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertFalse($f->eval(|true->not()));
    assertFalse($f->eval(|!true));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::not::testNotFalse<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|false->not()));
    assert($f->eval(|!false));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::not::testNotFalseExpression<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|not(1 == 3)));
    assert($f->eval(|!(1 == 3)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::not::testNotTrueExpression<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertFalse($f->eval(|not(3 == 3)));
    assertFalse($f->eval(|!(3 == 3)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::not::testOperatorScope<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|!false && true));
    assertFalse($f->eval(|!true && false));
    assert($f->eval(|!(true && false)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::conjunctions::not::testNotInCollection<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|[false, !false]->at(1)));
}