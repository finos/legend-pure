// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

function
    <<PCT.function>>
    {
        doc.doc='Returns true if, according to the type order, $left succeeds or is equal to $right',
        PCT.grammarDoc='$first >= $second',
        PCT.grammarCharacters='>='
    }
    meta::pure::functions::boolean::greaterThanEqual(left:Number[0..1], right:Number[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThanEqual($left->toOne(), $right->toOne())
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Number[1], right:Number[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThanEqual($left, $right->toOne())
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Number[0..1], right:Number[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThanEqual($left->toOne(), $right)
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Date[0..1], right:Date[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThanEqual($left->toOne(), $right->toOne())
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Date[1], right:Date[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThanEqual($left, $right->toOne())
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Date[0..1], right:Date[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThanEqual($left->toOne(), $right)
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:String[0..1], right:String[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThanEqual($left->toOne(), $right->toOne())
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:String[1], right:String[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThanEqual($left, $right->toOne())
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:String[0..1], right:String[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThanEqual($left->toOne(), $right)
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Boolean[0..1], right:Boolean[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThanEqual($left->toOne(), $right->toOne())
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Boolean[1], right:Boolean[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThanEqual($left, $right->toOne())
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Boolean[0..1], right:Boolean[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThanEqual($left->toOne(), $right)
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Number[1], right:Number[1]):Boolean[1]
{
    lessThanEqual($right, $left)
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:String[1], right:String[1]):Boolean[1]
{
    lessThanEqual($right, $left)
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Date[1], right:Date[1]):Boolean[1]
{
    lessThanEqual($right, $left)
}

function <<PCT.function>> meta::pure::functions::boolean::greaterThanEqual(left:Boolean[1], right:Boolean[1]):Boolean[1]
{
    lessThanEqual($right, $left)
}


function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::greaterThanEqual::testGreaterThanEqual_Number<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|4 >= 3));
    assert($f->eval(|greaterThanEqual(4, 3)));
    assert($f->eval(|3 >= 3));
    assert($f->eval(|greaterThanEqual(3, 3)));

    assertFalse($f->eval(|3 >= 4));
    assertFalse($f->eval(|greaterThanEqual(3, 4)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::greaterThanEqual::testGreaterThanEqual_Date<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assert($f->eval(|%2012-10-02 >= %2012-10-01));
   assert($f->eval(|greaterThanEqual(%2012-10-02, %2012-10-01)));
   assert($f->eval(|%2012-10-02 >= %2012-10-02));
   assert($f->eval(|greaterThanEqual(%2012-10-02, %2012-10-02)));

   assertFalse($f->eval(|%2012-10-02 >= %2012-10-03));
   assertFalse($f->eval(|greaterThanEqual(%2012-10-02, %2012-10-03)));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::greaterThanEqual::testGreaterThanEqual_String<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|'b' >= 'a'));
    assert($f->eval(|greaterThanEqual('b', 'a')));
    assert($f->eval(|'a' >= 'a'));
    assert($f->eval(|greaterThanEqual('a', 'a')));

    assertFalse($f->eval(|'a' >= 'b'));
    assertFalse($f->eval(|greaterThanEqual('a', 'b')));
}

function <<PCT.test>> meta::pure::functions::boolean::tests::inequalities::greaterThanEqual::testGreaterThanEqual_Boolean<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|true >= false));
    assert($f->eval(|greaterThanEqual(true, false)));
    assert($f->eval(|true >= true));
    assert($f->eval(|greaterThanEqual(true, true)));
    assert($f->eval(|false >= false));
    assert($f->eval(|greaterThanEqual(false, false)));

    assertFalse($f->eval(|false >= true));
    assertFalse($f->eval(|greaterThanEqual(false, true)));
}
