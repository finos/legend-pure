// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::functions::lang::tests::letFn::*;
import meta::pure::functions::lang::tests::model::*;

native function
    <<PCT.function>>
    {
        doc.doc='Assign an value to an immutable variable',
        PCT.grammarDoc='let x = 3',
        PCT.grammarCharacters='let'
    }
    meta::pure::functions::lang::letFunction<T|m>(left:String[1], right:T[m]):T[m];

function <<PCT.test>> meta::pure::functions::lang::tests::letFn::testAssignLiteralToVariable<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let res = $f->eval(|let var = 'Hello Variable';
                        $var;);
    assertEq('Hello Variable', $res);
}

function <<PCT.test>> meta::pure::functions::lang::tests::letFn::testAssignNewInstance<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let res = $f->eval(|let person = ^LA_Person(firstName='John', lastName='Doe');
                        $person;);
    assertIs(LA_Person, genericType($res).rawType->toOne());
    assertEquals('John', $res.firstName);
    assertEquals('Doe', $res.lastName);
}

function <<PCT.test>> meta::pure::functions::lang::tests::letFn::testLetAsLastStatement<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('last statement string', $f->eval(|letAsLastStatement()));
}

function meta::pure::functions::lang::tests::letFn::letAsLastStatement():String[1]
{
    let last = 'last statement string';
}

function <<PCT.test>> meta::pure::functions::lang::tests::letFn::testLetInsideIf<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq('true', $f->eval(|if(true, | let b = 'true', | 'false')));
}

function <<PCT.test>> meta::pure::functions::lang::tests::letFn::testLetChainedWithAnotherFunction<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertNotEmpty($f->eval(|TestClass->letChainedWithAnotherFunction()));
}

function <<PCT.test>> meta::pure::functions::lang::tests::letFn::testLetWithParam<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEq('echo', $f->eval(|letWithParam('echo')->toOne()));
}

function meta::pure::functions::lang::tests::letFn::letChainedWithAnotherFunction(elements : ModelElement[*]):ModelElement[*]
{
   let classes = $elements->removeDuplicates();
}

Class meta::pure::functions::lang::tests::letFn::TestClass
{
   value:String[1];
}

function meta::pure::functions::lang::tests::letFn::letWithParam(val:String[1]):Any[*]
{
   let a = $val;
}