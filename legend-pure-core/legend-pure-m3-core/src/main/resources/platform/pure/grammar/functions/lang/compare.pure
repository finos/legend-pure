// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='Compare two instances. if $a is equal to $b the result is 0, otherwise if $a comes before $b the result is negative, otherwise the result is positive',
        PCT.grammarDoc='compare is used in the implementation of inequalities functions'
    }
    meta::pure::functions::lang::compare<T>(a:T[1], b:T[1]):Integer[1];


function <<PCT.test>> meta::pure::functions::lang::tests::compare::testStringCompare<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|compare('a', 'b') < 0));
    assert($f->eval(|compare('aaa', 'aaa') == 0));
    assert($f->eval(|compare('baa', 'aaa') > 0));
    assert($f->eval(|compare('aa', 'aaa') < 0));
}

function <<PCT.test>> meta::pure::functions::lang::tests::compare::testIntegerCompare<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|compare(1, 2) < 0));
    assert($f->eval(|compare(2, 2) == 0));
    assert($f->eval(|compare(2, 1) > 0));

    assert($f->eval(|compare(171, 2) > 0));
    assert($f->eval(|compare(2, 171) < 0));
}

function <<PCT.test>> meta::pure::functions::lang::tests::compare::testFloatCompare<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|compare(1.3, 2.1) < 0));
    assert($f->eval(|compare(2.2, 2.2) == 0));
    assert($f->eval(|compare(2.1, 1.0) > 0));

    assert($f->eval(|compare(171.332, 2.5) > 0));
    assert($f->eval(|compare(2.7, 171.212) < 0));
}

function <<PCT.test>>   meta::pure::functions::lang::tests::compare::testNumberCompare<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|compare(1, 2.2) < 0));
    assert($f->eval(|compare(2, 1.5) > 0));

    assert($f->eval(|compare(171.52, 2) > 0));
    assert($f->eval(|compare(2, 171.999) < 0));
}

function <<PCT.test>> meta::pure::functions::lang::tests::compare::testDateCompare<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|compare(%2001, %2014) < 0));
    assert($f->eval(|compare(%2014, %2014) == 0));
    assert($f->eval(|compare(%2014, %2001) > 0));

    assert($f->eval(|compare(%2001, %10999) < 0));
    assert($f->eval(|compare(%2001-02-13, %2002) < 0));
    assert($f->eval(|compare(%2014-02-16, %2014-02-15T13:15:19) > 0));
    assert($f->eval(|compare(%2014-02-13T13:15:19.14231, %2014-02-13T13:15:19.14231555) < 0));
    assert($f->eval(|compare(%2014-02-13T13:15:19.14231555, %2014-02-13T13:15:19.14231) > 0));
}

function <<PCT.test>> meta::pure::functions::lang::tests::compare::testBooleanCompare<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|compare(true, false) > 0));
    assert($f->eval(|compare(true, true) == 0));
    assert($f->eval(|compare(false, true) < 0));
}

function <<PCT.test>> meta::pure::functions::lang::tests::compare::testCompareMixedTypes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assert($f->eval(|compare(5, '5') != 0));
    assert($f->eval(|if(compare(5, '5') < 0, |compare('5', 5) > 0, |compare('5', 5) < 0)));

    assert($f->eval(|compare(true, 'true') != 0));
    assert($f->eval(|if(compare(true, 'true') < 0, |compare('true', true) > 0, |compare('true', true) < 0)));

    assert($f->eval(|compare('2014', %2014) != 0));
    assert($f->eval(|if(compare('2014', %2014) < 0, |compare(%2014, '2014') > 0, |compare(%2014, '2014') < 0)));

    assert($f->eval(|compare(2014, %2014) != 0));
    assert($f->eval(|if(compare(2014, %2014) < 0, |compare(%2014, 2014) > 0, |compare(%2014, 2014) < 0)));

    assert($f->eval(|compare(2014.0, %2014) != 0));
    assert($f->eval(|if(compare(2014.0, %2014) < 0, |compare(%2014, 2014.0) > 0, |compare(%2014, 2014.0) < 0)));

}

function <<PCT.test>> meta::pure::functions::lang::tests::compare::testCompareDecimalAndLongTypes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
     assert($f->eval(|compare(9999999999999992d, 9999999999999992) == 0));
     assert($f->eval(|compare(9999999999999992d, 9999999999999991) > 0));
     assert($f->eval(|compare(9999999999999992d, 9999999999999993) < 0));
}
