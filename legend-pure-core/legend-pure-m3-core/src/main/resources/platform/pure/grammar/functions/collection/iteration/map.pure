// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::collection::tests::map::model::*;
import meta::pure::functions::collection::tests::map::*;
import meta::pure::test::pct::*;
import meta::pure::functions::variant::convert::*;
import meta::pure::metamodel::variant::*;

native function
    <<PCT.function>>
    {
        doc.doc='Applies the given function to each elements of the collection and returns the collection of the applied function result.' +
                'Map always flattens the results and returns one collection even if the function returns a collection.',
        PCT.grammarDoc='map is auto generated when the . operator is used to access a property value on a element of multiplicity different from [1] (example: [0..1] [*])'
    }
    meta::pure::functions::collection::map<T,V|m>(value:T[m], func:Function<{T[1]->V[1]}>[1]):V[m];

native function <<PCT.function>> meta::pure::functions::collection::map<T,V>(value:T[*], func:Function<{T[1]->V[*]}>[1]):V[*];

native function <<PCT.function>> meta::pure::functions::collection::map<T,V>(value:T[0..1], func:Function<{T[1]->V[0..1]}>[1]):V[0..1];
//--------------------------------------


function <<PCT.test>> meta::pure::functions::collection::tests::map::testMapInstance<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let people = [^M_Person(firstName='Fabrice', lastName='Smith'), ^M_Person(firstName='Pierre', lastName='Doe'), ^M_Person(firstName='Justin', lastName='Branche')];
    assertEquals(['Smith', 'Doe', 'Branche'], $f->eval(|$people->map(p | $p.lastName)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::map::testMapRelationshipFromOneToOne<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let address = ^M_Address(name='Paris, FR', type=M_GeographicEntityType.CITY);
    assertIs($address, $f->eval(|^M_Person(firstName='Fabrice', lastName='Smith', address=$address).address->toOne()));
}

function <<PCT.test>> meta::pure::functions::collection::tests::map::testMapRelationshipFromManyToOne<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let addressParis = ^M_Address(name='Paris, FR', type=M_GeographicEntityType.CITY);
    let addressHoboken = ^M_Address(name='Hoboken, NJ, US', type=M_GeographicEntityType.CITY);
    let smith = ^M_Person(firstName='Fabrice', lastName='Smith', address=$addressParis);
    let roe = ^M_Person(firstName='David', lastName='Roe', address=$addressHoboken);
    assertEquals([$addressParis, $addressHoboken], $f->eval(|[$smith, $roe].address));
    assertEquals(['Paris, FR', 'Hoboken, NJ, US'], $f->eval(|[$smith, $roe].address.name));
}

function <<PCT.test>> meta::pure::functions::collection::tests::map::testMapRelationshipFromManyToMany<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let locationParis = ^M_Location(place='Paris', type=M_GeographicEntityType.CITY);
    let locationSF = ^M_Location(place='San Franciso', type=M_GeographicEntityType.CITY);
    let locationHoboken = ^M_Location(place='Hoboken', type=M_GeographicEntityType.CITY);
    let smith = ^M_Person(firstName='Fabrice', lastName='Smith', locations=[$locationParis, $locationSF]);
    let roe = ^M_Person(firstName='David', lastName='Roe', locations=$locationHoboken);
    assertEquals([$locationParis, $locationSF, $locationHoboken], $f->eval(|[$smith, $roe].locations));
}

function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::collection::tests::map::testMapWithPropertyAsVariable():Boolean[1]
{
    let vals = [^M_Person(firstName='a', lastName='a'), ^M_Person(firstName='b', lastName='b'), ^M_Person(firstName='c', lastName='c')];
    let property = M_Person.properties->filter(p | $p.name == 'lastName')->toOne();
    assertEquals(['a','b','c'], $vals->map($property));
}

function <<test.Test>> meta::pure::functions::collection::tests::map::testMapWithFunctionAsVariable():Boolean[1]
{
    let vals = [^M_Person(firstName='a', lastName='a'), ^M_Person(firstName='b', lastName='b'), ^M_Person(firstName='c', lastName='c')];
    let lambda = {p:M_Person[1]|$p.lastName};
    assertEquals(['a','b','c'], $vals->map($lambda));
}

function <<test.Test>> meta::pure::functions::collection::tests::map::testMapWithDynamicFunctionFromZeroOneToZeroOne():Boolean[1]
{
    let fn = {|^OptionalString(value='1')->map(x|$x.value)};
    let lambda = ^LambdaFunction<{->String[0..1]}>(expressionSequence = $fn.expressionSequence);
    assertEquals('1', $lambda->evaluate([]));
}

function <<test.Test>> meta::pure::functions::collection::tests::map::testAutoMapWithZeroOnePropertyInEvaluate():Boolean[1]
{
    let fn = {|^M_Person(firstName='Edward', lastName='Kelley').address.name};
    let lambda = ^LambdaFunction<{->String[0..1]}>(expressionSequence = $fn.expressionSequence);
    assertEmpty($lambda->evaluate([]));
}

Class meta::pure::functions::collection::tests::map::OptionalString
{
    value : String[0..1];
}

Class meta::pure::functions::collection::tests::map::model::M_Person
{
    firstName : String[1];
    lastName : String[1];
    locations : M_Location[*];
    address : M_Address[0..1];
}

Class meta::pure::functions::collection::tests::map::model::M_Location
{
    place : String[1];
    type : M_GeographicEntityType[1];
}

Class meta::pure::functions::collection::tests::map::model::M_Address
{
    name : String[1];
    type : M_GeographicEntityType[1];
}

Enum meta::pure::functions::collection::tests::map::model::M_GeographicEntityType
{
    {doc.doc = 'A city, town, village, or other urban area.'} CITY,
    <<doc.deprecated>> COUNTRY,
    {doc.doc = 'Any geographic entity other than a city or country.'} REGION
}

function <<PCT.test, PCTCoreQualifier.variant>> meta::pure::functions::collection::tests::map::testMap_FromVariant<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('[2,3,4]', $f->eval(|toVariant([1, 2, 3])->toMany(@Variant)->map(x | $x->to(@Integer)->toOne() + 1)->toVariant())->toString());
}

function <<PCT.test, PCTCoreQualifier.variant>> meta::pure::functions::collection::tests::map::testMap_FromVariantAsPrimitive<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('[2,3,4]', $f->eval(|toVariant([1, 2, 3])->toMany(@Integer)->map(x | $x + 1)->toVariant())->toString());
}