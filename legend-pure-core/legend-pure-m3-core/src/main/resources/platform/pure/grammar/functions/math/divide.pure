// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='Divides the first parameter by the second one.',
        PCT.grammarDoc='$left / $right',
        PCT.grammarCharacters='/'
    }
    meta::pure::functions::math::divide(left:Number[1], right:Number[1]):Float[1];

native function <<PCT.function>> meta::pure::functions::math::divide(left:Decimal[1], right:Decimal[1], scale:Integer[1]):Decimal[1];


function <<PCT.test>> meta::pure::functions::math::tests::divide::testSimpleDivide<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(2.0, $f->eval(|4 / 2));
    assertEq(2.0, $f->eval(|divide(4, 2)));
    assertEq(1.5, $f->eval(|3 / 2));
    assertEq(1.5, $f->eval(|divide(3, 2)));
    assertEq(0.8, $f->eval(|4 / 5));
    assertEq(0.8, $f->eval(|divide(4, 5)));
}

function <<PCT.test>> meta::pure::functions::math::tests::divide::testComplexDivide<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(3.0, $f->eval(|9 / (18 / 6)));
    assertEq(3.0, $f->eval(|divide(9, divide(18, 6))));
    assertEq(3.75, $f->eval(|3 / (4 / 5)));
    assertEq(3.75, $f->eval(|divide(3, divide(4, 5))));
}

function <<PCT.test>> meta::pure::functions::math::tests::divide::testDivideWithNonTerminatingExpansion<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(0.01041666666666666666666666666666667, $f->eval(|1 / 96));
}

function <<PCT.test>> meta::pure::functions::math::tests::divide::testNegativeDivide<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(-2.0, $f->eval(|4 / -2));
    assertEq(-1.5, $f->eval(|3 / -2));
}

function <<PCT.test>> meta::pure::functions::math::tests::divide::testFloatDivide<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(3.5, $f->eval(|1.75 / 0.5));
}

function <<PCT.test>> meta::pure::functions::math::tests::divide::testDecimalDivide<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(0.5, $f->eval(|1.0d/2.0));
    assertEq(-2.0, $f->eval(|-4.0d/2.0/1));
    assertEq(-0.5, $f->eval(|-4.0d/8/1.0));
    assertEq(1.0, $f->eval(|16d/8/2.0));
    assertEq(-31.42d, $f->eval(|-3.1415d->divide(0.1d, 2)));
}
