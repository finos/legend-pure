// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::collection::tests::map::*;
import meta::pure::test::pct::*;
import meta::pure::functions::collection::tests::map::model::*;

function meta::pure::functions::collection::parallelMap<T,V|m>(value:T[m], func:Function<{T[1]->V[1]}>[1]):V[m]
{
  parallelMap($value, $func, 4)
} 

function meta::pure::functions::collection::parallelMap<T,V>(value:T[*], func:Function<{T[1]->V[*]}>[1]):V[*]
{
  parallelMap($value, $func, 4)
} 

function meta::pure::functions::collection::parallelMap<T,V>(value:T[0..1], func:Function<{T[1]->V[0..1]}>[1]):V[0..1]
{
  parallelMap($value, $func, 4)
} 

native function 
    <<PCT.function>>
    {
        doc.doc='Similar to map() but will try to do the operation in parallel. Also, takes as input the user\'s desired degree of parallelism. However, note that that actual degree of parallelism depends on the state of the shared threadpool.'
    } 
    meta::pure::functions::collection::parallelMap<T,V|m>(value:T[m], func:Function<{T[1]->V[1]}>[1], parallelism:Integer[1]):V[m];

native function <<PCT.function>> meta::pure::functions::collection::parallelMap<T,V>(value:T[*], func:Function<{T[1]->V[*]}>[1], parallelism:Integer[1]):V[*];

native function <<PCT.function>> meta::pure::functions::collection::parallelMap<T,V>(value:T[0..1], func:Function<{T[1]->V[0..1]}>[1], parallelism:Integer[1]):V[0..1]; 

function <<PCT.test>> meta::pure::functions::collection::tests::parallelMap::testParallelMapWithEmptyCollection<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([], $f->eval(|^M_Person(firstName='a', lastName='a').locations->parallelMap(x|$x.place, 2)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::parallelMap::testParallelMapOneToOne<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals('a', $f->eval(|^M_Person(firstName='a', lastName='a')->parallelMap(x|$x.firstName, 2)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::parallelMap::testParallelMapOneToMany<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  let person = ^M_Person(firstName='b', lastName='b', locations=[^M_Location(place='Bengaluru',type=M_GeographicEntityType.CITY), ^M_Location(place='New York',type=M_GeographicEntityType.CITY)]);
  assertEquals(['Bengaluru', 'New York'], $f->eval(|$person->parallelMap(x|$x.locations.place, 2)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::parallelMap::testParallelMapManyToOne<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  let people =  [
                  ^M_Person(firstName='a', lastName='a', locations=[^M_Location(place='London',type=M_GeographicEntityType.CITY)]), 
                  ^M_Person(firstName='b', lastName='b', locations=[^M_Location(place='Bengaluru',type=M_GeographicEntityType.CITY), ^M_Location(place='New York',type=M_GeographicEntityType.CITY)]), 
                  ^M_Person(firstName='c', lastName='c', locations=[])
                ];
  assertEquals(['a', 'b', 'c'], $f->eval(|$people->parallelMap(x|$x.firstName, 2)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::parallelMap::testParallelMapManyToMany<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  let people =  [
                  ^M_Person(firstName='a', lastName='a', locations=[^M_Location(place='London',type=M_GeographicEntityType.CITY)]), 
                  ^M_Person(firstName='b', lastName='b', locations=[^M_Location(place='Bengaluru',type=M_GeographicEntityType.CITY), ^M_Location(place='New York',type=M_GeographicEntityType.CITY)]), 
                  ^M_Person(firstName='c', lastName='c', locations=[])
                ];
  assertEquals(['London', 'Bengaluru', 'New York'], $f->eval(|$people->parallelMap(x|$x.locations.place, 2)));
}

function <<test.Test>> meta::pure::functions::collection::tests::parallelMap::testParallelMapManyToOneWithEvalOnFunctionPointer():Boolean[1]
{
  let result = parallelMap_T_m__Function_1__Integer_1__V_m_->eval([1, 2, 3], x:Integer[1]|$x+1, 2);
  assertEquals([2, 3, 4], $result);
}

function <<test.Test>> meta::pure::functions::collection::tests::parallelMap::testParallelMapManyToManyWithEvalOnFunctionPointer():Boolean[1]
{
  let result = parallelMap_T_MANY__Function_1__Integer_1__V_MANY_->eval([1, 2, 3], {x:Integer[1]|[$x, $x]}, 2);
  assertEquals([1, 1, 2, 2, 3, 3], $result);
}

// Tests copied from map()
function <<test.Test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::collection::tests::parallelMap::testParallelMapWithPropertyAsVariable():Boolean[1]
{
  let vals = [^M_Person(firstName='a', lastName='a'), ^M_Person(firstName='b', lastName='b'), ^M_Person(firstName='c', lastName='c')];
  let property = M_Person.properties->filter(p | $p.name == 'lastName')->toOne();
  assertEquals(['a','b','c'], $vals->parallelMap($property, 2));
}

function <<test.Test>> meta::pure::functions::collection::tests::parallelMap::testParallelMapWithFunctionAsVariable():Boolean[1]
{
  let vals = [^M_Person(firstName='a', lastName='a'), ^M_Person(firstName='b', lastName='b'), ^M_Person(firstName='c', lastName='c')];
  let lambda = {p:M_Person[1]|$p.lastName};
  assertEquals(['a','b','c'], $vals->parallelMap($lambda, 2));
}

function <<test.Test>> meta::pure::functions::collection::tests::parallelMap::testParallelMapWithDynamicFunctionFromZeroOneToZeroOne():Boolean[1]
{
  let fn = {|^OptionalString(value='1')->parallelMap(x|$x.value, 2)};
  let lambda = ^LambdaFunction<{->String[0..1]}>(expressionSequence = $fn.expressionSequence);
  assertEquals('1', $lambda->evaluate([]));
}
