// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc='Multiplies all the provided values',
        PCT.grammarDoc='5 * 2',
        PCT.grammarCharacters='*'
    }
    meta::pure::functions::math::times(ints:Integer[*]):Integer[1];

native function <<PCT.function>> meta::pure::functions::math::times(ints:Float[*]):Float[1];

native function <<PCT.function>> meta::pure::functions::math::times(decimal:Decimal[*]):Decimal[1];

native function <<PCT.function>> meta::pure::functions::math::times(numbers:Number[*]):Number[1];


function <<PCT.test>> meta::pure::functions::math::tests::times::testSimpleTimes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(6, $f->eval(|3 * 2));
}

function <<PCT.test>> meta::pure::functions::math::tests::times::testComplexTimes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(420, $f->eval(|3 * (4 * 5) * 7));
    assertEq(420, $f->eval(|3 * 4 * 5 * 7));
}

function <<PCT.test>> meta::pure::functions::math::tests::times::testNegativeTimes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(-6, $f->eval(|3 * -2));
}

function <<PCT.test>> meta::pure::functions::math::tests::times::testFloatTimes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEqWithinTolerance(0.75, $f->eval(|1.5 * 0.5), 0.001);
    assertEqWithinTolerance(2.1, $f->eval(|3 * 0.7), 0.001);
}

function <<PCT.test>> meta::pure::functions::math::tests::times::testDecimalTimes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(353791.470d, $f->eval(|[19.905d,17774]->times()));
    assertEq(353791.470d, $f->eval(|19.905d*17774));
    assertEq(353791.470d, $f->eval(|19.905d*17774d));
}

function <<PCT.test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::math::tests::times::testLargeTimes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(18446744073709551614, $f->eval(|2 * 9223372036854775807));
    assertEq(18446744073709551614, $f->eval(|9223372036854775807 * 2));
}