// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::functions::collection::tests::model::*;

native function
    <<PCT.function>>
    {
        doc.doc='Applies the given function to each elements and filters out the ones where the applied function returns false.',
        PCT.grammarDoc='filter is leveraged in milestoning generated derived properties'
    }
    meta::pure::functions::collection::filter<T>(value:T[*], func:Function<{T[1]->Boolean[1]}>[1]):T[*];


function <<PCT.test>> meta::pure::functions::collection::tests::filter::testFilterLiteral<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(['Doe'], $f->eval(|['Smith', 'Doe', 'Branche']->filter(s | eq($s->length(), 3))));
    assertEquals(['Branche', 'Doe'], $f->eval(|['Smith', 'Branche', 'Doe']->filter(s | $s != 'Smith')));
}

function <<PCT.test>> meta::pure::functions::collection::tests::filter::testFilterLiteralFromVar<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let set = ['Smith', 'Branche', 'Doe'];
    assertEquals(['Smith', 'Doe'], $f->eval(|$set->filter(s | $s->length() < 6)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::filter::testLambdaAsFunctionParameter<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(['Doe'], $f->eval(|filter(['Smith', 'Doe', 'Branche'], s | eq($s->length(), 3))));
}

function <<PCT.test>> meta::pure::functions::collection::tests::filter::testFilterInstance<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let smith = ^CO_Person(firstName='Fabrice', lastName='Smith');
    let doe = ^CO_Person(firstName='Pierre', lastName='Doe');
    let branche = ^CO_Person(firstName='Justin', lastName='Branche');
    assertEquals([$smith, $doe], $f->eval(|[$smith, $branche, $doe]->filter(p | !$p.lastName->isEmpty() && ($p.lastName->toOne()->length() < 6))));
}

function <<test.Test>> meta::pure::functions::collection::tests::filter::testFilterUsingVarForFunction():Boolean[1]
{
    let smith = ^CO_Person(firstName='Fabrice', lastName='Smith');
    let doe = ^CO_Person(firstName='Pierre', lastName='Doe');
    let branche = ^CO_Person(firstName='Justin', lastName='Branche');
    let f = {p:CO_Person[1] | !$p.lastName->isEmpty() && ($p.lastName->toOne()->length() < 6)};
    assertEquals([$smith, $doe], [$smith, $branche, $doe]->filter($f));
}