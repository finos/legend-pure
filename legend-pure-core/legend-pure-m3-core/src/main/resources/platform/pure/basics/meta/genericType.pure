// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::meta::tests::model::*;


native function meta::pure::functions::meta::genericType(any:Any[*]):GenericType[1];


function <<test.Test>> meta::pure::functions::meta::tests::genericType::testGenericType():Boolean[1]
{
    assertIs(Class, CC_Person->genericType().rawType->toOne());
    assertIs(CC_Person, CC_Person->genericType().typeArguments->at(0).rawType->toOne());
}

function <<test.Test>> meta::pure::functions::meta::tests::genericType::testGenericTypeInstance():Boolean[1]
{
    assertIs(CC_Person, ^CC_Person(firstName='Pierre', lastName='Doe')->genericType().rawType->toOne());
}

function <<test.Test>> meta::pure::functions::meta::tests::genericType::testGenericTypeFromEnum():Boolean[1]
{
    assertIs(Enumeration, CC_GeographicEntityType->genericType().rawType->toOne());
    assertIs(CC_GeographicEntityType, CC_GeographicEntityType->genericType().typeArguments->at(0).rawType->toOne());
}

function <<test.Test>> meta::pure::functions::meta::tests::genericType::testGenericTypeFromEnumVal():Boolean[1]
{
    assertIs(CC_GeographicEntityType, CC_GeographicEntityType.CITY->genericType().rawType->toOne());
}

function <<test.Test>> meta::pure::functions::meta::tests::genericType::testGenericTypeWithGenerics():Boolean[1]
{
    let l = ^CC_List<String>(values=['a', 'b', 'c']);
    assertIs(CC_List, $l->genericType().rawType->toOne());
    assertIs(String, $l->genericType().typeArguments->at(0).rawType->toOne());
}
