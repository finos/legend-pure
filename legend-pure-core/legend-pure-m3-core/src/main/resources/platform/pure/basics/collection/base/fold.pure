// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

import meta::pure::functions::collection::tests::fold::*;

native function
    <<PCT.function>>
    {
        doc.doc=''
    }
    meta::pure::functions::collection::fold<T,V|m>(value:T[*], func:Function<{T[1],V[m]->V[m]}>[1], accumulator:V[m]):V[m];

function <<PCT.test>> meta::pure::functions::collection::tests::fold::testIntegerSum<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(10, $f->eval(|[1, 2, 3, 4]->fold({x, y | $x + $y}, 0)));
    assertEq(17, $f->eval(|[1, 2, 3, 4]->fold({x, y | $x + $y}, 7)));
    assertEq(25, $f->eval(|[1, 2, 3, 4]->fold({x, y | $x + $y + 2}, 7)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::fold::testStringSum<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('abcd', $f->eval(|['a', 'b', 'c', 'd']->fold({x, y | $y + $x}, '')));
    assertEq('zabcd', $f->eval(|['a', 'b', 'c', 'd']->fold({x, y | $y + $x}, 'z')));
    assertEq('z a b c d', $f->eval(|['a', 'b', 'c', 'd']->fold({x, y | $y + ' ' + $x}, 'z')));
}

function <<PCT.test>> meta::pure::functions::collection::tests::fold::testFoldCollectionAccumulator<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([-1, 0, 1, 2, 3, 4], $f->eval(|[1, 2, 3, 4]->fold({x, y | $y->add($x)}, [-1, 0])));
    assertEquals([2, 3, 4], $f->eval(|[1, 2, 3, 4]->fold({x:Integer[1], y:Integer[1..3] | if($y->size() < 3, |$y->add($x), |$y->add($x)->tail())}, [-1, 0])));
}

function <<PCT.test>> meta::pure::functions::collection::tests::fold::testFoldWithSingleValue<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(1, $f->eval(|fold(1, {val, acc| add($acc, $val)}, [])));
}

function <<PCT.test>> meta::pure::functions::collection::tests::fold::testFoldWithEmptyAccumulator<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([1, 2, 3], $f->eval(|fold([1, 2, 3], {val, acc| add($acc, $val)}, [])));
}

function <<PCT.test>>
{meta::pure::profiles::test.excludePlatform = 'Java compiled'}
meta::pure::functions::collection::tests::fold::testFoldEmptyListAndEmptyIdentity<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([], $f->eval(|fold([]->cast(@Integer), {val, acc| add($acc, $val)}, []->cast(@Any))));
}

function <<PCT.test>>
{meta::pure::profiles::test.excludePlatform = 'Java compiled'}
meta::pure::functions::collection::tests::fold::testFoldEmptyListAndNonEmptyIdentity<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(1, $f->eval(|fold([]->cast(@Integer), {val, acc| $acc + $val}, 1)));
}

function <<PCT.test>>
{meta::pure::profiles::test.excludePlatform = 'Java compiled'}
meta::pure::functions::collection::tests::fold::testFoldMixedAccumulatorTypes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(7, $f->eval(|fold(['one', 'two'], {val, acc| $acc + $val->length()}, 1)));
}

Class meta::pure::functions::collection::tests::fold::FO_Person
{
    firstName : String[1];
    lastName : String[1];
    otherNames : String[*];

}

function <<PCT.test>> meta::pure::functions::collection::tests::fold::testFold<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let people = [^FO_Person(firstName='Fabrice', lastName='Smith'), ^FO_Person(firstName='Pierre', lastName='Doe'), ^FO_Person(firstName='Justin', lastName='Branche')];
    let person = $f->eval(|$people->fold({p1, p2 | ^$p2(lastName = ($p2.lastName->toOne() + ' ' + $p1.lastName->toOne()))}, ^FO_Person(firstName='', lastName='init:')));
    assertEquals('init: Smith Doe Branche', $person.lastName);
}

function <<PCT.test>> meta::pure::functions::collection::tests::fold::testFoldToMany<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let people = [^FO_Person(firstName='Fabrice', lastName='Smith'), ^FO_Person(firstName='Pierre', lastName='Doe'), ^FO_Person(firstName='Justin', lastName='Branche')];
    let person = $f->eval(|$people->fold({p1, p2 | ^$p2(otherNames += $p1.lastName)}, ^FO_Person(firstName='John', lastName='Roe')));
    assertEquals('Roe', $person.lastName);
    assertEquals(['Smith', 'Doe', 'Branche'], $person.otherNames);
}

function <<PCT.test>> meta::pure::functions::collection::tests::fold::testFoldFiltering<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let people = [^FO_Person(firstName='Fabrice', lastName='Smith'), ^FO_Person(firstName='Pierre', lastName='Doe'), ^FO_Person(firstName='Justin', lastName='Branche')];
    let person = $f->eval(|$people->fold({p1, p2 | if($p1.lastName != 'Smith', |^$p2(otherNames += $p1.lastName), |$p2)}, ^FO_Person(firstName='John', lastName='Roe')));
    assertEquals('Roe', $person.lastName);
    assertEquals(['Doe', 'Branche'], $person.otherNames);
}

