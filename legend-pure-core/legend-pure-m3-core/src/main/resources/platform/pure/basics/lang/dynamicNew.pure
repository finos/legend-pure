// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::lang::tests::dynamicNew::*;

Class meta::pure::functions::lang::KeyValue
{
    key : String[1];
    value : Any[*];
}

native function meta::pure::functions::lang::dynamicNew(class:Class<Any>[1], keyExpressions:KeyValue[*]):Any[1];
native function meta::pure::functions::lang::dynamicNew(genericType:GenericType[1], keyExpressions:KeyValue[*]):Any[1];
native function meta::pure::functions::lang::dynamicNew(class:Class<Any>[1], keyExpressions:KeyValue[*], getterOverrideToOne:Function<{Any[1],Property<Nil,Any|0..1>[1]->Any[0..1]}>[0..1], getterOverrideToMany : Function<{Any[1],Property<Nil,Any|*>[1]->Any[*]}>[0..1], hiddenPayload:Any[0..1],constraintsManager:Function<{Any[1]->Any[1]}>[0..1]):Any[1];
native function meta::pure::functions::lang::dynamicNew(genericType:GenericType[1], keyExpressions:KeyValue[*], getterOverrideToOne:Function<{Any[1],Property<Nil,Any|0..1>[1]->Any[0..1]}>[0..1], getterOverrideToMany : Function<{Any[1],Property<Nil,Any|*>[1]->Any[*]}>[0..1], hiddenPayload:Any[0..1],constraintsManager:Function<{Any[1]->Any[1]}>[0..1]):Any[1];
native function meta::pure::functions::lang::dynamicNew(class:Class<Any>[1], keyExpressions:KeyValue[*], getterOverrideToOne:Function<{Any[1],Property<Nil,Any|0..1>[1]->Any[0..1]}>[0..1], getterOverrideToMany : Function<{Any[1],Property<Nil,Any|*>[1]->Any[*]}>[0..1], hiddenPayload:Any[0..1]):Any[1];
native function meta::pure::functions::lang::dynamicNew(genericType:GenericType[1], keyExpressions:KeyValue[*], getterOverrideToOne:Function<{Any[1],Property<Nil,Any|0..1>[1]->Any[0..1]}>[0..1], getterOverrideToMany : Function<{Any[1],Property<Nil,Any|*>[1]->Any[*]}>[0..1], hiddenPayload:Any[0..1]):Any[1];


Enum meta::pure::functions::lang::tests::dynamicNew::myEnumX{A,B}

Class meta::pure::functions::lang::tests::dynamicNew::D_A
{
  a: String[1];
  b: String[0..1];
  c: String[*];
  d : D_D[0..1];
  ds : D_D[*];
  enum : myEnumX[1];
  enums : myEnumX[*];
}

Class meta::pure::functions::lang::tests::dynamicNew::D_D
{
  name : String[1];
}

function meta::pure::functions::lang::tests::dynamicNew::getterOverrideToMany(o:Any[1], property:Property<Nil,Any|*>[1]):Any[*]
{
 [^D_D(name = $o->cast(@D_A).a + $o->getHiddenPayload()->cast(@String)->toOne()), ^D_D(name = $o->cast(@D_A).b->toOne() + $o->getHiddenPayload()->cast(@String)->toOne())]
}

function meta::pure::functions::lang::tests::dynamicNew::getterOverrideToOne(o:Any[1], property:Property<Nil,Any|0..1>[1]):Any[0..1]
{
 ^D_D(name = $o->cast(@D_A).a + $o->getHiddenPayload()->cast(@String)->toOne());
}

function <<test.Test>> meta::pure::functions::lang::tests::dynamicNew::testSimpleDynamicNew():Boolean[1]
{
  let a = D_A;
  let r = dynamicNew($a,
               [
                  ^KeyValue(key='a',value='rrr'),
                  ^KeyValue(key='b',value='eee'),
                  ^KeyValue(key='c',value=['zzz','kkk']),
                  ^KeyValue(key='d',value=^D_D(name='rrr2')),
                  ^KeyValue(key='ds',value=[^D_D(name='rrr2'),^D_D(name='eee2')]),
                  ^KeyValue(key='enum',value=myEnumX.A),
                  ^KeyValue(key='enums',value=[myEnumX.A, myEnumX.B])
               ]
              )->cast(@D_A);

 testDynamicNewAssertsSimple($r);
}

function <<test.Test>> meta::pure::functions::lang::tests::dynamicNew::testDynamicNewWithClass():Boolean[1]
{
  let a = D_A;
  let r = dynamicNew($a,
               [
                  ^KeyValue(key='a',value='rrr'),
                  ^KeyValue(key='b',value='eee'),
                  ^KeyValue(key='c',value=['zzz','kkk']),
                  ^KeyValue(key='enum',value=myEnumX.A),
                  ^KeyValue(key='enums',value=[myEnumX.A, myEnumX.B])
               ],
               getterOverrideToOne_Any_1__Property_1__Any_$0_1$_,
               getterOverrideToMany_Any_1__Property_1__Any_MANY_,
               '2'
              )->cast(@D_A);

 testDynamicNewAssertsWithOverride($r);
}

function <<test.Test>> meta::pure::functions::lang::tests::dynamicNew::testSimpleDynamicNewWithGenericType():Boolean[1]
{
  let r = dynamicNew(^GenericType(rawType=D_A),
               [
                  ^KeyValue(key='a',value='rrr'),
                  ^KeyValue(key='b',value='eee'),
                  ^KeyValue(key='c',value=['zzz','kkk']),
                  ^KeyValue(key='d',value=^D_D(name='rrr2')),
                  ^KeyValue(key='ds',value=[^D_D(name='rrr2'),^D_D(name='eee2')]),
                  ^KeyValue(key='enum',value=myEnumX.A),
                  ^KeyValue(key='enums',value=[myEnumX.A, myEnumX.B])
               ]
              )->cast(@D_A);

 testDynamicNewAssertsSimple($r);
}
function <<test.Test>> meta::pure::functions::lang::tests::dynamicNew::testDynamicNewWithGenericType():Boolean[1]
{
  let r = dynamicNew(^GenericType(rawType=D_A),
               [
                  ^KeyValue(key='a',value='rrr'),
                  ^KeyValue(key='b',value='eee'),
                  ^KeyValue(key='c',value=['zzz','kkk']),
                  ^KeyValue(key='enum',value=myEnumX.A),
                  ^KeyValue(key='enums',value=[myEnumX.A, myEnumX.B])
               ],
               getterOverrideToOne_Any_1__Property_1__Any_$0_1$_,
               getterOverrideToMany_Any_1__Property_1__Any_MANY_,
               '2'
              )->cast(@D_A);

 testDynamicNewAssertsWithOverride($r);
}

function meta::pure::functions::lang::tests::dynamicNew::testDynamicNewAssertsWithOverride(r:D_A[1]):Boolean[1]
{
  assertEquals('2', $r->getHiddenPayload());
  // DataType [1]
  assertEquals('rrr', $r.a);
  assertEquals('rrr', ^$r().a);
  assertEquals('rrr', D_A->getProperty('a')->toOne()->eval($r));
  // DataType [0..1]
  assertEquals('eee', $r.b);
  assertEquals('eee', ^$r().b);
  assertEquals('eee', D_A->getProperty('b')->toOne()->eval($r));
  // DataType [*]
  assertEquals(['zzz', 'kkk'], $r.c);
  assertEquals(['zzz', 'kkk'], ^$r().c);
  assertEquals(['zzz', 'kkk'], D_A->getProperty('c')->toOne()->eval($r));
  // Class [1]
  assertEquals('rrr2', $r.d.name);
  assertEquals('rrr2', D_A->getProperty('d')->toOne()->eval($r)->cast(@D_D).name);
  assertEquals('rrr2', ^$r().d.name);
  // Class [*]
  assertEquals(['rrr2','eee2'], $r.ds.name);
  assertEquals(['rrr2','eee2'], D_A->getProperty('ds')->toOne()->eval($r)->cast(@D_D).name);
  assertEquals(['rrr2','eee2'], ^$r().ds.name);
  // Enum [1]
  assertEquals(myEnumX.A, $r.enum);
  assertEquals(myEnumX.A, D_A->getProperty('enum')->toOne()->eval($r));
  assertEquals(myEnumX.A, ^$r().enum);
  // Enum [*]
  assertEquals([myEnumX.A,myEnumX.B], $r.enums);
  assertEquals([myEnumX.A,myEnumX.B], D_A->getProperty('enums')->toOne()->eval($r));
  assertEquals([myEnumX.A,myEnumX.B], ^$r().enums);
}

function meta::pure::functions::lang::tests::dynamicNew::testDynamicNewAssertsSimple(r:D_A[1]):Boolean[1]
{
  // DataType [1]
  assertEquals('rrr', $r.a);
  assertEquals('rrr', ^$r().a);
  assertEquals('rrr', D_A->getProperty('a')->toOne()->eval($r));
  // DataType [0..1]
  assertEquals('eee', $r.b);
  assertEquals('eee', ^$r().b);
  assertEquals('eee', D_A->getProperty('b')->toOne()->eval($r));
  // DataType [*]
  assertEquals(['zzz', 'kkk'], $r.c);
  assertEquals(['zzz', 'kkk'], ^$r().c);
  assertEquals(['zzz', 'kkk'], D_A->getProperty('c')->toOne()->eval($r));
  // Class [1]
  assertEquals('rrr2', $r.d.name);
  assertEquals('rrr2', D_A->getProperty('d')->toOne()->eval($r)->cast(@D_D).name);
  assertEquals('rrr2', ^$r().d.name);
  // Class [*]
  assertEquals(['rrr2','eee2'], $r.ds.name);
  assertEquals(['rrr2','eee2'], D_A->getProperty('ds')->toOne()->eval($r)->cast(@D_D).name);
  assertEquals(['rrr2','eee2'], ^$r().ds.name);
  // Enum [1]
  assertEquals(myEnumX.A, $r.enum);
  assertEquals(myEnumX.A, D_A->getProperty('enum')->toOne()->eval($r));
  assertEquals(myEnumX.A, ^$r().enum);
  // Enum [*]
  assertEquals([myEnumX.A,myEnumX.B], $r.enums);
  assertEquals([myEnumX.A,myEnumX.B], D_A->getProperty('enums')->toOne()->eval($r));
  assertEquals([myEnumX.A,myEnumX.B], ^$r().enums);
}

function meta::pure::functions::lang::tests::dynamicNew::getProperty(class:Class<Any>[1], name:String[1]):Property<Nil,Any|*>[0..1]
{
    $class.properties->filter(p | $p.name == $name)->first()
}
