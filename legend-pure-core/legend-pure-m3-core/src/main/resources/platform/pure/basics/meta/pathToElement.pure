// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::meta::tests::model::*;

function meta::pure::functions::meta::pathToElement(path:String[1]):PackageableElement[1]
{
    $path->pathToElement('::')
}

native function meta::pure::functions::meta::pathToElement(path:String[1], separator:String[1]):PackageableElement[1];

function meta::pure::functions::meta::lenientPathToElement(path:String[1]):PackageableElement[0..1]
{
    $path->lenientPathToElement('::')
}

native function meta::pure::functions::meta::lenientPathToElement(path:String[1], separator:String[1]):PackageableElement[0..1];


function <<test.Test>> meta::pure::functions::meta::tests::pathToElement::testPathToElement():Boolean[1]
{
    assertIs(CC_Person, pathToElement('meta::pure::functions::meta::tests::model::CC_Person'));
    assertIs(CC_Person, pathToElement('meta.pure.functions.meta.tests.model.CC_Person', '.'));
    assertIs(CC_Person.package->toOne(), pathToElement('meta::pure::functions::meta::tests::model'));
    assertIs(CC_Person.package->toOne(), pathToElement('meta_pure_functions_meta_tests_model', '_'));
}

function <<test.Test>> meta::pure::functions::meta::tests::pathToElement::testLenientPathToElement():Boolean[1]
{
    assertIs(CC_Person, lenientPathToElement('meta::pure::functions::meta::tests::model::CC_Person')->toOne());
    assertIs(CC_Person, lenientPathToElement('meta.pure.functions.meta.tests.model.CC_Person', '.')->toOne());
    assertEmpty(lenientPathToElement('meta::pure::functions::meta::tests::model::CCC_Person'));
    assertEmpty(lenientPathToElement('meta.pure.functions.meta.tests.model.CCC_Person', '.'));
    assertEmpty(lenientPathToElement('meta::pure::functions::meta::tests::models::CC_Person'));
    assertEmpty(lenientPathToElement('meta.pure.functions.meta.tests.models.CC_Person', '.'));

    assertIs(CC_Person.package->toOne(), lenientPathToElement('meta::pure::functions::meta::tests::model')->toOne());
    assertIs(CC_Person.package->toOne(), lenientPathToElement('meta_pure_functions_meta_tests_model', '_')->toOne());
    assertEmpty(lenientPathToElement('meta::pure::functions::metal::tests::model'));
    assertEmpty(lenientPathToElement('meta_pure_functions_metal_tests_model', '_'));
}

function <<test.Test>> meta::pure::functions::meta::tests::pathToElement::testRootPathToElement():Boolean[1]
{
    assertIs(::, pathToElement('::'));
    assertIs(::, pathToElement('.', '.'));
    assertIs(::, pathToElement('Root'));
    assertIs(::, pathToElement('Root', '_'));
    assertIs(::, pathToElement(''));
    assertIs(::, pathToElement('', '$'));
}

function <<test.Test>> meta::pure::functions::meta::tests::pathToElement::testNativeFunctionPathToElement():Boolean[1]
{
    assertIs(meta::pure::functions::string::toString_Any_1__String_1_, pathToElement('meta::pure::functions::string::toString_Any_1__String_1_'));
}

function <<test.Test>> meta::pure::functions::meta::tests::pathToElement::testConcreteFunctionDefinitionPathToElement():Boolean[1]
{
    assertIs(meta::pure::functions::boolean::greaterThan_Number_1__Number_1__Boolean_1_, pathToElement('meta::pure::functions::boolean::greaterThan_Number_1__Number_1__Boolean_1_'));
}

// To be removed
function <<test.Test, meta::pure::profiles::doc.deprecated>> meta::pure::functions::boolean::tests::testIsNativeFunctions():Boolean[1]
{
    true;
}

// To be removed
function <<test.Test, meta::pure::profiles::doc.deprecated>> meta::pure::functions::boolean::tests::testIsConcreteFunctionDefinitions():Boolean[1]
{
    true;
}
