// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::collection::tests::model::*;
import meta::pure::test::pct::*;

function
     <<PCT.function>>
     {
         doc.doc='Returns the first element of the collection, or nothing if the collection is empty. Equivalent to \'first\''
     }
     meta::pure::functions::collection::head<T>(set:T[*]):T[0..1]
{
    $set->first();
}

function <<PCT.test>> meta::pure::functions::collection::tests::head::testHeadSimple<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('a', $f->eval(|['a','b']->head()));
}

function <<PCT.test>> meta::pure::functions::collection::tests::head::testHeadOnOneElement<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('a', $f->eval(|'a'->head()));
}

function <<PCT.test>> meta::pure::functions::collection::tests::head::testHeadOnEmptySet<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEmpty($f->eval(|[]->head()));
}

function <<PCT.test>> meta::pure::functions::collection::tests::head::testHeadComplex<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let smith = ^CO_Person(firstName='Fabrice', lastName='Smith');
    let roe = ^CO_Person(firstName='David', lastName='Roe');
    let doe = ^CO_Person(firstName='Pierre', lastName='Doe');
    let firm1 = ^CO_Firm(legalName='Firm1', employees=[$smith]);
    let firm2 = ^CO_Firm(legalName='Firm2', employees=[$doe, $roe]);
    let set = [$firm1, $firm2];
    assertEquals($firm1, $f->eval(|$set->head()));
    assertEquals($doe, $f->eval(|$set->at(1).employees->head()));
}