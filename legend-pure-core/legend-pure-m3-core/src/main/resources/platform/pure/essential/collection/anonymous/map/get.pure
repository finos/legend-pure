// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>>
    {doc.doc = 'Returns the value to which the specified key is mapped, or empty if this map contains no mapping for the key'}
meta::pure::functions::collection::get<U,V>(m:Map<U,V>[1], key:U[1]):V[0..1];
//{
//   let found = if($m._func->isEmpty(),
//            |$m._values->filter(v|$v.first == $key),
//            |$m._values->filter(v|$m._func->toOne()->eval($v.first, $key))
//   );
//   if ($found->isEmpty(),|[],|$found.second->first());
//}

function <<PCT.test>> meta::pure::functions::collection::tests::get::testGet<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([], $f->eval(|newMap([]->cast(@Pair<String, Integer>))->get('key1')));
    assertEquals(1, $f->eval(|newMap(pair('key1', 1))->get('key1')));
}
