// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::functions::string::tests::toString::*;

// Used by List
native function
    <<PCT.function>>
    {
        doc.doc=''
    }
    meta::pure::functions::string::toString(any:Any[1]):String[1];

function <<PCT.test>> meta::pure::functions::string::tests::toString::testIntegerToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('1', $f->eval(|1->toString()));
    assertEq('-1', $f->eval(|toString(-1)));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testFloatToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('3.14', $f->eval(|3.14->toString()));
    assertEq('3.14159', $f->eval(|3.14159->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testFloatToStringWithExcessTrailingZeros<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('17.0', $f->eval(|17.0->toString()));
    assertEq('17.0', $f->eval(|17.000->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testFloatToStringWithNoLeadingZero<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('0.01', $f->eval(|0.01->toString()));
    assertEq('0.01', $f->eval(|.01->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testFloatToStringWithPositiveExponent<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('134210000.0', $f->eval(|134.21e6->toString()));
    assertEq('134210000.0', $f->eval(|1.3421e8->toString()));
    assertEq('134210000.0', $f->eval(|0.13421e9->toString()));
    assertEq('134210000.0', $f->eval(|134210000.0->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testFloatToStringWithNegativeExponent<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('0.000000013421', $f->eval(|134.21e-10->toString()));
    assertEq('0.000000013421', $f->eval(|1.3421e-8->toString()));
    assertEq('0.000000013421', $f->eval(|0.13421e-7->toString()));
    assertEq('0.000000013421', $f->eval(|0.000000013421->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testBooleanToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('true', $f->eval(|true->toString()));
    assertEq('false', $f->eval(|false->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testStringToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('the quick brown fox jumps over the lazy dog', $f->eval(|'the quick brown fox jumps over the lazy dog'->toString()));
    assertEq('', $f->eval(|''->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testSimpleDateToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('2014-01-02T01:54:27.352+0000', $f->eval(|%2014-01-01T20:54:27.352-0500->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testDateTimeWithTimezoneToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('2014-01-01T00:00:00.0000+0000', $f->eval(|%2014-01-01T00:00:00.0000+0000->toString()));
    assertEq('2014-01-01T00:00:00.0000+0000', $f->eval(|%2014-01-01T00:00:00.0000-0000->toString()));

    assertEq('2014-01-01T00:00:00.000+0000', $f->eval(|%2014-01-01T00:00:00.000+0000->toString()));
    assertEq('2014-01-01T00:00:00.000+0000', $f->eval(|%2014-01-01T00:00:00.000-0000->toString()));

    assertEq('2014-01-01T00:00:00.0+0000', $f->eval(|%2014-1-1T0:00:00.0+0000->toString()));
    assertEq('2014-01-01T00:00:00.0+0000', $f->eval(|%2014-1-1T0:00:00.0-0000->toString()));

    assertEq('2014-01-01T00:00+0000', $f->eval(|%2014-1-1T0:00+0000->toString()));
    assertEq('2014-01-01T00:00+0000', $f->eval(|%2014-1-1T0:00-0000->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testDateTimeToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('2014-01-01T00:00:00.000+0000', $f->eval(|%2014-01-01T00:00:00.000->toString()));
    assertEq('2014-01-01T00:00:00.00+0000', $f->eval(|%2014-01-01T00:00:00.00->toString()));
    assertEq('2014-01-01T00:00:00.0+0000', $f->eval(|%2014-1-1T0:00:00.0->toString()));
    assertEq('2014-01-01T00:00:00+0000', $f->eval(|%2014-1-1T0:00:00->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testDateToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('2014-01-01', $f->eval(|%2014-01-01->toString()));
    assertEq('2014-01-01', $f->eval(|%2014-1-1->toString()));

    assertEq('2014-01', $f->eval(|%2014-01->toString()));
    assertEq('2014-01', $f->eval(|%2014-1->toString()));

    assertEq('2014', $f->eval(|%2014->toString()));
    assertEq('2014', $f->eval(|%2014->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testListToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('[a, b, c]', $f->eval(|^List<String>(values=['a', 'b', 'c'])->toString()));
    assertEq('[[a, b], c]', $f->eval(|^List<Any>(values=[^List<String>(values=['a', 'b']), 'c'])->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testPairToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('<a, b>', $f->eval(|^Pair<String, String>(first='a', second='b')->toString()));
    assertEq('<a, 1>', $f->eval(|^Pair<String, Integer>(first='a', second=1)->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testPairCollectionToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let pairs = [^Pair<String, String>(first='a', second='b'),^Pair<String, Integer>(first='a', second=1)];
    assertEq('(<a, b>,<a, 1>)', $f->eval(|'('+ $pairs->map(p| $p.toString())->joinStrings(',')+ ')'));

}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testPersonToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let str = ^STR_Person(firstName='Pierre', lastName='Doe')->toString();
    assert($f->eval(|$str->startsWith('Anonymous_') || $str->startsWith('@_')));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testClassToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('STR_Person', $f->eval(|STR_Person->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testEnumerationToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('STR_GeographicEntityType', $f->eval(|STR_GeographicEntityType->toString()));
    assertEq('CITY', $f->eval(|STR_GeographicEntityType.CITY->toString()));
}

function <<PCT.test>> meta::pure::functions::string::tests::toString::testComplexClassToString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('// Warning: Good for gin -- Sad times no tonic', $f->eval(|^ClassWithComplexToString(errorType=ErrorType.NoTonic,errorMessage='Sad times')->toString()));
}


Enum  meta::pure::functions::string::tests::toString::ErrorType {
   NoGin,
   NoTonic
}

Class meta::pure::functions::string::tests::toString::STR_Person
{
    firstName : String[1];
    lastName : String[1];
}

Enum meta::pure::functions::string::tests::toString::STR_GeographicEntityType
{
    {doc.doc = 'A city, town, village, or other urban area.'} CITY,
    <<doc.deprecated>> COUNTRY,
    {doc.doc = 'Any geographic entity other than a city or country.'} REGION
}

Class meta::pure::functions::string::tests::toString::ClassWithComplexToString {
   errorType : ErrorType[1];
   errorMessage : String[1];
   toString() {format('// Warning: %s -- %s %s', [if($this.errorType->equal(ErrorType.NoGin),
                                              |'No Gin - disaster',
                                              |'Good for gin'),
                                             $this.errorMessage,
                                             if($this.errorType->equal(ErrorType.NoTonic),
                                              |'no tonic',
                                              |'good for tonic')
                                            ])}:String[1];
}