// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function
    <<PCT.function>>
    {
        doc.doc=''
    }
    meta::pure::functions::lang::if<T|m>(test:Boolean[1], valid:Function<{->T[m]}>[1], invalid:Function<{->T[m]}>[1]):T[m];

function meta::pure::functions::lang::if<T|m>(condList:Pair<Function<{->Boolean[1]}>, Function<{->T[m]}>>[*], last:Function<{->T[m]}>[1]):T[m]
{
  let matchCond = $condList->find(f|$f.first->eval());
  if ($matchCond->isEmpty(),
    | $last->eval(),
    | $matchCond->toOne().second->eval()
  );
}


function <<PCT.test>> meta::pure::functions::lang::tests::if::testSimpleIf<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('truesentence', $f->eval(|if(true, |'truesentence', |'falsesentence')));
    assertEq('falsesentence', $f->eval(|if(false, |'truesentence', |'falsesentence')));
}

function <<PCT.test>> meta::pure::functions::lang::tests::if::testIfWithEvaluate<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('truesentence', $f->eval(|if(1 == 1, |'truesentence', |'falsesentence')));
    assertEq('falsesentence', $f->eval(|if(1 == 3, |'truesentence', |'falsesentence')));
}

function <<PCT.test>> meta::pure::functions::lang::tests::if::testIfWithFunctionCall<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('truesentence', $f->eval(|if(startsWith('1 == 1', '1'), |'truesentence', |'falsesentence')));
    assertEq('falsesentence', $f->eval(|if(startsWith('3 == 1', '1'), |'truesentence', |'falsesentence')));
}


function <<PCT.test>> meta::pure::functions::lang::tests::if::testMultiIf<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let val = 5;
    assertEquals(7, $f->eval(|if(
                          [
                            pair(|$val==1,|2),
                            pair(|$val==2,|22)
                          ],
                          |4
                    )+3));

    assertEquals(5, $f->eval(|if(
                        [
                          pair(|$val >1,|2),
                          pair(|$val==5,|4)
                        ],
                        |4
                    )+3));
}
