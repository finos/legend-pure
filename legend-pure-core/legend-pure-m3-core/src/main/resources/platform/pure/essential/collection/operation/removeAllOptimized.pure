// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::collection::tests::removeAllOptimized::*;

native function meta::pure::functions::collection::removeAllOptimized<T>(set:T[*], other:T[*]):T[*];

Class meta::pure::functions::collection::tests::removeAllOptimized::TestClassWithEquality
{
   <<equality.Key>> val : Integer[1];
}

function <<test.Test>> meta::pure::functions::collection::tests::removeAllOptimized::testRemoveAllOptimizedClassKey():Boolean[1]
{
   let c1 = ^TestClassWithEquality(val = 1);
   let c2 = ^TestClassWithEquality(val = 2);
   let c3 = ^TestClassWithEquality(val = 3);

   let c11 = ^TestClassWithEquality(val = 1);
   let c13 = ^TestClassWithEquality(val = 3);

   let vals = [$c1, $c2, $c3];

   assertEquals([$c2], $vals->removeAllOptimized([^TestClassWithEquality(val = 1), ^TestClassWithEquality(val = 3)]));
}