// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>> meta::pure::functions::string::parseDate(string:String[1]):Date[1];

function <<PCT.test>> meta::pure::functions::string::tests::parseDate::testParseDate<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(%2014-02-27T10:01:35.231, $f->eval(|parseDate('2014-02-27T10:01:35.231')));
    assertEq(%2014-02-27T10:01:35.231, $f->eval(|parseDate('2014-2-27T10:01:35.231')));
}

function <<PCT.test>> meta::pure::functions::string::tests::parseDate::testParseDateWithZ<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(%2014-02-27T10:01:35.231, $f->eval(|parseDate('2014-02-27T10:01:35.231Z')));
    assertEq(%2014-02-27T10:01:35.231, $f->eval(|parseDate('2014-2-27T10:01:35.231Z')));
}

function <<PCT.test>> meta::pure::functions::string::tests::parseDate::testParseDateWithTimezone<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(%2014-02-27T10:01:35.231-0500, $f->eval(|parseDate('2014-02-27T10:01:35.231-0500')));
    assertEq(%2014-02-27T15:01:35.231+0000, $f->eval(|parseDate('2014-02-27T10:01:35.231-0500')));

    assertEq(%2014-02-27T10:01:35.231+0500, $f->eval(|parseDate('2014-2-27T10:01:35.231+0500')));
    assertEq(%2014-02-27T05:01:35.231+0000, $f->eval(|parseDate('2014-2-27T10:01:35.231+0500')));
}

function <<PCT.test>> meta::pure::functions::string::tests::parseDate::testParseDateTypes<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   let dt = $f->eval(|parseDate('2014-02-27T00:00:00.000000'));
   assertInstanceOf($dt, DateTime);
   assert($dt->hasSecond());

   let date = $f->eval(|parseDate('2014-02-27'));
   assertInstanceOf($date, StrictDate);
   assertFalse($date->hasHour());

}
