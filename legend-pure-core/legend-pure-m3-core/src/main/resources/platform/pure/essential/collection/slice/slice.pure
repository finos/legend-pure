// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>> meta::pure::functions::collection::slice<T>(set:T[*], start:Integer[1], end:Integer[1]):T[*];


function <<PCT.test>> meta::pure::functions::collection::tests::slice::testSliceOnEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEmpty($f->eval(|[]->slice(2,3)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::slice::testSlice<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([2, 3, 4], $f->eval(|[1, 2, 3, 4, 5, 6]->slice(1,4)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::slice::testSliceOutOfBounds<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([2, 3, 4, 5], $f->eval(|[2, 3, 4, 5]->slice(-1, 10)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::slice::testSliceOnBounds<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([2, 3, 4, 5], $f->eval(|[2, 3, 4, 5]->slice(0, 4)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::slice::testSliceEqualBounds<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEmpty($f->eval(|[2, 3, 4, 5]->slice(2, 2)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::slice::testSliceInList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(list([2, 3]), $f->eval(|list([1, 2, 3, 4]->slice(1, 3))));
}
