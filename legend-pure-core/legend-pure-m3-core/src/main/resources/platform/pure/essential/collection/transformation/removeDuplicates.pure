// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::functions::collection::tests::removeDuplicates::*;

native function
    <<PCT.function>>
    {
        doc.doc='Returns a collection of elements with duplicates removed. The order of elements is unspecified. If a key function is provided, it is used to compute the key for each element and duplicates are determined based on the keys. If an equality function is provided, it is used to compare elements (or keys if a key function is provided) for equality. If no equality function is provided, the default equality comparison is used.'
    }
    meta::pure::functions::collection::removeDuplicates<T,V>(col:T[*], key:Function<{T[1]->V[1]}>[0..1], eql:Function<{V[1],V[1]->Boolean[1]}>[0..1]):T[*];

function <<PCT.function>> meta::pure::functions::collection::removeDuplicates<T>(col:T[*], eql:Function<{T[1],T[1]->Boolean[1]}>[1]):T[*]
{
    $col->removeDuplicates([], $eql)
}

function <<PCT.function>> meta::pure::functions::collection::removeDuplicates<T>(col:T[*]):T[*]
{
    $col->removeDuplicates([], [])
}



function meta::pure::functions::collection::tests::removeDuplicates::cmp(a:Any[1],b:Any[1]):Boolean[1]
{
    $a->toString() == $b->toString()
}

function <<PCT.test>> meta::pure::functions::collection::tests::removeDuplicates::testRemoveDuplicatesPrimitiveStandardFunction<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([1, 2, 3], $f->eval(|[1, 2, 1, 3, 1, 3, 3, 2]->removeDuplicates())->sort());
    assertEquals(['a', 'b', 'c'], $f->eval(|['a', 'a', 'b', 'b', 'c']->removeDuplicates())->sort());
    assertEquals([1, 2, 3, '1', '3'], $f->eval(|[1, 2, '1', '3', 1, 3, '3', 2]->removeDuplicates())->sort());
}

function <<PCT.test>> meta::pure::functions::collection::tests::removeDuplicates::testRemoveDuplicatesPrimitiveStandardFunctionExplicit<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([1, 2, 3], $f->eval(|[1, 2, 1, 3, 1, 3, 3, 2]->removeDuplicates(eq_Any_1__Any_1__Boolean_1_)));
    assertEquals([1, 2, 3], $f->eval(|[1, 2, 1, 3, 1, 3, 3, 2]->removeDuplicates(equal_Any_MANY__Any_MANY__Boolean_1_)));

    assertEquals(['a', 'b', 'c'], $f->eval(|['a', 'a', 'b', 'b', 'c']->removeDuplicates(eq_Any_1__Any_1__Boolean_1_)));
    assertEquals(['a', 'b', 'c'], $f->eval(|['a', 'a', 'b', 'b', 'c']->removeDuplicates(equal_Any_MANY__Any_MANY__Boolean_1_)));

    assertEquals([1, 2, '1', '3', 3], $f->eval(|[1, 2, '1', '3', 1, 3, '3', 2]->removeDuplicates(eq_Any_1__Any_1__Boolean_1_)));
    assertEquals([1, 2, '1', '3', 3], $f->eval(|[1, 2, '1', '3', 1, 3, '3', 2]->removeDuplicates(equal_Any_MANY__Any_MANY__Boolean_1_)));

    assertEquals(['1', 2, '3'], $f->eval(|['1', 2, '1', '3', 1, 3, '3', 2]->removeDuplicates(cmp_Any_1__Any_1__Boolean_1_)));
}


function <<PCT.test>> meta::pure::functions::collection::tests::removeDuplicates::testRemoveDuplicatesPrimitiveNonStandardFunction<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
     assertEquals([1, 2, '3'], $f->eval(|[1, 2, '1', '3', 1, 3, '3', 2]->removeDuplicates({x, y | $x->toString() == $y->toString()})));
     assertEquals(['1', 2, '3'], $f->eval(|['1', 2, '1', '3', 1, 3, '3', 2]->removeDuplicates({x, y | $x->toString() == $y->toString()})));
     assertEquals([4,1,1,1,3,6], $f->eval(|[4,1,1,1,2,3,2,6]->removeDuplicates({x:Integer[1], y:Integer[1] | ($x == 2 + $y)})));
     assertEquals([4,2,3,2,6], $f->eval(|[4,1,1,1,2,3,2,6]->removeDuplicates({x:Integer[1] | ($x +2)}, {x:Integer[1], y:Integer[1] | ($x == 3 + $y)})));
}

function <<PCT.test>> meta::pure::functions::collection::tests::removeDuplicates::testRemoveDuplicatesEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([], $f->eval(|[]->removeDuplicates()));
}

function <<PCT.test>> meta::pure::functions::collection::tests::removeDuplicates::testRemoveDuplicatesEmptyListExplicit<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([], $f->eval(|[]->removeDuplicates({x, y | $x->toString() == $y->toString()})));
    assertEquals([], $f->eval(|[]->removeDuplicatesBy({x | $x->toString()})));
}