// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>> meta::pure::functions::string::parseDecimal(string:String[1]):Decimal[1];

function <<PCT.test>> meta::pure::functions::string::tests::parseDecimal::testParseDecimal<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(3.14159d, $f->eval(|parseDecimal('3.14159d')));
    assertEq(3.14159d, $f->eval(|parseDecimal('3.14159')));
    assertEq(-3.14159d, $f->eval(|parseDecimal('-3.14159d')));
    assertEq(3.1415900000d, $f->eval(|parseDecimal('+0000003.1415900000')));
    assertEq(-3.1415900000d, $f->eval(|parseDecimal('-0000003.1415900000')));
}

function <<PCT.test>> meta::pure::functions::string::tests::parseDecimal::testParseZero<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(0.0d, $f->eval(|parseDecimal('0.0')));
    assertEq(0.000d, $f->eval(|parseDecimal('-000.000')));
}