// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::functions::lang::tests::cast::*;

native function <<PCT.function>> meta::pure::functions::lang::cast<T|m>(source:Any[m], object:T[1]):T[m];


Primitive meta::pure::functions::lang::tests::cast::P8 extends Integer

Class meta::pure::functions::lang::tests::cast::Container
{
  val : P8[1];
}

function <<test.Test>> meta::pure::functions::lang::tests::cast::testPrimitiveExtensionCast():Boolean[1]
{
  assertEquals(1, ^Container(val=1->cast(@P8)).val);
}


Primitive meta::pure::functions::lang::tests::cast::P(x:Integer[1]) extends Integer
[
    $this < $x
]

Class meta::pure::functions::lang::tests::cast::Container2
{
    val : P(8)[1];
}

function <<test.Test>> meta::pure::functions::lang::tests::cast::testPrimitiveExtensionCastWithConstraint():Boolean[1]
{
    assertEquals(1, ^Container2(val=1->cast(@P(8))).val);
}

function <<test.Test>> meta::pure::functions::lang::tests::cast::testPrimitiveExtensionCastWithConstraintError():Boolean[1]
{
    assertError(|^Container2(val=10->cast(@P(8))), 'Constraint :[0] violated in the Class P');
}

function <<test.Test>> meta::pure::functions::lang::tests::cast::testPrimitiveExtensionCastWithAdd():Boolean[1]
{
    assertEquals(4, 3->cast(@P(8)) + 1);
}

Primitive meta::pure::functions::lang::tests::cast::NP(x:Integer[1]) extends Integer
[
   id(~function:$this < $x ~message:'the value is greater than '+$x->toString())
]

Class meta::pure::functions::lang::tests::cast::Container3
{
    val : NP(8)[1];
}

function <<test.Test>> meta::pure::functions::lang::tests::cast::testPrimitiveExtensionCastWithConstraintErrorMessage():Boolean[1]
{
   assertError(|^Container3(val=10->cast(@NP(8))), 'Constraint :[id] violated in the Class NP, Message: the value is greater than 8');
}


Primitive meta::pure::functions::lang::tests::cast::OP(x:Integer[1]) extends Integer
[
   id(~function:$this < $x ~message:'the value is greater than '+$x->toString())
]

Primitive meta::pure::functions::lang::tests::cast::OP8 extends OP(8)

Class meta::pure::functions::lang::tests::cast::Container4 {val : OP8[1];}

function <<test.Test>> meta::pure::functions::lang::tests::cast::testSimpleConstraintCastErrorWithMessageSimpleInheritance():Any[*]
{
   assertError(|^Container4(val=10->cast(@OP8)), 'Constraint :[id] violated in the Class OP, Message: the value is greater than 8')
}

Primitive meta::pure::functions::lang::tests::cast::StringP extends String

function <<test.Test>> meta::pure::functions::lang::tests::cast::testExtendedPrimitiveTypeError():Any[*]
{
   assertError(|10->cast(@StringP), 'Cast exception: Integer cannot be cast to StringP')
}
