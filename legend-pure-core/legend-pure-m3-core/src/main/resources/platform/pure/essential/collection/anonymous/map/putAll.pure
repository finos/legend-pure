// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>>
    {doc.doc = 'Returns a new map, with all the entries of the given map and the given pairs of key and values.  If the input map previously contained a mapping for any of the given pairs, the old value is replaced by the specified value.'}
meta::pure::functions::collection::putAll<U,V>(m:Map<U,V>[1], pairs:Pair<U,V>[*]):Map<U,V>[1];
//{
//   $pairs->fold({a,b|$b->put($a.first, $a.second)}, $m);
//}

native function <<PCT.function>>
    {doc.doc = 'Returns a new map, concatenating the entries of both maps.  The entries on the map on the second parameter would replace any existing entry on the map on the first parameter.'}
meta::pure::functions::collection::putAll<U,V>(m:Map<U,V>[1], o:Map<U,V>[1]):Map<U,V>[1];
//{
//   $o._values->fold({a,b|$b->put($a.first, $a.second)}, $m);
//}

function <<PCT.test>> meta::pure::functions::collection::tests::putAll::testPutAll_emptyInputMap<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(newMap([pair('key1', 1), pair('key2', 2)]), $f->eval(|newMap([]->cast(@Pair<String, Integer>))->putAll([pair('key1', 1), pair('key2', 2)])));

    assertEquals(newMap([pair('key1', 1), pair('key2', 2)]), $f->eval(|newMap([]->cast(@Pair<String, Integer>))->putAll(newMap([pair('key1', 1), pair('key2', 2)]))));
}

function <<PCT.test>> meta::pure::functions::collection::tests::putAll::testPutAll_emptyPutEntries<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(newMap([pair('key1', 1), pair('key2', 2)]), $f->eval(|newMap([pair('key1', 1), pair('key2', 2)])->putAll([]->cast(@Pair<String, Integer>))));

    assertEquals(newMap([pair('key1', 1), pair('key2', 2)]), $f->eval(|newMap([pair('key1', 1), pair('key2', 2)])->putAll(newMap([]->cast(@Pair<String, Integer>)))));
}

function <<PCT.test>> meta::pure::functions::collection::tests::putAll::testPutAll_overridesExistingAndAddNew<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(newMap([pair('key1', 1), pair('key2', -2), pair('key3', 3)]), $f->eval(|newMap([pair('key1', 1), pair('key2', 2)])->putAll([pair('key2', -2), pair('key3', 3)])));

    assertEquals(newMap([pair('key1', 1), pair('key2', -2), pair('key3', 3)]), $f->eval(|newMap([pair('key1', 1), pair('key2', 2)])->putAll(newMap([pair('key2', -2), pair('key3', 3)]))));
}