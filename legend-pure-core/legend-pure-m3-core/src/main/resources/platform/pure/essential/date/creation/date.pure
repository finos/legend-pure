// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

// Functions for constructing dates
native function <<PCT.function>> meta::pure::functions::date::date(year:Integer[1]):Date[1];
native function <<PCT.function>> meta::pure::functions::date::date(year:Integer[1], month:Integer[1]):Date[1];
native function <<PCT.function>> meta::pure::functions::date::date(year:Integer[1], month:Integer[1], day:Integer[1]):StrictDate[1];
native function <<PCT.function>> meta::pure::functions::date::date(year:Integer[1], month:Integer[1], day:Integer[1], hour:Integer[1]):DateTime[1];
native function <<PCT.function>> meta::pure::functions::date::date(year:Integer[1], month:Integer[1], day:Integer[1], hour:Integer[1], minute:Integer[1]):DateTime[1];
native function <<PCT.function>> meta::pure::functions::date::date(year:Integer[1], month:Integer[1], day:Integer[1], hour:Integer[1], minute:Integer[1], second:Number[1]):DateTime[1];


function <<PCT.test>> meta::pure::functions::date::tests::testDateFromYear<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(%1973, $f->eval(|date(1973)));
    assertEquals(%2015, $f->eval(|date(2015)));
}

function <<PCT.test>> meta::pure::functions::date::tests::testDateFromMonth<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(%1973-11, $f->eval(|date(1973, 11)));
    assertEquals(%2015-04, $f->eval(|date(2015, 4)));
}

function <<PCT.test>> meta::pure::functions::date::tests::testDateFromDay<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(%1973-11-13, $f->eval(|date(1973, 11, 13)));
    assertEquals(%2015-04-16, $f->eval(|date(2015, 4, 16)));
}

function <<PCT.test>> meta::pure::functions::date::tests::testDateFromHour<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(%1973-11-13T23, $f->eval(|date(1973, 11, 13, 23)));
    assertEquals(%2015-04-16T14, $f->eval(|date(2015, 4, 16, 14)));
}

function <<PCT.test>> meta::pure::functions::date::tests::testDateFromMinute<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(%1973-11-13T23:09, $f->eval(|date(1973, 11, 13, 23, 9)));
    assertEquals(%2015-04-16T14:51, $f->eval(|date(2015, 4, 16, 14, 51)));
}

function <<PCT.test>> meta::pure::functions::date::tests::testDateFromSecond<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(%1973-11-13T23:09:11, $f->eval(|date(1973, 11, 13, 23, 9, 11)));
    assertEquals(%2015-04-16T14:51:59, $f->eval(|date(2015, 4, 16, 14, 51, 59)));
}

function <<PCT.test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::date::tests::testDateFromSubSecond<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals(%1973-11-13T23:09:11.0, $f->eval(|date(1973, 11, 13, 23, 9, 11.0)));
    assertEquals(%2015-04-16T14:51:59.999, $f->eval(|date(2015, 4, 16, 14, 51, 59.999)));
    assertEquals(%2015-04-16T14:51:59.999, $f->eval(|date(2015, 4, 16, 14, 51, 59.999D)));
}