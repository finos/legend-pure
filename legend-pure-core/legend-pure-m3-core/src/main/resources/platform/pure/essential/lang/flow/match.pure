// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::functions::lang::tests::match::*;
import meta::pure::functions::lang::tests::model::*;


native function
    <<PCT.function>>
    {
        doc.doc=''
    }
    meta::pure::functions::lang::match<T|m,n>(var:Any[*], functions:Function<{Nil[n]->T[m]}>[1..*]):T[m];

native function meta::pure::functions::lang::match<T,P|m,n,o>(var:Any[*], functions:Function<{Nil[n],P[o]->T[m]}>[1..*], with:P[o]):T[m];


function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchOneWithZeroOne<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEquals(1, $f->eval(|[1]->match([
                                             i:Integer[0..1] | [1],
                                             s:String[1]     | 'address:'
                                       ])))
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchOneWith<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEquals('address:Digby', $f->eval(|'Digby'->match([
                                                 i:Integer[1..4] | [1,2,3],
                                                 s:String[1]     | 'address:' + $s
                                           ])))
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchOneWithMany<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEquals('address:Digby', $f->eval(|'Digby'->match([
                                                 i:Integer[1..4] | [1,2,3],
                                                 s:String[1..2]  | 'address:Digby'
                                           ])))
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchZeroWithZero<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEquals('address', $f->eval(|[]->cast(@String)->match([
                                                                     i:Integer[1..4] | [1,2,3],
                                                                     s:String[0]     | 'address'
                                                               ])))
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchZeroWithMany<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEquals('address', $f->eval(|[]->cast(@String)->match([
                                                                     i:Integer[1..4] | [1,2,3],
                                                                     s:String[*]     | 'address'
                                                               ])))
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchManyWithMany<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEquals('address:3', $f->eval(|['w','w','w']->match([
                                                                 i:Integer[1..4] | 'z',
                                                                 s:String[*]     | 'address:' + $s->size()->toString()
                                                           ])))
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchWithFunctionsAsParam<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let lambdas = [{a:Integer[1]|1}, {a:String[1]|[1,2]}, {a:Date[1]|[4,5,6]}];
    assertEquals([1], $f->eval(|1->match($lambdas)));
    assertEquals([1,2], $f->eval(|'1'->match($lambdas)));
    assertEquals([4,5,6], $f->eval(|%2005->match($lambdas)));
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchWithFunctionsAsParamManyMatch<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let lambdas = [{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}];
    assertEquals([1], $f->eval(|1->match($lambdas)));
    assertEquals(['1','2'], $f->eval(|['1','2']->match($lambdas)));
    assertEquals([6,7,1,2], $f->eval(|'1'->match($lambdas)));
    assertEquals([4,5,6], $f->eval(|%2005->match($lambdas)));

    let lambdas2 = [{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}];
    assertEquals([1], $f->eval(|1->match($lambdas2)));
    assertEquals(['1','2'], $f->eval(|['1','2']->match($lambdas2)));
    assertEquals('1', $f->eval(|'1'->match($lambdas2)));
    assertEquals([4,5,6], $f->eval(|%2005->match($lambdas2)));
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchWithFunctions<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals([1], $f->eval(|1->match([{a:Integer[1]|1}, {a:String[1]|[1,2]}, {a:Date[1]|[4,5,6]}])));
    assertEquals([1,2], $f->eval(|'1'->match([{a:Integer[1]|1}, {a:String[1]|[1,2]}, {a:Date[1]|[4,5,6]}])));
    assertEquals([4,5,6], $f->eval(|%2005->match([{a:Integer[1]|1}, {a:String[1]|[1,2]}, {a:Date[1]|[4,5,6]}])));
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchWithFunctionsManyMatch<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{

    assertEquals([1], $f->eval(|1->match([{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}])));
    assertEquals(['1','2'], $f->eval(|['1','2']->match([{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}])));
    assertEquals([6,7,1,2], $f->eval(|'1'->match([{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}])));
    assertEquals([4,5,6], $f->eval(|%2005->match([{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}])));


    assertEquals([1], $f->eval(|1->match([{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}])));
    assertEquals(['1','2'], $f->eval(|['1','2']->match([{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}])));
    assertEquals('1', $f->eval(|'1'->match([{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}])));
    assertEquals([4,5,6], $f->eval(|%2005->match([{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}])));
}

Class meta::pure::functions::lang::tests::match::Geo
{
    type : MA_GeographicEntityType[1];
}

Class meta::pure::functions::lang::tests::match::MA_Address extends Geo
{
    name : String[1];
}

Class meta::pure::functions::lang::tests::match::MA_Person
{
    firstName : String[1];
    lastName : String[1];
}

Class meta::pure::functions::lang::tests::match::MA_Location extends Geo
{
    place : String[1];
}

Enum meta::pure::functions::lang::tests::match::MA_GeographicEntityType
{
    CITY
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatch<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq('address', $f->eval(|^MA_Address(name='Hoboken, NJ', type=MA_GeographicEntityType.CITY)->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[1] | 'Any1'])));
    assertEq('location', $f->eval(|^MA_Location(place='Hoboken, NJ', type=MA_GeographicEntityType.CITY)->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[1] | 'Any1'])));
    assertEq('Any1', $f->eval(|^MA_Person(firstName='Pierre', lastName='Doe')->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[1] | 'Any1'])));
    assertEq('Any*', $f->eval(|^MA_Person(firstName='Pierre', lastName='Doe')->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[*] | 'Any*'])));
    assertEq('Any*', $f->eval(|[^MA_Person(firstName='Pierre', lastName='Doe'), ^MA_Person(firstName='Fabrice', lastName='Smith')]->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[*] | 'Any*'])));
}




function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchWithExtraParam<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEquals('good_other', $f->eval(|[1]->match([{i:Integer[1], b:String[1]|'good_'+$b},
                                          {s:String[1], b:String[1]|'bad'}
                                         ],'other'))
   );

   assertEquals('good_otheryo', $f->eval(|[1]->match([{i:Integer[1], b:String[*]|'good_'+$b->joinStrings('', '', '');},
                                            {s:String[1], b:String[*]|'bad'}
                                         ],['other', 'yo']))
   );
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchWithExtraParamsAndFunctionsAsParam<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let lambdas = [{a:String[1],b:String[1]|'1'+$b},{a:Integer[1],b:String[1]|$b},{a:Date[1],b:String[1]|'5'+$b}];
    assertEquals('11', $f->eval(|'1'->match($lambdas, '1')));
    assertEquals('2', $f->eval(|1->match($lambdas, '2')));
    assertEquals('53', $f->eval(|%2005->match($lambdas, '3')));
}

function <<PCT.test>> meta::pure::functions::lang::tests::match::testMatchWithMixedReturnType<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let z = $f->eval(|^LA_Location(place='Hoboken, NJ', type=LA_GeographicEntityType.CITY)->match([a:LA_Address[1] | 'address', l:LA_Location[1] | 1, a:Any[1] | 'Any1'])->deactivate());
    assertIs(Any, $z.genericType.rawType->toOne());
}
