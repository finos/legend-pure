// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>> meta::pure::functions::math::round(number:Number[1]):Integer[1];

native function <<PCT.function>> meta::pure::functions::math::round(decimal:Decimal[1], scale:Integer[1]):Decimal[1];

native function <<PCT.function>> meta::pure::functions::math::round(float:Float[1], scale:Integer[1]):Float[1];


function <<PCT.test>> meta::pure::functions::math::tests::round::testPositiveIntegerRound<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(17, $f->eval(|round(17)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testNegativeIntegerRound<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(-17, $f->eval(|round(-17)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testPositiveFloatRoundUp<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(18, $f->eval(|round(17.6)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testPositiveFloatRoundDown<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(17, $f->eval(|round(17.4)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testPositiveFloatRoundHalfEvenUp<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(18, $f->eval(|round(17.5)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testPositiveFloatRoundHalfEvenDown<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(16, $f->eval(|round(16.5)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testPositiveFloatWithZeroDecimalRound<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(17, $f->eval(|round(17.0)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testNegativeFloatRoundUp<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(-17, $f->eval(|round(-17.4)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testNegativeFloatRoundDown<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(-18, $f->eval(|round(-17.6)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testNegativeFloatRoundHalfEvenUp<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(-16, $f->eval(|round(-16.5)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testNegativeFloatRoundHalfEvenDown<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(-18, $f->eval(|round(-17.5)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testNegativeFloatWithZeroDecimalRound<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(-17, $f->eval(|round(-17.0)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testDecimalRound<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(3, $f->eval(|round(3.14159d)));
    assertEq(-3, $f->eval(|round(-3.14159d)));

    assertEq(3.14d, $f->eval(|3.14159d->round(2)));
    assertEq(3.142d, $f->eval(|3.14159d->round(3)));
    assertEq(-3.14d, $f->eval(|round(-3.14159d, 2)));
    assertEq(-3.142d, $f->eval(|round(-3.14159d, 3)));
}

function <<PCT.test>> meta::pure::functions::math::tests::round::testFloatRoundWithScale<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEq(17.0, $f->eval(|round(17.3, 0)));
    assertEq(-17.4, $f->eval(|round(-17.36, 1)));
}