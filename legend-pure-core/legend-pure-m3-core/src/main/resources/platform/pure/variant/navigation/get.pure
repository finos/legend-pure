// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::variant::*;
import meta::pure::functions::variant::convert::*;
import meta::pure::functions::variant::navigation::*;

function
    <<PCT.function>>
    {
        doc.doc='Returns the value for the given key out of an structure variant. failing if the variant .\n' +
                 'This will fail if array values cannot be coerced.'
    }
meta::pure::functions::variant::navigation::get(variant: Variant[0..1], key: String[1]): Variant[0..1]
{
    $variant->to(@Map<String, Variant>)->map(x | $x->meta::pure::functions::collection::get($key));
}

function
    <<PCT.function>>
    {
        doc.doc=''
    }
meta::pure::functions::variant::navigation::get(variant: Variant[0..1], index: Integer[1]): Variant[0..1]
{
    $variant->toMany(@Variant)->at($index);
}

function <<test.Test>> meta::pure::functions::variant::navigation::tests::get::testGetFromObject():Boolean[1]
{
    assertEquals('"world"', fromJson('{"hello":"world"}')->get('hello')->toOne()->toString());
    assertEquals([], fromJson('{"hello":"world"}')->get('nonExisting'));
    assertEquals([], []->cast(@Variant)->get('hello'));
}

function <<test.Test>> meta::pure::functions::variant::navigation::tests::get::testGetFromArray():Boolean[1]
{
    assertEquals('1', fromJson('[1,2,3]')->get(0)->toOne()->toString());
    assertEquals('3', fromJson('[1,2,3]')->get(2)->toOne()->toString());
}