// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::variant::*;
import meta::pure::functions::variant::convert::*;

native function
    <<PCT.function>>
    {
        doc.doc='Converts the given value to its variant representation.'
    }
meta::pure::functions::variant::convert::toVariant(value: Any[*]): Variant[1];

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::testEmpty<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('null', $f->eval(|toVariant([]))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::testInteger<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('1', $f->eval(|toVariant(1))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::testIntegers<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('[1,2,3]', $f->eval(|toVariant([1, 2, 3]))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::testFloat<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('1.25', $f->eval(|toVariant(1.25))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::testFloats<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('[1.25,2.5,3.75]', $f->eval(|toVariant([1.25, 2.5, 3.75]))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::convert::testString<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('"Hello"', $f->eval(|toVariant('Hello'))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::convert::testStrings<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('["Hello","World"]', $f->eval(|toVariant(['Hello', 'World']))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::testListOfPrimitives<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('[1,2,3]', $f->eval(|toVariant(list([1,2,3])))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::testListOfVariants<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('[1,2,3]', $f->eval(|toVariant(list([1,2,3]->map(x | $x->toVariant()))))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::testMapWithPrimitiveValues<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('{"hello":1}', $f->eval(|toVariant(newMap(pair('hello', 1))))->toString());
}

function <<PCT.test>> meta::pure::functions::variant::convert::tests::toVariant::testMapOfVariantValues<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    assertEquals('{"hello":null}', $f->eval(|toVariant(newMap(pair('hello', []->toVariant()))))->toString());
}