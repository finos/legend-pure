// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::variant::*;
import meta::pure::functions::variant::convert::*;

native function
    <<PCT.function>>
    {
        doc.doc='Converts the given value to its variant representation.'
    }
meta::pure::functions::variant::convert::toVariant(value: Any[*]): Variant[1];

function <<test.Test>> meta::pure::functions::variant::convert::tests::toVariant::testEmpty():Boolean[1]
{
    assertEquals('null', toVariant([])->toString());
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::toVariant::testInteger():Boolean[1]
{
    assertEquals('1', toVariant(1)->toString());
    assertEquals('[1,2,3]', toVariant([1, 2, 3])->toString());
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::toVariant::testFloat():Boolean[1]
{
    assertEquals('1.25', toVariant(1.25)->toString());
    assertEquals('[1.25,2.5,3.75]', toVariant([1.25, 2.5, 3.75])->toString());
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::tovariant::convert::teststring():Boolean[1]
{
    assertEquals('"Hello"', toVariant('Hello')->toString());
    assertEquals('["Hello","World"]', toVariant(['Hello', 'World'])->toString());
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::toVariant::testList():Boolean[1]
{
    assertEquals('[1,2,3]', toVariant(list([1,2,3]))->toString());
    assertEquals('[1,2,3]', toVariant(list([1,2,3]->map(x | $x->toVariant())))->toString());
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::toVariant::testMap():Boolean[1]
{
    assertEquals('{"hello":1}', toVariant(newMap(pair('hello', 1)))->toString());
    assertEquals('{"hello":null}', toVariant(newMap(pair('hello', []->toVariant())))->toString());
}