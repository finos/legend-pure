// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;
import meta::pure::metamodel::variant::*;
import meta::pure::functions::variant::convert::*;

native function
    <<PCT.function>>
    {
        doc.doc='Converts the $variant to the given $type.\n' +
                 'This allows to extract the variant actual value, like primitives.\n' +
                 'This will fail if value cannot be coerced.'
    }
meta::pure::functions::variant::convert::to<T>(variant: Variant[0..1], type: T[1]): T[0..1];

// todo convert to PCT...

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToNull():Boolean[1]
{
    assertEquals([], fromJson('null')->to(@Integer));
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToInteger():Boolean[1]
{
    assertEquals(1, fromJson('1')->to(@Integer));
    assertEquals(1, fromJson('"1"')->to(@Integer));
    assertError(|fromJson('1.25')->to(@Integer), 'Variant of type \'NUMBER\' cannot be converted to Integer');
    assertError(|fromJson('"1.25"')->to(@Integer), 'For input string: "1.25"');
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToFloat():Boolean[1]
{
    assertEquals(1.0, fromJson('1')->to(@Float));
    assertEquals(1.25, fromJson('1.25')->to(@Float));
    assertEquals(1.25, fromJson('"1.25"')->to(@Float));
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToBoolean():Boolean[1]
{
    assertEquals(true, fromJson('true')->to(@Boolean));
    assertEquals(false, fromJson('false')->to(@Boolean));
    assertEquals(false, fromJson('"false"')->to(@Boolean));
    assertError(|fromJson('"hello"')->to(@Boolean), 'Invalid Pure Boolean: \'hello\'');
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToStrictDate():Boolean[1]
{
    assertEquals(%2020-01-01, fromJson('"2020-01-01"')->to(@StrictDate));
    assertError(|fromJson('"2020"')->to(@StrictDate), 'StrictDate must be a calendar day, got: 2020');
    assertError(|fromJson('"2020-01"')->to(@StrictDate), 'StrictDate must be a calendar day, got: 2020-01');
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToDateTime():Boolean[1]
{
    assertEquals(%2020-01-01T01:01:00.000, fromJson('"2020-01-01T01:01:00.000"')->to(@DateTime));
    assertError(|fromJson('"2020"')->to(@DateTime), 'DateTime must include time information, got: 2020');
    assertError(|fromJson('"2020-01-01"')->to(@DateTime), 'DateTime must include time information, got: 2020-01-01');
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToString():Boolean[1]
{
    assertEquals('1', fromJson('1')->to(@String));
    assertEquals('1.25', fromJson('1.25')->to(@String));
    assertEquals('Hello', fromJson('"Hello"')->to(@String));
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToMap():Boolean[1]
{
    let mapToVariant = fromJson('{"hello":1}')->to(@Map<String, Variant>)->toOne();
    assertEquals(1, $mapToVariant->get('hello')->toOne()->to(@Integer));

    let mapToInteger = fromJson('{"hello":1}')->to(@Map<String, Integer>)->toOne();
    assertEquals(1, $mapToInteger->get('hello')->toOne());

    assertError(|fromJson('"not an object"')->to(@Map<String, Variant>), 'Variant of type \'STRING\' cannot be converted to Map<String, Variant>');
    assertError(|fromJson('{}')->to(@Map<Integer, Variant>), 'Variant of type \'OBJECT\' cannot be converted to Map<Integer, Variant>');
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToList():Boolean[1]
{
    let listVariant = fromJson('[1, 2, 3]')->to(@List<Variant>);
    assertEquals(1, $listVariant.values->at(0)->to(@Integer));
    assertEquals(2, $listVariant.values->at(1)->to(@Integer));
    assertEquals(3, $listVariant.values->at(2)->to(@Integer));

    let listInteger = fromJson('[1, 2, 3]')->to(@List<Integer>);
    assertEquals(1, $listInteger.values->at(0));
    assertEquals(2, $listInteger.values->at(1));
    assertEquals(3, $listInteger.values->at(2));

    assertError(|fromJson('"not an array"')->to(@List<Variant>), 'Variant of type \'STRING\' cannot be converted to List<Variant>');
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToEnum():Boolean[1]
{
    assertError(|fromJson('"January"')->to(@meta::pure::functions::date::Month), 'Variant of type \'STRING\' cannot be converted to Month');
}

function <<test.Test>> meta::pure::functions::variant::convert::tests::to::testToAny():Boolean[1]
{
    assertError(|fromJson('"hello"')->to(@Any), 'Variant of type \'STRING\' cannot be converted to Any');
}