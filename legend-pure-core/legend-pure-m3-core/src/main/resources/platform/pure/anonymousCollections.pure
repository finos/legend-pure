// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// Need it here because used in the relational parser
Class meta::pure::functions::collection::Pair<U,V>
{
   <<equality.Key>> first : U[1];
   <<equality.Key>> second : V[1];
   toString()
   {
        ['<', $this.first->toString(), ', ', $this.second->toString(), '>']->joinStrings('', '', '');
   }:String[1];
}

// Need it here because used in the relational parser
Class meta::pure::functions::collection::TreeNode
{
   childrenData : TreeNode[*];
}

Class meta::pure::functions::collection::List<T>
{
    <<equality.Key>> values : T[*];
    toString()
    {
        $this.values->map(value | $value->toString())->joinStrings('[', ', ', ']')
    }:String[1];
}


// Here in order to simplify function refactoring
Class meta::pure::functions::collection::Map<U,V>
{
//   _values : Pair<U,V>[*];
//   _func : Function<{U[1],U[1]->Boolean[1]}>[0..1];
}