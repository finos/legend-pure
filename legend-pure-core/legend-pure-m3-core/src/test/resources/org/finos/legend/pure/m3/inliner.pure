// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

Class Vars
{
    values : IdValue[*];
    expressions : ValueSpecification[*];
}

Class IdValue
{
    id : String[1];
    value : ValueSpecification[1];
}

function flattenFunction(functionDefinition:FunctionDefinition<Any>[1]):FunctionDefinition<Any>[1]
{
    flattenFunctionWithAccumulator($functionDefinition, ^Vars());
}

function flattenFunctionWithAccumulator(functionDefinition:FunctionDefinition<Any>[1], vars:Vars[1]):FunctionDefinition<Any>[1]
{
    let newVars = $functionDefinition.expressionSequence->fold(
                                            {
                                                vs:ValueSpecification[1], accumulator:Vars[1]|
                                                    $vs->match  (
                                                                    [
                                                                        f:FunctionExpression[1]| if (
                                                                                                        $f.functionName=='letFunction',
                                                                                                        |^$accumulator(values+=^IdValue(id=$f.parametersValues->at(0)->cast(@InstanceValue).values->at(0)->cast(@String), value=$f.parametersValues->at(1)));,
                                                                                                        |^$accumulator(expressions+=reprocessFunctionExpression($f, $accumulator))
                                                                                                    );,
                                                                        a:Any[1]|$accumulator
                                                                    ]
                                                                )
                                            }
                                            , $vars
                                        );
    ^$functionDefinition(expressionSequence = $newVars.expressions->toOneMany());
}

function reprocessFunctionExpression(f:FunctionExpression[1], vars:Vars[1]):FunctionExpression[1]
{
    let newParametersValues = $f.parametersValues->map(vs:ValueSpecification[1]|
                                                                $vs->match([
                                                                                v:VariableExpression[1]| let res = lookup($vars.values, 'id', $v.name); if($res->size() == 0,|$v,|$res->at(0).value);,
                                                                                varF:FunctionExpression[1]|reprocessFunctionExpression($varF, $vars),
                                                                                varF:InstanceValue[1]| $varF.values->at(0)->match(
                                                                                                                                    [
                                                                                                                                        fun:FunctionDefinition<Any>[1]|^InstanceValue(genericType = ^GenericType(rawType=meta::pure::metamodel::function::FunctionDefinition, typeArguments=^GenericType(rawType = meta::pure::metamodel::type::Any)), values = flattenFunctionWithAccumulator($fun, $vars), multiplicity = meta::pure::metamodel::multiplicity::PureOne),
                                                                                                                                        a:Any[1]|$varF
                                                                                                                                    ]
                                                                                                                                ),
                                                                                a:Any[1]|$vs
                                                                           ])
                                                           );
    ^$f(parametersValues=$newParametersValues);
}