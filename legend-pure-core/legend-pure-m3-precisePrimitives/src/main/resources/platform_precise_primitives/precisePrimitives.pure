###Pure
import meta::pure::precisePrimitives::*;

Primitive meta::pure::precisePrimitives::TinyInt extends Integer
[
  $this >= -pow(2,7) && ($this < pow(2,7))
]

Primitive meta::pure::precisePrimitives::UTinyInt extends Integer
[
  $this < pow(2,8)
]

Primitive meta::pure::precisePrimitives::SmallInt extends Integer
[
  $this >= -pow(2,15) && ($this < pow(2,15))
]

Primitive meta::pure::precisePrimitives::USmallInt extends Integer
[
  $this < pow(2,16)
]

Primitive meta::pure::precisePrimitives::Int extends Integer
[
  $this >= -pow(2,31) && ($this < pow(2,31))
]

Primitive meta::pure::precisePrimitives::UInt extends Integer
[
  $this < pow(2,32)
]

Primitive meta::pure::precisePrimitives::BigInt extends Integer
[
  $this >= -pow(2,63) && ($this < pow(2,63))
]

Primitive meta::pure::precisePrimitives::UBigInt extends Integer
[
  $this < pow(2,64)
]

Primitive meta::pure::precisePrimitives::Varchar(x:Integer[1]) extends String
[
  $this->length() <= $x
]

// Use StrictTime
//Primitive meta::pure::precisePrimitives::Time extends StrictTime

// Use StrictDate
//Primitive meta::pure::precisePrimitives::Date extends StrictDate

Primitive meta::pure::precisePrimitives::Timestamp extends DateTime

Primitive meta::pure::precisePrimitives::Float4 extends Float

Primitive meta::pure::precisePrimitives::Double extends Float

Primitive meta::pure::precisePrimitives::Numeric(x:Integer[1], y:Integer[1]) extends Decimal
[
  $this->floor()->toString()->length() <= $x && ($this->fractionDigits()->toString()->length()-2 <= $y)
]

function meta::pure::precisePrimitives::fractionDigits(x:Decimal[1]):Decimal[1]
{
  let val = $x - $x->floor();
  $val->toDecimal();
}
