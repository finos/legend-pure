// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::shared::*;
import meta::external::shared::generation::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::format::metamodel::toString::*;
import meta::external::shared::format::utils::*;
import meta::external::format::flatdata::metamodel::*;
import meta::external::format::flatdata::binding::toPure::*;
import meta::json::*;
import meta::pure::functions::collection::*;
import meta::pure::functions::meta::*;
import meta::pure::functions::tests::collection::*;
import meta::pure::graphFetch::*;
import meta::pure::metamodel::serialization::grammar::*;
import meta::xml::metamodel::*;

/// ========================================================================================================================================================
// Entry points 
// ========================================================================================================================================================

Class meta::external::format::flatdata::binding::toPure::FlatDataToModelConfiguration extends meta::external::shared::format::binding::toPure::SchemaToModelConfiguration
{
   purifyNames: Boolean[1];
}

function meta::external::format::flatdata::binding::toPure::flatDataToPure(schema:Schema[1], config:FlatDataToModelConfiguration[1]): SchemaBinding[1]
{
   flatDataToPure($schema, $config, noDebug());
}

function meta::external::format::flatdata::binding::toPure::flatDataToPureWithDebug(schema:Schema[1], config:FlatDataToModelConfiguration[1]): SchemaBinding[1]
{
   flatDataToPure($schema, $config, debug());
}

function meta::external::format::flatdata::binding::toPure::flatDataToPure(schema:Schema[1], config:FlatDataToModelConfiguration[1], debug:DebugContext[1]): SchemaBinding[1]
{
   let context           = createGenerationContext($schema, $config);
   let generatedElements = generate($context, $debug);
   let result            = createOperation($generatedElements, $context);
   
   $debug->log(|'\nGenerated the following:\n\n'+$result->bindingToString()+'\n\n'+$result->modelToString());
   $result;
}

// ========================================================================================================================================================
// GenerationContext
// ========================================================================================================================================================

Class <<access.private>> meta::external::format::flatdata::binding::toPure::GenerationContext
{
   config  : FlatDataToModelConfiguration[1];
   schema  : Schema[1];

   flatData() {$this.schema.detail->cast(@FlatData)}: FlatData[1];
   package()  {if($this.config.targetPackage->endsWith('::'), |$this.config.targetPackage, |$this.config.targetPackage+'::')}: String[1];
}

function <<access.private>> meta::external::format::flatdata::binding::toPure::createGenerationContext(schema:Schema[1], config:FlatDataToModelConfiguration[1]): GenerationContext[1]
{
   let context = ^GenerationContext(
      config = $config, 
      schema = $schema
   );
}

// ========================================================================================================================================================
// generation
// ========================================================================================================================================================

function <<access.private>> meta::external::format::flatdata::binding::toPure::generate(context:GenerationContext[1], debug:DebugContext[1]): PackageableElement[*]
{
   let withRecords = $context.flatData.sections->filter(s| $s.recordType->isNotEmpty());
   assert($withRecords->size() == 1, |'Only single record types supported');
   let section = $withRecords->toOne();
   
   $debug->log(|'generate for section '+$section.name);
   let className      = $context.package + if($context.config.purifyNames, |$section.name->purifyClassName(), |$section.name);
   let cls            = newClass($className);   
   let clsGenericType = $cls.classifierGenericType->toOne().typeArguments->at(0);      
   let properties = $section.recordType.fields->map(f|
      let pName = if($context.config.purifyNames, |$f.label->purifyPropertyName(), |$f.label);
      let pType = $f.type->match([
         x:FlatDataString[1]   | String,
         x:FlatDataBoolean[1]  | Boolean,
         x:FlatDataInteger[1]  | Integer,
         x:FlatDataDecimal[1]  | Float,
         x:FlatDataDate[1]     | StrictDate,
         x:FlatDataDateTime[1] | DateTime
      ]);
      let pMult = if($f.type.optional,
                     | ZeroOne,
                     | PureOne
                  );
      newProperty($pName, $clsGenericType, ^GenericType(rawType=$pType), $pMult);
   );
   $cls->mutateAdd('properties', $properties);
}

function <<access.private>> meta::external::format::flatdata::binding::toPure::createOperation(model:PackageableElement[*], context:GenerationContext[1]): SchemaBinding[1]
{
   let sepPos  = $context.config.targetOperation->lastIndexOf('::');
   let pkgName = $context.config.targetOperation->substring(0, $sepPos);
   
   ^SchemaBinding(
      package = pathToPackage($pkgName, true),
      name    = $context.config.targetOperation->substring($sepPos+2),
      schema  = $context.schema, 
      model   = $model
   );
}


