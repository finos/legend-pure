// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::format::flatdata::executionPlan::test::*;
import meta::external::shared::format::executionPlan::test::*;
import meta::external::format::flatdata::metamodel::*;
import meta::external::shared::format::binding::*;
import meta::external::shared::format::executionPlan::*;
import meta::external::shared::format::metamodel::*;
import meta::external::shared::functions::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::model::unit::*;
import meta::pure::runtime::*;

Class meta::external::format::flatdata::executionPlan::test::Person
[
   $this.firstName->length() > 1
]
{
   firstName : String[1];
   lastName  : String[1];
}

function <<access.private>> meta::external::format::flatdata::executionPlan::test::getTestBinding():Binding[1]
{
   let schemaSet = ^SchemaSet(
      name    = 'TestSchema',
      package = meta::external::format::flatdata::executionPlan::test,
      format  = 'FlatData',
      schemas = ^Schema(
         id = 'default.flatdata',
         detail  = ^FlatData(
            sections = ^FlatDataSection(
               name              = 'Person',
               driverId          = 'DelimitedWithHeadings',
               sectionProperties = [
                  ^FlatDataProperty(name='scope.untilEof', value=true),
                  ^FlatDataProperty(name='delimiter', value=',') 
               ],
               recordType        = ^FlatDataRecordType(
                  fields = [
                     ^FlatDataRecordField(label='First Name', type=^FlatDataString(optional=false)),
                     ^FlatDataRecordField(label='Last Name',  type=^FlatDataString(optional=false))
                  ]
               )
            )
         )
      )
   );
   
   ^Binding(
      name        = 'TestBinding',
      package     = meta::external::format::flatdata::executionPlan::test,
      schemaSet   = $schemaSet,
      contentType = 'application/x.flatdata',
      modelUnit   = newModelUnit()->include(meta::external::format::flatdata::executionPlan::test::Person)
   );
}

function <<meta::pure::profiles::test.Test>> meta::external::format::flatdata::executionPlan::test::flatDataNodesChecked(): Boolean[1]
{
   let extensions = meta::external::shared::format::routerExtensions('externalFormat', meta::external::format::flatdata::flatDataFormatExtension());
   
   let binding = getTestBinding();
   
   let tree = #{meta::external::format::flatdata::executionPlan::test::Person {firstName, lastName}}#;

   let plan = executionPlan(
      |meta::external::format::flatdata::executionPlan::test::Person.all()->graphFetchChecked($tree)->externalize($binding),
      SelfMapping,
      ^Runtime(
         connections = ^ExternalFormatConnection(
            element        = $binding,
            externalSource = ^UrlStreamExternalSource(url = 'executor:default')
         )
      ),
      ^ExecutionContext(),
      $extensions,
      noDebug()
   );
   
   let planString = $plan->planToString(false, $extensions);
   
   let expected = 'FlatData_Serialize\n'+
                  '(\n'+
                  '  type = String\n'+
                  '  resultSizeRange = 1\n'+
                  '  checked = true\n'+
                  '  binding = meta::external::format::flatdata::executionPlan::test::TestBinding\n'+
                  '\n'+
                  '  (\n'+
                  '    GlobalGraphFetch\n'+
                  '    (\n'+
                  '      type = PartialClass[Person:impls=[(meta::external::format::flatdata::executionPlan::test::Person | SelfMapping.meta_external_format_flatdata_executionPlan_test_Person)], propertiesWithParameters = [firstName, lastName]]\n'+
                  '      resultSizeRange = *\n'+
                  '      store = MODEL\n'+
                  '      localGraphFetchExecutionNode = \n'+
                  '         InMemoryRootGraphFetch\n'+
                  '         (\n'+
                  '           type = PartialClass[Person:impls=[(meta::external::format::flatdata::executionPlan::test::Person | SelfMapping.meta_external_format_flatdata_executionPlan_test_Person)], propertiesWithParameters = [firstName, lastName]]\n'+
                  '           graphFetchTree = [meta_external_format_flatdata_executionPlan_test_Person/meta::external::format::flatdata::executionPlan::test::Person]{@(meta_external_format_flatdata_executionPlan_test_Person->)@[/firstName],@(meta_external_format_flatdata_executionPlan_test_Person->)@[/lastName]}\n'+
                  '           nodeIndex = 0\n'+
                  '           batchSize = 1\n'+
                  '           checked = true\n'+
                  '           (\n'+
                  '             DataQuality\n'+
                  '             (\n'+
                  '               type = PartialClass[Person:impls=[], propertiesWithParameters = [firstName, lastName]]\n'+
                  '               resultSizeRange = *\n'+
                  '               enableConstraints = true\n'+
                  '               checked = true\n'+
                  '\n'+
                  '               (\n'+
                  '                 FlatData_Deserialize\n'+
                  '                 (\n'+
                  '                   type = PartialClass[Person:impls=[], propertiesWithParameters = [firstName, lastName]]\n'+
                  '                   resultSizeRange = *\n'+
                  '                   binding = meta::external::format::flatdata::executionPlan::test::TestBinding\n'+
                  '\n'+
                  '                   (\n'+
                  '                     UrlStream\n'+
                  '                     (\n'+
                  '                       type = String\n'+
                  '                       url = executor:default\n'+
                  '\n'+
                  '                     )\n'+
                  '                   )\n'+
                  '                 )\n'+
                  '               )\n'+
                  '             )\n'+
                  '           )\n'+
                  '           children = [\n'+
                  '              \n'+
                  '           ]\n'+
                  '         )\n'+
                  '      children = [\n'+
                  '         \n'+
                  '      ]\n'+
                  '    )\n'+
                  '  )\n'+
                  ')\n';

   assertEquals($expected, $planString);   
}

function <<meta::pure::profiles::test.Test>> meta::external::format::flatdata::executionPlan::test::planGenerationForInternalizeWithStringConstant(): Boolean[1]
{
   let extensions = meta::external::shared::format::routerExtensions('externalFormat', meta::external::format::flatdata::flatDataFormatExtension());
   let binding = getTestBinding();
   
   let plan = buildPlan({| $binding->internalize(meta::external::format::flatdata::executionPlan::test::Person, 'stringConstant')}, $extensions, true);
   let planString = $plan->planToString(false, $extensions);
   
   let expectedPlan = 'Internalize\n' +
                '(\n' +
                '  type = Class[Person:impls=]\n' +
                '  resultSizeRange = *\n' +
                '  binding = meta::external::format::flatdata::executionPlan::test::TestBinding[application/x.flatdata]\n' +
                '  enableConstraints = true\n' +
                '  checked = false\n' +
                '  dataSource = Data: stringConstant\n' +
                '  implementation\n' +
                '  (\n' +
                '    calls = _pure.plan.root.FlatDataDeserializeSpecifics\n' +
                '  )\n' +
                ')\n';
   
   assertEquals($expectedPlan, $planString); 
   
   let impl = $plan.globalImplementationSupport->toOne()->cast(@JavaPlatformImplementation);

   let allConstraintsSource = $impl.classes->filter(c| $c.name == 'meta_external_format_flatdata_executionPlan_test_Person_Impl').source->toOne();
   let expectedAllConstraintsMethod = '    public List<IDefect> allConstraints(GraphContext context)\n' +
                '    {\n' +
                '        List<IDefect> result = new ArrayList<IDefect>();\n' +
                '        if (!context.visited.contains(this))\n' +
                '        {\n' +
                '            context.visited.add(this);\n' +
                '            this.constraint_0().ifPresent(result::add);\n' +
                '        }\n' +
                '        return result;\n' +
                '    }';

   assert($allConstraintsSource->contains($expectedAllConstraintsMethod));  
}

###Mapping

import meta::external::format::flatdata::executionPlan::test::*;

Mapping meta::external::format::flatdata::executionPlan::test::SelfMapping
(
   Person: Pure
   {
      ~src Person
      
      firstName   : $src.firstName,
      lastName    : $src.lastName
   }
)