// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::avro::generation::*;
import meta::json::*;
import meta::external::avro::utils::*;

/* Create your own AVRO schema service if this one cannot fulfill your requirement */

function
{
service.url=  '/system/avro/classToAvroSchema/{versionedClassName}/{packageOverride}'
}
meta::external::avro::generation::versionedClassToAavroSchema(versionedClassName: String[1], packageOverride: String[1]): String[1]
{

   versionedClassToAavroSchema($versionedClassName, $packageOverride, true);
}

function <<access.protected>> meta::external::avro::generation::versionedClassToAavroSchema(versionedClassName: String[1], packageOverride: String[1], prettyJSON: Boolean[1]): String[1]
{
   let versionedClass = $versionedClassName->meta::pure::functions::meta::pathToElement()->cast(@Class<Any>);
   let package = $packageOverride->meta::pure::functions::meta::pathToElement()->cast(@Package);

   let namespace = $versionedClass.package->toOne()->elementToPath('.');
   let namespaceOverride = $package->elementToPath('.');

   let schemaInJSON = meta::external::avro::generation::classToAvroSchema($versionedClass, ^AvroConfig(namespaceOverride=[pair($namespace, $namespaceOverride)]->newMap()))->meta::external::avro::serialization::avroSchemaToJSON();

   if($prettyJSON, |$schemaInJSON->toPrettyJSONString(), |$schemaInJSON->toCompactJSONString());
}

