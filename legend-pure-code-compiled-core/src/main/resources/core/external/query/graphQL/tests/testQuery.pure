import meta::external::query::graphQL::transformation::queryToPure::tests::*;
import meta::external::query::graphQL::transformation::queryToPure::*;

Class meta::external::query::graphQL::transformation::queryToPure::tests::Firm
{
  legalName : String[1];
  employees : meta::external::query::graphQL::transformation::queryToPure::tests::Person[*];
}

Class meta::external::query::graphQL::transformation::queryToPure::tests::Person
{
  firstName : String[1];
  lastName : String[1];
}

Class meta::external::query::graphQL::transformation::queryToPure::tests::Domain extends meta::external::query::graphQL::introspection::BaseGraphQLType
{
  val : String[1];
  firmByLegalName(legalName : String[1]) 
  {
    Firm.all()->filter(f|$f.legalName == $legalName)->first()
  }: Firm[0..1];
  employeeByLastName(lastName : String[1])
  {
    Person.all()->filter(p|$p.lastName == $lastName)->first()
  }:Person[0..1];
}

function <<test.Test>> meta::external::query::graphQL::transformation::queryToPure::tests::reprocessGraphFetch():Boolean[1]
{
//  let tree = #{Domain{firmByLegalName('ork'){legalName}, employeeByLastName('yro'){firstName}}}#;
  let r = extractDomainTypeClassFromFunction(|Domain.all()->meta::pure::graphFetch::execution::graphFetch(#{Domain{firmByLegalName('ork'){legalName}, employeeByLastName('yro'){firstName}}}#)->meta::pure::graphFetch::execution::serialize(#{Domain{firmByLegalName('ork'){legalName}, employeeByLastName('yro'){firstName}}}#));
  assertEquals('firmByLegalName', $r->at(0).first);
  assertEquals(' | Class Firm.all() -> filter(f:meta::external::query::graphQL::transformation::queryToPure::tests::Firm[1] | $f.legalName == \'ork\';) -> first() -> graphFetch(meta::external::query::graphQL::transformation::queryToPure::tests::Firm {legalName}) -> serialize(meta::external::query::graphQL::transformation::queryToPure::tests::Firm {legalName});', $r->at(0).second->meta::pure::router::printer::asString());
  assertEquals('employeeByLastName', $r->at(1).first);
  assertEquals(' | Class Person.all() -> filter(p:meta::external::query::graphQL::transformation::queryToPure::tests::Person[1] | $p.lastName == \'yro\';) -> first() -> graphFetch(meta::external::query::graphQL::transformation::queryToPure::tests::Person {firstName}) -> serialize(meta::external::query::graphQL::transformation::queryToPure::tests::Person {firstName});', $r->at(1).second->meta::pure::router::printer::asString());
}