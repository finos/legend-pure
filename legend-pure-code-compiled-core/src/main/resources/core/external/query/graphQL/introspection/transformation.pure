import meta::external::query::graphQL::introspection::model::*;
import meta::external::query::graphQL::introspection::*;

Class meta::external::query::graphQL::introspection::BaseGraphQLType
{
  __schema : __Schema[1];
}

function meta::external::query::graphQL::introspection::graphQLIntrospectionQuery(cl:Class<Any>[1], query:meta::external::query::graphQL::metamodel::Document[1]):String[1]
{
  let fullTypeGraph = meta::external::query::graphQL::introspection::buildGraphQLSchemaFromPureClass($cl);
  let graphFetch = meta::external::query::graphQL::transformation::queryToPure::graphQLExecutableToPure($query, meta::external::query::graphQL::introspection::BaseGraphQLType);
  $fullTypeGraph->meta::json::toJSON($graphFetch, meta::json::config(false, false, false, false, true));
}

function <<access.private>> meta::external::query::graphQL::introspection::buildGraphQLSchemaFromPureClass(cl:Class<Any>[1]):BaseGraphQLType[1]
{  
  let classes = $cl->scanTypes([]);
  let res = transformPureToGraphQL($classes);

  ^BaseGraphQLType(
    __schema = ^__Schema(    
                  queryType = $res->filter(c|$c.name == $cl.name)->toOne(),
                  types = $res
                )
  );
}

function <<access.private>> meta::external::query::graphQL::introspection::transformPureToGraphQL(types:Type[*]):__Type[*]
{
  // PASS 1
  let res = $types->map(c|
    pair(
      $c.name->toOne(),
      ^__Type(
        kind = __TypeKind.OBJECT,
        name = $c.name
      )
    )
  )->concatenate(
    pair(
      'String',
      ^__Type(
        kind = __TypeKind.SCALAR,
        name = 'String'
      )
    )
  )->newMap();

  // PASS 2
  $types->map(c|
    let type = $res->get($c.name->toOne())->toOne();
    $c->match(
      [
        c:Class<Any>[1] |
            let fields = $c->allProperties()->map(p|
                                      ^__Field
                                      (
                                        name = $p.name->toOne(),
                                        isDeprecated = false,
                                        type = $res->get($p->functionReturnType().rawType.name->toOne())->toOne(),
                                        args = if ($p->instanceOf(QualifiedProperty),
                                                    |$p->functionType().parameters->evaluateAndDeactivate()->tail()->map(p|
                                                                    ^__InputValue
                                                                    (
                                                                      name=$p.name,
                                                                      type=$res->get($p.genericType.rawType.name->toOne())->toOne())
                                                                    ),
                                                    |[]
                                               )
                                      );
                                   );
            $type->mutateAdd('fields', $fields);
      ]
    );
    $type;
  );

  $res->values()->meta::pure::functions::collection::sortBy(t|$t.name->toOne());
}
