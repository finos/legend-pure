// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::java::generation::utils::*;
import meta::java::metamodel::*;
import meta::java::metamodel::factory::*;
import meta::java::serialization::*;

function meta::java::generation::utils::typesUsed(method: meta::java::metamodel::Method[*]):meta::java::metamodel::Type[*]
{
   $method.returnType->concatenate($method.parameters.type)->removeDuplicates();
}

function meta::java::generation::utils::typesToClasses(types: meta::java::metamodel::Type[*]):meta::java::metamodel::Class[*]
{
   $types->map(t |$t->typeToClasses())->removeDuplicates();
}

function meta::java::generation::utils::typeToClasses(type: meta::java::metamodel::Type[1]):meta::java::metamodel::Class[*]
{
   $type->match([
      c:meta::java::metamodel::Class[1]             | $c,
      p:meta::java::metamodel::ParameterizedType[1] | $p.rawType->typeToClasses()->concatenate($p.typeArguments->map(a|$a->typeToClasses())),
      v:meta::java::metamodel::TypeVariable[1]      | $v.bounds->map(a|$a->typeToClasses()),
      a:meta::java::metamodel::Array[1]             | $a.rawType->typeToClasses(),
      f:meta::java::metamodel::FunctionType[1]      | $f.returnType->typeToClasses()->concatenate($f.parameterTypes->map(p|$p->typeToClasses())),
      t:meta::java::metamodel::Type[1]              | []
   ])->removeDuplicates();        
}

function meta::java::generation::utils::elementTypeOfJavaArray(type: meta::java::metamodel::Type[1]):meta::java::metamodel::Type[1]
{
   assert($type->isJavaArray(), |'Cannot obtain element type as not an array');
   $type->cast(@meta::java::metamodel::Array).rawType;
}

function meta::java::generation::utils::isJavaArray(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->instanceOf(meta::java::metamodel::Array);
}

function meta::java::generation::utils::isJavaPrimitive(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->match([
      {pt: meta::java::metamodel::PrimitiveType[1] | true },
      {a :Any[1]                                   | false }
   ]);
}

function meta::java::generation::utils::isJavaList(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->match([
      {pt: meta::java::metamodel::ParameterizedType[1] | $pt.rawType->instanceOf(meta::java::metamodel::Class) && $pt.rawType->cast(@meta::java::metamodel::Class).simpleName == 'List' && $pt.rawType->isInPackage('java.util')},
      {a :Any[1]                                       | false }
   ]);
}

function meta::java::generation::utils::elementType(type: meta::java::metamodel::Type[1]):meta::java::metamodel::Type[1]
{
   $type->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(0);
}

function meta::java::generation::utils::elementTypeOfJavaList(type: meta::java::metamodel::Type[1]):meta::java::metamodel::Type[1]
{
   assert($type->isJavaList(), |'Cannot obtain element type as not a List');
   $type->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(0);
}

function meta::java::generation::utils::isJavaSupplier(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->match([
      {pt: meta::java::metamodel::ParameterizedType[1] | $pt.rawType->instanceOf(meta::java::metamodel::Class) && $pt.rawType->cast(@meta::java::metamodel::Class).simpleName == 'Supplier' && $pt.rawType->isInPackage('java.util.function')},
      {a :Any[1]                                       | false }
   ]);
}

function meta::java::generation::utils::isJavaFunction(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->match([
      {pt: meta::java::metamodel::ParameterizedType[1] | $pt.rawType->instanceOf(meta::java::metamodel::Class) && $pt.rawType->cast(@meta::java::metamodel::Class).simpleName == 'Function' && $pt.rawType->isInPackage('java.util.function')},
      {a :Any[1]                                       | false }
   ]);
}

function meta::java::generation::utils::suppliedTypeOfJavaSupplier(type: meta::java::metamodel::Type[1]):meta::java::metamodel::Type[1]
{
   assert($type->isJavaSupplier(), |'Cannot obtain supplied type as not a Supplier');
   $type->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(0);
}

function meta::java::generation::utils::returnTypeOfJavaFunction(type: meta::java::metamodel::Type[1]):meta::java::metamodel::Type[1]
{
   assert($type->isJavaFunction(), |'Cannot obtain supplied type as not a Function');
   $type->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(1);
}

function meta::java::generation::utils::inputTypeOfJavaFunction(type: meta::java::metamodel::Type[1]):meta::java::metamodel::Type[1]
{
   assert($type->isJavaFunction(), |'Cannot obtain supplied type as not a Function');
   $type->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(0);
}

function meta::java::generation::utils::isJavaStream(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->match([
      {pt: meta::java::metamodel::ParameterizedType[1] | $pt.rawType->instanceOf(meta::java::metamodel::Class) && $pt.rawType->cast(@meta::java::metamodel::Class).simpleName == 'Stream' && $pt.rawType->isInPackage('java.util.stream')},
      {a :Any[1]                                       | false }
   ]);
}

function meta::java::generation::utils::elementTypeOfJavaStream(type: meta::java::metamodel::Type[1]):meta::java::metamodel::Type[1]
{
   assert($type->isJavaStream(), |'Cannot obtain element type as not a Stream');
   $type->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(0);
}

function meta::java::generation::utils::isJavaOptional(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->match([
      {pt: meta::java::metamodel::ParameterizedType[1] | $pt.rawType->instanceOf(meta::java::metamodel::Class) && $pt.rawType->cast(@meta::java::metamodel::Class).simpleName == 'Optional' && $pt.rawType->isInPackage('java.util')},
      {a :Any[1]                                       | false }
   ]);
}

function meta::java::generation::utils::elementTypeOfJavaOptional(type: meta::java::metamodel::Type[1]):meta::java::metamodel::Type[1]
{
   assert($type->isJavaOptional(), |'Cannot obtain element type as not an Optional');
   $type->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(0);
}

function meta::java::generation::utils::isPrimitiveOrBoxedType(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->toOne()->match([
      pt: meta::java::metamodel::PrimitiveType[1] | true,
      c : meta::java::metamodel::Class[1]         | isBoxedType($c),
      a : Any[1]                                  | false
   ]);
}

function meta::java::generation::utils::isPrimitive(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->toOne()->match([
      pt: meta::java::metamodel::PrimitiveType[1] | true,
      a : Any[1]                                  | false
   ]);
}

function meta::java::generation::code::isPrimitiveNumber(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->isPrimitive() && ($type == javaInt() || $type == javaLong() || $type == javaShort() || $type == javaByte() || $type == javaFloat() || $type == javaDouble());
}

function meta::java::generation::code::isPrimitiveInt(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->isPrimitive() && $type == javaInt();
}

function meta::java::generation::code::isPrimitiveLong(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->isPrimitive() && $type == javaLong();
}

function meta::java::generation::utils::isBoxedType(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->instanceOf(meta::java::metamodel::Class) && $type->cast(@meta::java::metamodel::Class)->isBoxedType();
}

function meta::java::generation::utils::isBoxedType(class: meta::java::metamodel::Class[1]):Boolean[1]
{
   $class.simpleName->in(['Boolean', 'Byte', 'Character', 'Float', 'Integer', 'Long', 'Short', 'Double'])
      && $class.package.name == 'lang'
      && $class.package.parent->isNotEmpty()
      && $class.package.parent.name == 'java'
      && $class.package.parent.parent->isEmpty();
}

function meta::java::generation::utils::isBoxedNumberType(type: meta::java::metamodel::Type[1]):Boolean[1]
{
   $type->instanceOf(meta::java::metamodel::Class) && $type->cast(@meta::java::metamodel::Class)->isBoxedNumberType();
}

function meta::java::generation::utils::isBoxedNumberType(class: meta::java::metamodel::Class[1]):Boolean[1]
{
   $class.simpleName->in(['Byte', 'Float', 'Integer', 'Long', 'Short', 'Double', 'Number'])
      && $class.package.name == 'lang'
      && $class.package.parent->isNotEmpty()
      && $class.package.parent.name == 'java'
      && $class.package.parent.parent->isEmpty();
}

function meta::java::generation::utils::isInPackage(type: meta::java::metamodel::Type[1], packageName: String[1]):Boolean[1]
{
   let typeName = $type->typePathToString(true);
   let dotPos = $typeName->lastIndexOf('.');
   let pkgName = if($dotPos == -1, |'', |$typeName->substring(0, $dotPos));
   $packageName == $pkgName;
}

function meta::java::generation::utils::isStatic(method: meta::java::metamodel::Method[1]):Boolean[1]
{
   $method.modifiers->contains(meta::java::metamodel::Modifier.Static);
}

function meta::java::generation::utils::escapedString(in: String[1]):String[1]
{
   '"' +
      $in->replace('\\','\\\\')
         ->replace('"','\\"')
         ->replace('\b','\\b')
         ->replace('\f','\\f')
         ->replace('\n','\\n')
         ->replace('\r','\\r')
         ->replace('\t','\\t') +
   '"';
}

function meta::java::generation::utils::methodSignature(m: meta::java::metamodel::Method[1]): String[1]
{
   $m.name+'('+$m.parameters->map(p|$p.type->typePathToString(true))->makeString(',')+')';
}

function meta::java::generation::utils::javaKeywords(): String[*]
{
   [
      'abstract'  ,'continue'   ,'for'         ,'new'        ,'switch',
      'assert'    ,'default'    ,'if'          ,'package'    ,'synchronized',
      'boolean'   ,'do'         ,'goto'        ,'private'    ,'this',
      'break'     ,'double'     ,'implements'  ,'protected'  ,'throw',
      'byte'      ,'else'       ,'import'      ,'public'     ,'throws',
      'case'      ,'enum'       ,'instanceof'  ,'return'     ,'transient',
      'catch'     ,'extends'    ,'int'         ,'short'      ,'try',
      'char'      ,'final'      ,'interface'   ,'static'     ,'void',
      'class'     ,'finally'    ,'long'        ,'strictfp'   ,'volatile',
      'const'     ,'float'      ,'native'      ,'super'      ,'while'
   ];
}

function <<access.private>> meta::java::generation::convention::isValidPackageName(name: String[1]): Boolean[1]
{
   // TODO Enable once matches is fully available
   $name->split('.')->forAll(nm | /*$nm->matches('[_$a-zA-Z][_$a-zA-Z0-9]*') && */ !$nm->in(javaKeywords()));
}


Class meta::java::generation::utils::KnownPackage
{
   package: meta::java::metamodel::Package[1];
   classNames: String[*];
}

function meta::java::generation::utils::knownPackage(pkg: meta::java::metamodel::Package[1]): KnownPackage[1]
{
   let pkgName = $pkg->packageToString();

   if($pkg->instanceOf(KnownPackage),
      | $pkg->cast(@KnownPackage),
      |
   if($pkgName == 'java.lang',
      | javaLangPackage(),
      |
   if($pkgName == 'java.util',
      | javaUtilPackage(),
      |
   if($pkgName == 'java.util.function',
      | javaUtilFunctionPackage(),
      |
   if($pkgName == 'java.util.stream',
      | javaUtilStreamPackage(),
      |
   if($pkgName == 'java.io',
      | javaIoPackage(),
      |
   if($pkgName == 'java.net',
      | javaNetPackage(),
      |
   if($pkgName == 'java.math',
      | javaMathPackage(),
      |
   if($pkgName == 'java.time',
      | javaTimePackage(),
      | fail('Package ' + $pkgName + ' is not well known'); ^KnownPackage(package=javaPackage(''));
   )))))))));
}

function meta::java::generation::utils::javaLangPackage(): meta::java::generation::utils::KnownPackage[1]
{
   ^meta::java::generation::utils::KnownPackage(
      package    = javaPackage('java.lang'),
      classNames = [
         'AbstractMethodError',                  'Appendable',                           'ArithmeticException',                  'ArrayIndexOutOfBoundsException',
         'ArrayStoreException',                  'AssertionError',                       'AutoCloseable',                        'Boolean',
         'BootstrapMethodError',                 'Byte',                                 'Character',                            'Character.Subset',
         'Character.UnicodeBlock',               'Character.UnicodeScript',              'CharSequence',                         'Class',
         'ClassCastException',                   'ClassCircularityError',                'ClassFormatError',                     'ClassLoader',
         'ClassNotFoundException',               'ClassValue',                           'Cloneable',                            'CloneNotSupportedException',
         'Comparable',                           'Compiler',                             'Deprecated',                           'Double',
         'Enum',                                 'EnumConstantNotPresentException',      'Error',                                'Exception',
         'ExceptionInInitializerError',          'Float',                                'FunctionalInterface',                  'IllegalAccessError',
         'IllegalAccessException',               'IllegalArgumentException',             'IllegalMonitorStateException',         'IllegalStateException',
         'IllegalThreadStateException',          'IndexOutOfBoundsException',            'IncompatibleClassChangeError',         'InheritableThreadLocal',
         'InstantiationError',                   'InstantiationException',               'Integer',                              'InternalError',
         'InterruptedException',                 'Iterable',                             'LinkageError',                         'Long',
         'Math',                                 'NegativeArraySizeException',           'NoClassDefFoundError',                 'NoSuchFieldError',
         'NoSuchFieldException',                 'NoSuchMethodError',                    'NoSuchMethodException',                'NullPointerException',
         'Number',                               'NumberFormatException',                'Object',                               'OutOfMemoryError',
         'Override',                             'Package',                              'Process',                              'ProcessBuilder',
         'ProcessBuilder.Redirect',              'ProcessBuilder.Redirect.Type',         'Readable',                             'ReflectiveOperationException',
         'Runnable',                             'Runtime',                              'RuntimeException',                     'RuntimePermission',
         'SafeVarargs',                          'SecurityException',                    'SecurityManager',                      'Short',
         'StackOverflowError',                   'StackTraceElement',                    'StrictMath',                           'String',
         'StringBuffer',                         'StringBuilder',                        'StringIndexOutOfBoundsException',      'SuppressWarnings',
         'System',                               'Thread',                               'State',                                'UncaughtExceptionHandler',
         'ThreadDeath',                          'ThreadGroup',                          'ThreadLocal',                          'Throwable',
         'TypeNotPresentException',              'UnsatisfiedLinkError',                 'UnknownError',                         'UnsupportedClassVersionError',
         'UnsupportedOperationException',        'VerifyError',                          'VirtualMachineError',                  'Void'
      ]
   );
}

function meta::java::generation::utils::javaUtilPackage(): meta::java::generation::utils::KnownPackage[1]
{
   ^meta::java::generation::utils::KnownPackage(
      package    = javaPackage('java.util'),
      classNames = [
         'AbstractCollection',                   'AbstractList',                         'AbstractMap',                          'AbstractMap.SimpleEntry',
         'AbstractMap.SimpleImmutableEntry',     'AbstractQueue',                        'AbstractSequentialList',               'AbstractSet',
         'ArrayDeque',                           'ArrayList',                            'Arrays',                               'Base64',
         'Base64.Decoder',                       'Base64.Encoder',                       'BitSet',                               'Calendar',
         'Calendar.Builder',                     'Collection',                           'Collections',                          'Comparator',
         'ConcurrentModificationException',      'Currency',                             'Date',                                 'Deque',
         'Dictionary',                           'DoubleSummaryStatistics',              'DuplicateFormatFlagsException',        'EmptyStackException',
         'EnumMap',                              'EnumSet',                              'Enumeration',                          'EventListener',
         'EventListenerProxy',                   'EventObject',                          'FormatFlagsConversionMismatchException',
         'Formattable',                          'FormattableFlags',                     'Formatter',                            'Formatter.BigDecimalLayoutForm',
         'FormatterClosedException',             'GregorianCalendar',                    'HashMap',                              'HashSet',
         'Hashtable',                            'IdentityHashMap',                      'IllegalFormatCodePointException',      'IllegalFormatConversionException',
         'IllegalFormatException',               'IllegalFormatFlagsException',          'IllegalFormatPrecisionException',      'IllegalFormatWidthException',
         'IllformedLocaleException',             'InputMismatchException',               'IntSummaryStatistics',                 'InvalidPropertiesFormatException',
         'Iterator',                             'LinkedHashMap',                        'LinkedHashSet',                        'LinkedList',
         'List',                                 'ListIterator',                         'ListResourceBundle',                   'Locale',
         'Locale.Builder',                       'Locale.Category',                      'Locale.FilteringMode',                 'Locale.LanguageRange',
         'LongSummaryStatistics',                'Map',                                  'Map.Entry',                            'MissingFormatArgumentException',
         'MissingFormatWidthException',          'MissingResourceException',             'NavigableMap',                         'NavigableSet',
         'NoSuchElementException',               'Objects',                              'Observable',                           'Observer',
         'Optional',                             'OptionalDouble',                       'OptionalInt',                          'OptionalLong',
         'PrimitiveIterator',                    'PrimitiveIterator.OfDouble',           'PrimitiveIterator.OfInt',              'PrimitiveIterator.OfLong',
         'PriorityQueue',                        'Properties',                           'PropertyPermission',                   'PropertyResourceBundle',
         'Queue',                                'Random',                               'RandomAccess',                         'ResourceBundle',
         'ResourceBundle.Control',               'Scanner',                              'ServiceConfigurationError',            'ServiceLoader',
         'Set',                                  'SimpleTimeZone',                       'SortedMap',                            'SortedSet',
         'Spliterator',                          'Spliterator.OfDouble',                 'Spliterator.OfInt',                    'Spliterator.OfLong',
         'Spliterator.OfPrimitive',              'Spliterators',                         'Spliterators.AbstractDoubleSpliterator',
         'Spliterators.AbstractIntSpliterator',  'Spliterators.AbstractLongSpliterator', 'Spliterators.AbstractSpliterator',     'SplittableRandom',
         'Stack',                                'StringJoiner',                         'StringTokenizer',                      'TimeZone',
         'Timer',                                'TimerTask',                            'TooManyListenersException',            'TreeMap',
         'TreeSet',                              'UUID',                                 'UnknownFormatConversionException',     'UnknownFormatFlagsException',
         'Vector',                               'WeakHashMap'
      ]
   );
}

function meta::java::generation::utils::javaUtilFunctionPackage(): meta::java::generation::utils::KnownPackage[1]
{
   ^meta::java::generation::utils::KnownPackage(
      package    = javaPackage('java.util.function'),
      classNames = [
         'BiConsumer',                           'BiFunction',                           'BinaryOperator',                       'BiPredicate',
         'BooleanSupplier',                      'Consumer',                             'DoubleBinaryOperator',                 'DoubleConsumer',
         'DoubleFunction',                       'DoublePredicate',                      'DoubleSupplier',                       'DoubleToIntFunction',
         'DoubleToLongFunction',                 'DoubleUnaryOperator',                  'Function',                             'IntBinaryOperator',
         'IntConsumer',                          'IntFunction',                          'IntPredicate',                         'IntSupplier',
         'IntToDoubleFunction',                  'IntToLongFunction',                    'IntUnaryOperator',                     'LongBinaryOperator',
         'LongConsumer',                         'LongFunction',                         'LongPredicate',                        'LongSupplier',
         'LongToDoubleFunction',                 'LongToIntFunction',                    'LongUnaryOperator',                    'ObjDoubleConsumer',
         'ObjIntConsumer',                       'ObjLongConsumer',                      'Predicate',                            'Supplier',
         'ToDoubleBiFunction',                   'ToDoubleFunction',                     'ToIntBiFunction',                      'ToIntFunction',
         'ToLongBiFunction',                     'ToLongFunction',                       'UnaryOperator'
      ]
   );
}

function meta::java::generation::utils::javaUtilStreamPackage(): meta::java::generation::utils::KnownPackage[1]
{
   ^meta::java::generation::utils::KnownPackage(
      package    = javaPackage('java.util.stream'),
      classNames = [
         'BaseStream',                           'Collector',                            'Collector.Characteristics',            'Collectors',
         'DoubleStream',                         'DoubleStream.Builder',                 'IntStream',                            'IntStream.Builder',
         'LongStream',                           'LongStream.Builder',                   'Stream',                               'Stream.Builder',
         'StreamSupport'
      ]
   );
}

function meta::java::generation::utils::javaIoPackage(): meta::java::generation::utils::KnownPackage[1]
{
   ^meta::java::generation::utils::KnownPackage(
      package    = javaPackage('java.io'),
      classNames = [
         'BufferedInputStream',                  'BufferedOutputStream',                 'BufferedReader',                       'BufferedWriter',
         'ByteArrayInputStream',                 'ByteArrayOutputStream',                'CharArrayReader',                      'CharArrayWriter',
         'CharConversionException',              'Closeable',                            'Console',                              'DataInput',
         'DataInputStream',                      'DataOutput',                           'DataOutputStream',                     'EOFException',
         'Externalizable',                       'File',                                 'FileDescriptor',                       'FileFilter',
         'FileInputStream',                      'FilenameFilter',                       'FileNotFoundException',                'FileOutputStream',
         'FilePermission',                       'FileReader',                           'FileWriter',                           'FilterInputStream',
         'FilterOutputStream',                   'FilterReader',                         'FilterWriter',                         'Flushable',
         'InputStream',                          'InputStreamReader',                    'InterruptedIOException',               'InvalidClassException',
         'InvalidObjectException',               'IOError',                              'IOException',                          'LineNumberInputStream',
         'LineNumberReader',                     'NotActiveException',                   'NotSerializableException',             'ObjectInput',
         'ObjectInputStream',                    'ObjectInputStream.GetField',           'ObjectInputValidation',                'ObjectOutput',
         'ObjectOutputStream',                   'ObjectOutputStream.PutField',          'ObjectStreamClass',                    'ObjectStreamConstants',
         'ObjectStreamException',                'ObjectStreamField',                    'OptionalDataException',                'OutputStream',
         'OutputStreamWriter',                   'PipedInputStream',                     'PipedOutputStream',                    'PipedReader',
         'PipedWriter',                          'PrintStream',                          'PrintWriter',                          'PushbackInputStream',
         'PushbackReader',                       'RandomAccessFile',                     'Reader',                               'SequenceInputStream',
         'Serializable',                         'SerializablePermission',               'StreamCorruptedException',             'StreamTokenizer',
         'StringBufferInputStream',              'StringReader',                         'StringWriter',                         'SyncFailedException',
         'UncheckedIOException',                 'UnsupportedEncodingException',         'UTFDataFormatException',               'WriteAbortedException',
         'Writer'
      ]
   );
}

function meta::java::generation::utils::javaNetPackage(): meta::java::generation::utils::KnownPackage[1]
{
   ^meta::java::generation::utils::KnownPackage(
      package    = javaPackage('java.net'),
      classNames = [
         'Authenticator',                        'Authenticator.RequestorType',          'BindException',                        'CacheRequest',
         'CacheResponse',                        'ConnectException',                     'ContentHandler',                       'ContentHandlerFactory',
         'CookieHandler',                        'CookieManager',                        'CookiePolicy',                         'CookieStore',
         'DatagramPacket',                       'DatagramSocket',                       'DatagramSocketImpl',                   'DatagramSocketImplFactory',
         'FileNameMap',                          'HttpCookie',                           'HttpRetryException',                   'HttpURLConnection',
         'IDN',                                  'Inet4Address',                         'Inet6Address',                         'InetAddress',
         'InetSocketAddress',                    'InterfaceAddress',                     'JarURLConnection',                     'MalformedURLException',
         'MulticastSocket',                      'NetPermission',                        'NetworkInterface',                     'NoRouteToHostException',
         'PasswordAuthentication',               'PortUnreachableException',             'ProtocolException',                    'ProtocolFamily',
         'Proxy',                                'Proxy.Type',                           'ProxySelector',                        'ResponseCache',
         'SecureCacheResponse',                  'ServerSocket',                         'Socket',                               'SocketAddress',
         'SocketException',                      'SocketImpl',                           'SocketImplFactory',                    'SocketOption',
         'SocketOptions',                        'SocketPermission',                     'SocketTimeoutException',               'StandardProtocolFamily',
         'StandardSocketOptions',                'UnknownHostException',                 'UnknownServiceException',              'URI',
         'URISyntaxException',                   'URL',                                  'URLClassLoader',                       'URLConnection',
         'URLDecoder',                           'URLEncoder',                           'URLPermission',                        'URLStreamHandler',
         'URLStreamHandlerFactory'
      ]
   );
}

function meta::java::generation::utils::javaMathPackage(): meta::java::generation::utils::KnownPackage[1]
{
   ^meta::java::generation::utils::KnownPackage(
      package    = javaPackage('java.math'),
      classNames = [
         'BigDecimal',                           'BigInteger',                           'MathContext',                          'RoundingMode'
      ]
   );
}

function meta::java::generation::utils::javaTimePackage(): meta::java::generation::utils::KnownPackage[1]
{
   ^meta::java::generation::utils::KnownPackage(
      package    = javaPackage('java.time'),
      classNames = [
         'Clock',                                'DateTimeException',                    'DayOfWeek',                            'Duration',
         'Instant',                              'LocalDate',                            'LocalDateTime',                        'LocalTime',
         'Month',                                'MonthDay',                             'OffsetDateTime',                       'OffsetTime',
         'ZoneId',                                'ZoneOffset'
      ]
   );
}

function meta::java::generation::utils::apiKnowledge(from:meta::java::metamodel::Type[1]):meta::java::metamodel::Class[1]
{
   let inferFrom = $from->match([
      pt:meta::java::metamodel::ParameterizedType[1] | $pt->apiKnowledge(),
      cl:meta::java::metamodel::Class[1]             | $cl->apiKnowledge(),
      cl:meta::java::metamodel::Array[1]             | arrayKnowledge(),
      a :Any[1]                                      | javaObject()
   ])->addObjectMethods();
}

function meta::java::generation::utils::apiKnowledge(in:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   if($in.simpleName->endsWith('Exception'),
      | $in->addMethodIfMissing(javaMethod(javaString(), 'getMessage', [])),
      |
   if($in.package == javaPackage('java.lang'),
      | $in->smartJavaLang(),
      |
   if($in.package == javaPackage('java.math'),
      | $in->smartJavaMath(),
      |
   if($in.package == javaPackage('java.io'),
      | $in->smartJavaIO(),
      |
   if($in.package == javaPackage('java.net'),
      | $in->smartJavaNet(),
      |
   if($in.package == javaPackage('java.util.stream'),
      | $in->smartJavaUtilStream(),   
      | $in
   ))))));
}

function meta::java::generation::utils::apiKnowledge(in:meta::java::metamodel::ParameterizedType[1]): meta::java::metamodel::Class[1]
{
   $in.rawType->match([
      {cl:meta::java::metamodel::Class[1] |
         if($cl.package == javaPackage('java.util'),
            | $in->smartJavaUtil(),
            |
         if($cl.package == javaPackage('java.util.function'),
            | $in->smartJavaUtilFunction(),
            |
         if($cl.package == javaPackage('java.util.stream'),
            | $in->smartJavaUtilStream(),
            | $cl->apiKnowledge()
         )))
      },
      t:meta::java::metamodel::Type[1] | $t->apiKnowledge()
   ])
}

function <<access.private>> meta::java::generation::utils::arrayKnowledge(): meta::java::metamodel::Class[1]
{
   javaClass('java.lang._Array_')->addField(javaField([], javaInt(), 'length'));
}

function <<access.private>> meta::java::generation::utils::smartJavaMath(in:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   if($in.simpleName == 'BigDecimal',
      | $in->addMethodIfMissing(javaMethod(javaBigDecimal(),   'add',           [javaParam(javaBigDecimal(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'subtract',      [javaParam(javaBigDecimal(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'multiply',      [javaParam(javaBigDecimal(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'divide',        [javaParam(javaBigDecimal(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'divide',        [javaParam(javaBigDecimal(), 'x'), javaParam(javaInt(), 'y')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'divide',        [javaParam(javaBigDecimal(), 'x'), javaParam(javaRoundingMode(), 'y')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'negate',        []))
           ->addMethodIfMissing(javaMethod(javaInt(),          'compareTo',     [javaParam(javaBigDecimal(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'remainder',     [javaParam(javaBigDecimal(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'round',         [javaParam(javaMathContext(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'setScale',      [javaParam(javaInt(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'setScale',      [javaParam(javaInt(), 'x'), javaParam(javaInt(), 'y')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'setScale',      [javaParam(javaInt(), 'x'), javaParam(javaRoundingMode(), 'y')]))
           ->addMethodIfMissing(javaMethod(javaString(),       'toPlainString', []))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'valueOf',       [javaParam(javaLong(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBigDecimal(),   'valueOf',       [javaParam(javaDouble(), 'x')]))
           ->addNumberMethods(),
      | $in
   );
}

function <<access.private>> meta::java::generation::utils::smartJavaLang(in:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   if($in.simpleName == 'String',
      | $in->addMethodIfMissing(javaMethod(javaChar(),    'charAt',      [javaParam(javaInt(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBoolean(), 'contains',    [javaParam(javaString(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaInt(),     'compareTo',   [javaParam(javaString(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaBoolean(), 'endsWith',    [javaParam(javaString(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaInt(),     'indexOf',     [javaParam(javaString(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaInt(),     'length',      []))
           ->addMethodIfMissing(javaMethod(javaBoolean(), 'matches',     [javaParam(javaString(), 'str'), javaParam(javaString(), 'regexp')]))
           ->addMethodIfMissing(javaMethod(javaString(),  'replace',     [javaParam(javaString(), 'x'), javaParam(javaString(), 'y')]))
           ->addMethodIfMissing(javaMethod(javaString(),  'replaceAll',  [javaParam(javaString(), 'x'), javaParam(javaString(), 'y')]))
           ->addMethodIfMissing(javaMethod(javaBoolean(), 'startsWith',  [javaParam(javaString(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaString(),  'substring',   [javaParam(javaInt(), 'x')]))
           ->addMethodIfMissing(javaMethod(javaString(),  'substring',   [javaParam(javaInt(), 'x'), javaParam(javaInt(), 'y')]))
           ->addMethodIfMissing(javaMethod(javaString(),  'toLowerCase', []))
           ->addMethodIfMissing(javaMethod(javaString(),  'toUpperCase', []))
           ->addMethodIfMissing(javaMethod(javaString(),  'trim',        [])),
      |
   if($in.simpleName == 'Boolean',
      | $in->addMethodIfMissing(javaMethod(javaBoolean(), 'parseBoolean', javaParam(javaString(), 'x'))),
      |
   if($in.simpleName == 'Float',
      | $in->addMethodIfMissing(javaMethod(javaFloat(), 'parseFloat', javaParam(javaString(), 'x')))
           ->addMethodIfMissing(javaMethod(javaInt(),   'compareTo',  javaParam(javaFloat()->toBoxed(), 'x')))
           ->addNumberMethods(),
      |
   if($in.simpleName == 'Double',
      | $in->addMethodIfMissing(javaMethod('static', javaDouble(), 'parseDouble', javaParam(javaString(), 'x')))
           ->addMethodIfMissing(javaMethod(          javaInt(),    'compareTo',   javaParam(javaDouble()->toBoxed(), 'x')))
           ->addMethodIfMissing(javaMethod('static', javaInt(),    'compare',     [javaParam(javaDouble(), 'x'), javaParam(javaDouble(), 'y')]))
           ->addMethodIfMissing(javaMethod('static', javaDouble(), 'max',         [javaParam(javaDouble(), 'x'), javaParam(javaDouble(), 'y')]))
           ->addMethodIfMissing(javaMethod('static', javaDouble(), 'min',         [javaParam(javaDouble(), 'x'), javaParam(javaDouble(), 'y')]))
           ->addNumberMethods(),
      |
   if($in.simpleName == 'Integer',
      | $in->addMethod(javaMethod('static', javaInt(),      'parseInt',  javaParam(javaString(), 'x')))
           ->addMethod(javaMethod(          javaInt(),      'compareTo', javaParam(javaInt()->toBoxed(), 'x')))
           ->addMethod(javaMethod('static', javaIntBoxed(), 'valueOf',   javaParam(javaString(), 'x')))
           ->addNumberMethods(),
      |
   if($in.simpleName == 'Long',
      | $in->addMethodIfMissing(javaMethod('static', javaLong(),      'parseLong', javaParam(javaString(), 'x')))
           ->addMethodIfMissing(javaMethod(          javaInt(),       'compareTo', javaParam(javaLong()->toBoxed(), 'x')))
           ->addMethodIfMissing(javaMethod('static', javaLong(),      'max',       [javaParam(javaLong(), 'x'), javaParam(javaLong(), 'y')]))
           ->addMethodIfMissing(javaMethod('static', javaLong(),      'min',       [javaParam(javaLong(), 'x'), javaParam(javaLong(), 'y')]))
           ->addMethodIfMissing(javaMethod('static', javaLong(),      'sum',       [javaParam(javaLong(), 'x'), javaParam(javaLong(), 'y')]))
           ->addMethodIfMissing(javaMethod('static', javaLongBoxed(), 'valueOf',   javaParam(javaString(), 'x')))
           ->addNumberMethods(),
      |
   if($in.simpleName == 'Number',
      | $in->addNumberMethods(),
      |
   if($in.simpleName == 'StringBuilder',
      | $in->addMethodIfMissing(javaMethod(javaInt(),           'length',     []))
           ->addMethodIfMissing(javaMethod(javaStringBuilder(), 'append', javaParam(javaObject(), 'x')))
           ->addMethodIfMissing(javaMethod(javaChar(),          'charAt', javaParam(javaInt(), 'x'))),
      |
   if($in.simpleName == 'Class',
      | $in->addMethodIfMissing(javaMethod(javaString(),   'getName',       []))
           ->addMethodIfMissing(javaMethod(javaString(),   'getSimpleName', [])),
      | $in
   )))))))));
}

function <<access.private>> meta::java::generation::utils::addNumberMethods(num:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   $num->addMethodIfMissing(javaMethod(javaByte(),    'byteValue',   []))
       ->addMethodIfMissing(javaMethod(javaInt(),     'intValue',    []))
       ->addMethodIfMissing(javaMethod(javaLong(),    'longValue',   []))
       ->addMethodIfMissing(javaMethod(javaShort(),   'shortValue',  []))
       ->addMethodIfMissing(javaMethod(javaFloat(),   'floatValue',  []))
       ->addMethodIfMissing(javaMethod(javaDouble(),  'doubleValue', []));
}

function <<access.private>> meta::java::generation::utils::smartJavaIO(in:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   if($in.simpleName->endsWith('Reader'),
      | $in->addMethodIfMissing(javaMethod(javaInt(), 'read', []))
           ->addMethodIfMissing(javaMethod(javaInt(), 'read', [javaParam(javaArray(javaChar()), 'x')]))
           ->addMethodIfMissing(javaMethod(javaInt(), 'read', [javaParam(javaArray(javaChar()), 'x'), javaParam(javaInt(), 'y'), javaParam(javaInt(), 'z')]))
           ->addMethodIfMissing(javaMethod(javaInt(), 'read', [javaParam(javaClass('java.nio.CharBuffer'), 'x')])),
      |
   if($in.simpleName->endsWith('PrintStream'),
      | $in->addMethodIfMissing(javaMethod(javaVoid(), 'println', [])),
      | $in
   ));
}

function <<access.private>> meta::java::generation::utils::smartJavaNet(in:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   if($in.simpleName->endsWith('URL'),
      | $in->addMethodIfMissing(javaMethod(javaInputStream(), 'openStream', [])),
      | $in
   );
}

function <<access.private>> meta::java::generation::utils::smartJavaUtilStream(in:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{

   if($in.simpleName == 'LongStream',
      | $in->addMethodIfMissing(javaMethod(javaLongStream(), 'range',  [javaParam(javaLong(), 'startInclusive'), javaParam(javaLong(), 'endExclusive')]))
           ->addMethodIfMissing(javaMethod(javaLongStream(), 'filter', [javaParam(javaLongPredicate(), 'predicate')]))
           ->addMethodIfMissing(javaMethod(javaLongStream(), 'map',    [javaParam(javaLongUnaryOperator(), 'mapper')]))
           ->addMethodIfMissing(javaMethod(javaLongStream(), 'iterate',[javaParam(javaLong(), 'seed'), javaParam(javaLongUnaryOperator(), 'f')]))
           ->addMethodIfMissing(javaMethod(javaLongStream(), 'limit',  [javaParam(javaLong(), 'limit')]))
           ->addMethodIfMissing(javaMethod(javaStream(javaLong()), 'boxed', []));,
      | $in
   );
 
}

function <<access.private>> meta::java::generation::utils::smartJavaUtil(in:meta::java::metamodel::ParameterizedType[1]): meta::java::metamodel::Class[1]
{
   let class       = $in.rawType->cast(@meta::java::metamodel::Class);
   let elementType = $in.typeArguments->at(0);

   if($class.simpleName->in(['List','ArrayList']),
      | $class->addMethodIfMissing(javaMethod(javaBoolean(), 'add',     javaParam($elementType, 'x')))
              ->addMethodIfMissing(javaMethod($elementType,  'get',     javaParam(javaInt(), 'x')))
              ->addMethodIfMissing(javaMethod(javaInt(),     'indexOf', javaParam($elementType, 'x')))
              ->addMethodIfMissing(javaMethod(javaBoolean(), 'isEmpty', []))
              ->addCollectionMethods($elementType),
      |
   if($class.simpleName->in(['Map','TreeMap','HashMap']),
      {| 
         let keyType   = $in.typeArguments->at(0);
         let valueType = $in.typeArguments->at(1);
         $class->addMethodIfMissing(javaMethod($valueType,    'put',         [javaParam($keyType, 'x'), javaParam($valueType, 'y')]))
               ->addMethodIfMissing(javaMethod(javaBoolean(), 'containsKey', [javaParam($keyType, 'x')]))
               ->addMethodIfMissing(javaMethod($valueType,    'get',         [javaParam($keyType, 'x')]));
      },
      |
   if($class.simpleName == 'Queue',
      | $class->addMethodIfMissing(javaMethod(javaBoolean(), 'add',     javaParam($elementType, 'x')))
              ->addMethodIfMissing(javaMethod(javaBoolean(), 'offer',   javaParam($elementType, 'x')))
              ->addMethodIfMissing(javaMethod($elementType,  'peek',    []))
              ->addMethodIfMissing(javaMethod($elementType,  'poll',    []))
              ->addMethodIfMissing(javaMethod($elementType,  'element', []))
              ->addMethodIfMissing(javaMethod($elementType,  'remove',  []))
              ->addCollectionMethods($elementType),
      |
   if($class.simpleName == 'Iterator',
      | $class->addMethodIfMissing(javaMethod(javaBoolean(), 'hasNext', []))
              ->addMethodIfMissing(javaMethod($elementType,  'next',    [])),
      | $class
   ))));
}

function <<access.private>> meta::java::generation::utils::smartJavaUtilStream(in:meta::java::metamodel::ParameterizedType[1]): meta::java::metamodel::Class[1]
{
   let class       = $in.rawType->cast(@meta::java::metamodel::Class);
   let elementType = $in.typeArguments->at(0);

   if($class.simpleName == 'Stream',
      | $class->addMethodIfMissing(javaMethod(javaIterator($elementType),  'iterator',    [])),
      | $class
   );
}

function <<access.private>> meta::java::generation::utils::smartJavaUtilFunction(in:meta::java::metamodel::ParameterizedType[1]): meta::java::metamodel::Class[1]
{
   let class       = $in.rawType->cast(@meta::java::metamodel::Class);
   let elementType = $in.typeArguments->at(0);

   if($class.simpleName == 'Supplier',
      | $class->addMethodIfMissing(javaMethod($elementType,  'get',     [])),
      | $class
   );
}

function <<access.private>> meta::java::generation::utils::addCollectionMethods(col:meta::java::metamodel::Class[1], element:meta::java::metamodel::Type[1]): meta::java::metamodel::Class[1]
{
   $col->addMethodIfMissing(javaMethod(javaBoolean(),          'addAll',      javaParam(javaCollection($element), 'x')))
       ->addMethodIfMissing(javaMethod(javaBoolean(),          'contains',    javaParam($element, 'x')))
       ->addMethodIfMissing(javaMethod(javaBoolean(),          'containsAll', javaParam(javaCollection($element), 'x')))
       ->addMethodIfMissing(javaMethod(javaIterator($element), 'iterator',    []))
       ->addMethodIfMissing(javaMethod(javaInt(),              'size',        []));
}

function <<access.private>> meta::java::generation::utils::addObjectMethods(in:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   $in->addMethodIfMissing(javaMethod(javaClass('java.lang.Class'), 'getClass', [])->nonNull())
      ->addMethodIfMissing(javaMethod(javaString(),                 'toString', [])->nonNull())
      ->addMethodIfMissing(javaMethod(javaInt(),                    'hashCode', []))
      ->addMethodIfMissing(javaMethod(javaBoolean(),                'equals', javaParam(javaObject(), 'o')));
}

function meta::java::generation::utils::generateIfForCollection(emptyCase:String[1], singletonCase:String[1], nonEmptyCase:String[1]) : String[1]
{
   'if (in.isEmpty())\n'+
   '{\n'+
   '   ' + $emptyCase + '\n' +
   '}\n'+
   'else if (in.size() == 1)\n'+
   '{\n'+
   '   ' + $singletonCase + '\n'+
   '}\n'+
   'else\n'+
   '{\n'+
   '   ' + $nonEmptyCase + '\n'+
   '}'
}


