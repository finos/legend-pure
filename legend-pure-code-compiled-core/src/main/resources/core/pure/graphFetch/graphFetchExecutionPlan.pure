// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::flatData::runtime::*;
import meta::pure::dataQuality::*;
import meta::pure::graphFetch::*;
import meta::pure::store::*;
import meta::pure::router::extension::*;
import meta::pure::router::clustering::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::*;
import meta::pure::runtime::*;

Class <<doc.deprecated>> meta::pure::graphFetch::executionPlan::GraphFetchExecutionNode extends ExecutionNode
{
   graphFetchTree : ClusteredGraphFetchTree[1];
   rootExecutionNode : ExecutionNode[1];
   batchSize : Integer[0..1];
   globalGraphFetchExecutionNode : GlobalGraphFetchExecutionNode[1];
}

Class meta::pure::graphFetch::executionPlan::GlobalGraphFetchExecutionNode extends ExecutionNode
{
   graphFetchTree               : ClusteredGraphFetchTree[1];
   store                        : meta::pure::store::Store[1];
   children                     : GlobalGraphFetchExecutionNode[*];
   localGraphFetchExecutionNode : LocalGraphFetchExecutionNode[1];
   parentIndex                  : Integer[0..1];
   xStorePropertyMapping        : meta::pure::mapping::xStore::XStorePropertyMapping[0..1];
   enableConstraints            : Boolean[0..1];
   checked                      : Boolean[0..1];
}

Class meta::pure::graphFetch::executionPlan::LocalGraphFetchExecutionNode extends ExecutionNode
{
   nodeIndex      : Integer[1];
   parentIndex    : Integer[0..1];
   graphFetchTree : RoutedGraphFetchTree[1];
}

function meta::pure::graphFetch::executionPlan::planGraphFetchExecution(sq: StoreQuery[1], ext: RoutedValueSpecification[0..1], mapping: Mapping[1], runtime: Runtime[1], exeCtx: ExecutionContext[1], extensions: RouterExtension[*], debug: DebugContext[1]): ExecutionNode[1]
{
   let fe = $sq.fe->evaluateAndDeactivate();
   let resultSize = $fe.parametersValues->evaluateAndDeactivate()->at(0)->match([rvs:ExtendedRoutedValueSpecification[1] | $rvs.value.multiplicity->toOne(),
                                                                                          vs: ValueSpecification[1] | $fe.multiplicity->toOne()]);
   assert($fe.func->in(graphFetchFunctions()) || $fe->isUnionOnGraphFetch());
   
   let clusteredTree            = $fe.parametersValues->evaluateAndDeactivate()->at(1)->cast(@InstanceValue).values->at(0)->cast(@ClusteredGraphFetchTree);
   let orderedPaths             = $clusteredTree->getPathsOrdered();
   let clusterTreesWithParents  = $clusteredTree->findAllClusterTreesWithParents([]);
   let rootTree                 = $clusterTreesWithParents->filter(x | $x.second.values->isEmpty()).first->toOne();
   let rootTreeOneCluster       = $rootTree->recursivelyRemoveClusterTrees();

   let enableConstraints = $exeCtx.enableConstraints->isEmpty() || $exeCtx.enableConstraints->toOne();
   let checked           = $fe.genericType.rawType == Checked;

   let localRoot = $rootTree.store->match([
      model : ModelStore[1] | planRootGraphFetchExecutionInMemory($sq, $ext, $rootTreeOneCluster, $orderedPaths, $mapping, $runtime, $exeCtx, $enableConstraints, $checked, $extensions, $debug)
   ]->concatenate(
      $extensions.graphFetch_executionPlan_planGraphFetchExecution->map(f|$f->evaluate([list($sq), list($ext), list($rootTreeOneCluster), list($orderedPaths), list($mapping), list($runtime), list($exeCtx), list($enableConstraints), list($checked), list($extensions), list($debug)])->cast(@Function<{Nil[1]->LocalGraphFetchExecutionNode[1]}>))
   )->toOneMany());

   let rootGlobalNode = ^GlobalGraphFetchExecutionNode
                        (
                           resultType                   = $clusteredTree->resultTypeFromGraphFetchTree(),
                           resultSizeRange              = $resultSize,
                           graphFetchTree               = $clusteredTree,
                           store                        = $rootTree.store,
                           localGraphFetchExecutionNode = $localRoot,
                           enableConstraints            = $enableConstraints,
                           checked                      = $checked
                        );

   $rootGlobalNode->addCrossStoreChildren([], $rootTree, $orderedPaths, $clusterTreesWithParents, $sq.inScopeVars, $mapping, $runtime, $exeCtx, $extensions, $debug);
}

function <<access.private>> meta::pure::graphFetch::executionPlan::addCrossStoreChildren(currentNode: GlobalGraphFetchExecutionNode[1], parentPath: String[0..1], currentTree: ClusteredGraphFetchTree[1], orderedPaths: String[*], clusterNodesWithParents: Pair<ClusteredGraphFetchTree, List<RoutedGraphFetchTree>>[*], inScopeVars: Map<String, List<Any>>[1], m: Mapping[1], runtime: Runtime[1], exeCtx: ExecutionContext[1], extensions:RouterExtension[*], debug: DebugContext[1]):GlobalGraphFetchExecutionNode[1]
{
   let currentNonClusterTrees = $currentTree->recursivelyFindNonClusterTrees();
   let childrenClusterNodes = $clusterNodesWithParents->filter(x | $x.second.values->isNotEmpty() && $x.second.values->toOne()->in($currentNonClusterTrees));
   if($childrenClusterNodes->isEmpty(),
      | $currentNode,
      | let children = $childrenClusterNodes->map({ch |
           let childTreeOneCluster = $ch.first->recursivelyRemoveClusterTrees();
           let routedTree          = $childTreeOneCluster.tree->cast(@RoutedPropertyGraphFetchTree);
           let newParentPath       = if($parentPath->isEmpty(), 
                                        |$currentTree->toOne()->getPathTo($ch.first)->toOne(),
                                        |$parentPath->toOne()+'.'+$currentTree->getPathTo($ch.first)->toOne()
                                     );
           let crossLocalNode      = $ch.first.store->match($extensions.graphFetch_executionPlan_addCrossStoreChildren->map(f|$f->evaluate([list($childTreeOneCluster), list($orderedPaths), list($newParentPath), list($inScopeVars), list($m), list($runtime), list($exeCtx), list($extensions), list($debug)])->cast(@Function<{Nil[1]->LocalGraphFetchExecutionNode[1]}>))->toOneMany());
           let newCrossNode        = ^GlobalGraphFetchExecutionNode
                                     (
                                        resultType                   = $routedTree->resultTypeFromGraphFetchTree(),
                                        graphFetchTree               = $ch.first,
                                        parentIndex                  = $orderedPaths->indexOf($newParentPath),
                                        xStorePropertyMapping        = $routedTree.propertyMapping->toOne()->cast(@meta::pure::mapping::xStore::XStorePropertyMapping),
                                        store                        = $ch.first.store,
                                        localGraphFetchExecutionNode = $crossLocalNode
                                     );
         
           $newCrossNode->addCrossStoreChildren($newParentPath, $ch.first, $orderedPaths, $clusterNodesWithParents, $inScopeVars, $m, $runtime, $exeCtx, $extensions, $debug);
        });
      
        ^$currentNode(children = $children);
   );
}

function meta::pure::graphFetch::executionPlan::globalGraphFetchExecutionNodeToString(g: GlobalGraphFetchExecutionNode[1], space: String[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   'GlobalGraphFetch\n' + 
      $space + '(' + header($g, $space, $extensions) + '\n'+
      $space + '  store = ' + $g.store->elementToPath() + '\n'+
      $space + '  localGraphFetchExecutionNode = \n' + $space + '     ' + $g.localGraphFetchExecutionNode->localGraphFetchExecutionNodeToString($space + '     ', $extensions) +
      $space + '  children = ' + $g.children->map(x | globalGraphFetchExecutionNodeToString($x, $space + '     ', $extensions))->joinStrings('[\n'+ $space + '     ', '\n' + $space + '     ', '\n' + $space + '  ]\n') + 
      if($g.parentIndex->isEmpty(), | '', | $space + '  parentIndex = ' + $g.parentIndex->toOne()->toString() + '\n') +
      if($g.xStorePropertyMapping->isEmpty(), | '', | $space + '  xStorePropertyMapping = ' + $g.xStorePropertyMapping.property.name->toOne() + '[' + $g.xStorePropertyMapping.sourceSetImplementationId->toOne() + ' -> ' + $g.xStorePropertyMapping.targetSetImplementationId->toOne() + ']' + '\n') +
      $g.implementation->printImplementation('implementation', $space+'  ', $extensions)+
      $space + ')\n';
}

function meta::pure::graphFetch::executionPlan::localGraphFetchExecutionNodeToString(g: LocalGraphFetchExecutionNode[1], space: String[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   $g->match([
      i : InMemoryGraphFetchExecutionNode[1] | $i->inMemoryGraphFetchExecutionNodeToString($space, $extensions)
   ]->concatenate(
      $extensions.graphFetch_executionPlan_localGraphFetchExecutionNodeToString->map(f | $f->evaluate([list($space), list($extensions)])->cast(@Function<{Nil[1]->String[1]}>))
   )->toOneMany());
}

function meta::pure::graphFetch::executionPlan::resultTypeFromGraphFetchTree(g: GraphFetchTree[1]):PartialClassResultType[1]
{
   ^PartialClassResultType
    (
       type = $g->byPassClusteringInfo()->typeFromGraphFetchTree(),
       setImplementations = $g->byPassClusteringInfo()->cast(@RoutedGraphFetchTree).sets,
       propertiesWithParameters = $g->byPassClusteringInfo().subTrees->map(x | $x->byPassClusteringInfo()->cast(@PropertyGraphFetchTree)->map(x | ^PropertyWithParameters(property = $x.property, parameters = $x.parameters)))
    )
}

function <<access.private>> meta::pure::graphFetch::executionPlan::findAllClusterTreesWithParents(g : GraphFetchTree[1], parent : RoutedGraphFetchTree[0..1]):Pair<ClusteredGraphFetchTree, List<RoutedGraphFetchTree>>[*]
{
   let thisLevel = $g->match([
      c : ClusteredGraphFetchTree[1] | pair($c, list($parent)),
      r : RoutedGraphFetchTree[1] | []
   ]);
   let subClusterTrees = $g->byPassClusteringInfo().subTrees->map(k | $k->findAllClusterTreesWithParents($g->byPassClusteringInfo()->cast(@RoutedGraphFetchTree)));
   $thisLevel->concatenate($subClusterTrees);
}

function <<access.private>> meta::pure::graphFetch::executionPlan::recursivelyFindNonClusterTrees(cls : ClusteredGraphFetchTree[1]):RoutedGraphFetchTree[*]
{
   $cls.tree->cast(@RoutedGraphFetchTree)->recursivelyFindNonClusterTrees()
}

function <<access.private>> meta::pure::graphFetch::executionPlan::recursivelyFindNonClusterTrees(routed : RoutedGraphFetchTree[1]):RoutedGraphFetchTree[*]
{
   $routed->concatenate($routed.subTrees->filter(x | !$x->instanceOf(ClusteredGraphFetchTree))->cast(@RoutedGraphFetchTree)->map(x | $x->recursivelyFindNonClusterTrees()))
}

function <<access.private>> meta::pure::graphFetch::executionPlan::recursivelyRemoveClusterTrees(cls : ClusteredGraphFetchTree[1]):ClusteredGraphFetchTree[1]
{
   ^$cls(tree  = $cls.tree->cast(@RoutedGraphFetchTree)->recursivelyRemoveClusterTrees())
}

function <<access.private>> meta::pure::graphFetch::executionPlan::recursivelyRemoveClusterTrees(routed : RoutedGraphFetchTree[1]):RoutedGraphFetchTree[1]
{
   ^$routed(subTrees = $routed.subTrees->filter(x | !$x->instanceOf(ClusteredGraphFetchTree))->cast(@RoutedGraphFetchTree)->map(x | $x->recursivelyRemoveClusterTrees()))
}
