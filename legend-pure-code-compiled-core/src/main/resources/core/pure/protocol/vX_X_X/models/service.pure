// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

###Pure
import meta::protocols::*;
Class meta::protocols::pure::vX_X_X::metamodel::service::Service extends meta::protocols::pure::vX_X_X::metamodel::PackageableElement
[
   multiExecutionKeyMustBePartOfPattern: if($this.execution->instanceOf(meta::protocols::pure::vX_X_X::metamodel::service::PureMultiExecution),|$this.pattern->contains('{'+ $this.execution->cast(@meta::protocols::pure::vX_X_X::metamodel::service::PureMultiExecution).executionKey+'}'),|true),

   executionAndTestTypesMatch: if($this.execution->instanceOf(meta::protocols::pure::vX_X_X::metamodel::service::PureMultiExecution),
                                  | assert($this.test->instanceOf(meta::protocols::pure::vX_X_X::metamodel::service::MultiExecutionTest),'Service with multiple executions requires a MultiExecution test'),
                                  |if($this.execution->instanceOf(meta::protocols::pure::vX_X_X::metamodel::service::PureSingleExecution),
                                      |assert($this.test->instanceOf(meta::protocols::pure::vX_X_X::metamodel::service::SingleExecutionTest),'Service with a single execution requires a SingleExecution test'),
                                      |true)
                                  )
]
{
   pattern : String[1];
   owners : String[*];
   documentation : String[1];
   autoActivateUpdates : Boolean[1];
   execution : meta::protocols::pure::vX_X_X::metamodel::service::Execution[1];
   test : meta::protocols::pure::vX_X_X::metamodel::service::Test[1];
   tags: meta::protocols::pure::vX_X_X::metamodel::service::ServiceTag[*];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::ServiceTag
{
   name: String[1];
   value: String[1];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::Execution
{
   _type : String[1];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::PureExecution extends meta::protocols::pure::vX_X_X::metamodel::service::Execution
{
  func : meta::protocols::pure::vX_X_X::metamodel::valueSpecification::raw::Lambda[1];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::PureSingleExecution extends meta::protocols::pure::vX_X_X::metamodel::service::PureExecution
{
   mapping : String[1];
   runtime : meta::protocols::pure::vX_X_X::metamodel::Runtime[1];
}

Class  meta::protocols::pure::vX_X_X::metamodel::service::Test
{
   _type : String[0..1];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::SingleExecutionTest extends meta::protocols::pure::vX_X_X::metamodel::service::Test
{
   data : String[1];
   asserts : meta::protocols::pure::vX_X_X::metamodel::service::TestContainer[1..*];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::TestContainer
{
   parametersValues : meta::protocols::pure::vX_X_X::metamodel::valueSpecification::ValueSpecification[*];
   assert : meta::protocols::pure::vX_X_X::metamodel::valueSpecification::raw::Lambda[1];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::PureMultiExecution extends meta::protocols::pure::vX_X_X::metamodel::service::PureExecution
{
   executionKey: String[1];
   executionParameters : meta::protocols::pure::vX_X_X::metamodel::service::KeyedExecutionParameter[*];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::KeyedExecutionParameter
{
   key: String[1];
   mapping : String[1];
   runtime : meta::protocols::pure::vX_X_X::metamodel::Runtime[1];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::MultiExecutionTest extends meta::protocols::pure::vX_X_X::metamodel::service::Test
{
   tests: meta::protocols::pure::vX_X_X::metamodel::service::KeyedSingleExecutionTest[*];
}

Class meta::protocols::pure::vX_X_X::metamodel::service::KeyedSingleExecutionTest
{
   key:String[1];
   data: String[1];
   asserts: meta::protocols::pure::vX_X_X::metamodel::service::TestContainer[1..*];
}