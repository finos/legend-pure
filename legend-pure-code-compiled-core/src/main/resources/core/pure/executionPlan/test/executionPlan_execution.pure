function <<meta::pure::profiles::test.Test>> meta::pure::executionPlan::tests::testAllNodesForGraphNode() : Boolean[1]
{
   let sysMapping = ^meta::pure::router::systemMapping::SystemMapping(
      executeFunctionAsString='',
      supportsFunctionAsString='',
      planExecutionAsString='',
      localGetterOverrideMappedAsString='',
      localGetterOverrideNonMappedAsString=''
   );
   
   let tree = ^meta::pure::graphFetch::GraphFetchTree();
   let routedTree = ^meta::pure::graphFetch::routing::RoutedGraphFetchTree();
   let clusteredTree = ^meta::pure::graphFetch::routing::ClusteredGraphFetchTree(openVars = []->cast(@Pair<String, List<Any>>)->newMap(), s = $sysMapping, tree = $routedTree, store = ^meta::pure::store::Store());

   let voidResultType = ^meta::pure::executionPlan::VoidResultType(type = Any);
   let dummyNode = ^meta::pure::executionPlan::ExecutionNode(resultType = $voidResultType);
   
   let localGraphNode = ^meta::pure::graphFetch::executionPlan::LocalGraphFetchExecutionNode(graphFetchTree = $routedTree, resultType = $voidResultType, nodeIndex = 0);
   let gobalGraphNode =  ^meta::pure::graphFetch::executionPlan::GlobalGraphFetchExecutionNode(store = ^meta::pure::store::Store(), localGraphFetchExecutionNode = $localGraphNode, graphFetchTree = $clusteredTree, resultType = $voidResultType);
   let graphNode = ^meta::pure::graphFetch::executionPlan::GraphFetchExecutionNode(globalGraphFetchExecutionNode = $gobalGraphNode, rootExecutionNode = ^$dummyNode(executionNodes = $dummyNode->concatenate($dummyNode)), graphFetchTree = $clusteredTree, resultType = $voidResultType);

   assertEquals(6, $graphNode->meta::pure::executionPlan::allNodes([])->size());
}