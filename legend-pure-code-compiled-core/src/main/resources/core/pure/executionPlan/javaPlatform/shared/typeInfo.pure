// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::typeInfo::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::lineage::scanProperties::*;
import meta::pure::mapping::*;
import meta::pure::metamodel::constraint::*;
import meta::pure::metamodel::serialization::grammar::*;


function meta::alloy::runtime::java::typeInfo::newTypeInfoSet(): TypeInfoSet[1]
{
   ^TypeInfoSet();
}

function meta::alloy::runtime::java::typeInfo::addForClasses(info:TypeInfoSet[1], classes: Class<Any>[*]): TypeInfoSet[1]
{
   $classes->fold({c, i| $i->addForClass($c)}, $info);
}

function meta::alloy::runtime::java::typeInfo::addForType(info:TypeInfoSet[1], type:Type[1]): TypeInfoSet[1]
{
   $info->addBasicTypeInfoIfMissing($type);
}

function meta::alloy::runtime::java::typeInfo::addForClass(info:TypeInfoSet[1], class: Class<Any>[1]): TypeInfoSet[1]
{
   $info->addBasicTypeInfoIfMissing($class);
}

function meta::alloy::runtime::java::typeInfo::addForClassesWithAllProperties(info:TypeInfoSet[1], classes: Class<Any>[*]): TypeInfoSet[1]
{
   $classes->fold({c, i| $i->addForClassWithAllProperties($c)}, $info);
}

function meta::alloy::runtime::java::typeInfo::addForClassWithAllProperties(info:TypeInfoSet[1], class: Class<Any>[1]): TypeInfoSet[1]
{
   let basic             = $info->addBasicTypeInfoIfMissing($class);
   let plusNonPrimatives = $class.properties->filter(p|!$p->isPrimitiveValueProperty())->fold({p, i| $i->addPropertyForClassIfMissing($class, $p)}, $basic);
   $class.qualifiedProperties->fold({q, i| $i->addQualifiedPropertyForClassIfMissing($class, $q)}, $plusNonPrimatives);
}

function meta::alloy::runtime::java::typeInfo::addForClassWithAllPropertiesViaAssociations(info:TypeInfoSet[1], class:Class<Any>[1]) : TypeInfoSet[1]
{
   let basic = $info->addBasicTypeInfoIfMissing($class);
   $class.propertiesFromAssociations->fold({p,i | $i->addPropertyForClassIfMissing($class, $p)}, $basic);
}

function meta::alloy::runtime::java::typeInfo::addForGraphFetchTree(info:TypeInfoSet[1], tree: GraphFetchTree[1]): TypeInfoSet[1]
{
   $info->typeInfoFromTree($tree);
}

function meta::alloy::runtime::java::typeInfo::addConstraintsForGraphFetchTree(info:TypeInfoSet[1], tree: GraphFetchTree[1]): TypeInfoSet[1]
{
   $info->constraintInfoFromTree($tree);
}

function meta::alloy::runtime::java::typeInfo::addForInstanceSetImplementations(info:TypeInfoSet[1], setImplementations:InstanceSetImplementation[*]): TypeInfoSet[1]
{
   $info->typeInfoFromInstanceSetImplementations($setImplementations);
}

function meta::alloy::runtime::java::typeInfo::allClassInfos(info:TypeInfoSet[1]): ClassTypeInfo[*]
{
   $info.typeInfos->filter(ti| $ti->instanceOf(ClassTypeInfo))->cast(@ClassTypeInfo);
}

function meta::alloy::runtime::java::typeInfo::allEnumerationInfos(info:TypeInfoSet[1]): EnumerationTypeInfo[*]
{
   $info.typeInfos->filter(ti| $ti->instanceOf(EnumerationTypeInfo))->cast(@EnumerationTypeInfo);
}

function meta::alloy::runtime::java::typeInfo::allUnitInfos(info:TypeInfoSet[1]): UnitTypeInfo[*]
{
   $info.typeInfos->filter(ti| $ti->instanceOf(UnitTypeInfo))->cast(@UnitTypeInfo);
}

function meta::alloy::runtime::java::typeInfo::forType(info:TypeInfoSet[1], type:Type[1]): TypeInfo[1]
{
   let forType = $info.typeInfos->filter(ti| $ti.type == $type);
   assert($forType->size() == 1, 'Type ' + if($forType->isEmpty(), |'missing', |'duplicated') + ': ' + $type->elementToPath());
   $forType->toOne();
}

function meta::alloy::runtime::java::typeInfo::forClass(info:TypeInfoSet[1], class:Class<Any>[1]): ClassTypeInfo[1]
{
   $info->forType($class)->cast(@ClassTypeInfo);
}

function meta::alloy::runtime::java::typeInfo::forSupertypesOf(info:TypeInfoSet[1], class:Class<Any>[1]): ClassTypeInfo[*]
{
   $info->forClass($class).supertypes->map(s| $info->forClass($s));
}

function meta::alloy::runtime::java::typeInfo::forEnumeration(info:TypeInfoSet[1], enumeration:Enumeration<Any>[1]): EnumerationTypeInfo[1]
{
   $info->forType($enumeration)->cast(@EnumerationTypeInfo);
}

function meta::alloy::runtime::java::typeInfo::forUnit(info:TypeInfoSet[1], unit:Unit[1]): UnitTypeInfo[1]
{
   $info->forType($unit)->cast(@UnitTypeInfo);
}

function meta::alloy::runtime::java::typeInfo::containsProperty(info:TypeInfoSet[1], property:AbstractProperty<Any>[1]): Boolean[1]
{
   let class = $property->ownerClass();
   $info.typeInfos
      ->filter(ti| $ti.type == $class)
      ->match([
           c: ClassTypeInfo[1] | $property->match([
                                               p:Property<Nil,Any|*>[1]    | $c.properties->contains($p),
                                               q:QualifiedProperty<Any>[1] | $c.qualifiedProperties->contains($q)
                                            ]) ,
           a: Any[*]           | true; // If we don't have Type info the property is coming from a newed object which will support all properties
        ]);
}

function meta::alloy::runtime::java::typeInfo::allProperties(info:TypeInfoSet[1], class:Class<Any>[1]): Property<Nil,Any|*>[*]
{
   $info->allProperties($info->forClass($class))
}

function meta::alloy::runtime::java::typeInfo::allProperties(info:TypeInfoSet[1], classInfo:ClassTypeInfo[1]): Property<Nil,Any|*>[*]
{
   $classInfo.supertypes->fold(
      {supertype, properties|
         let notOverriden = $info->forClass($supertype).properties->filter(p| !$p.name->in($properties.name));   
         $properties->concatenate($notOverriden);
      },
      $classInfo.properties
   );
}

function meta::alloy::runtime::java::typeInfo::allQualifiedProperties(info:TypeInfoSet[1], class:Class<Any>[1]): QualifiedProperty<Any>[*]
{
   $info->allQualifiedProperties($info->forClass($class))
}

function meta::alloy::runtime::java::typeInfo::allQualifiedProperties(info:TypeInfoSet[1], classInfo:ClassTypeInfo[1]): QualifiedProperty<Any>[*]
{
   $classInfo.supertypes->fold(
      {supertype, qualifiedProperties|
         let notOverriden = $info->forClass($supertype).qualifiedProperties->filter(p| !$p.name->in($qualifiedProperties.name));   
         $qualifiedProperties->concatenate($notOverriden);
      },
      $classInfo.qualifiedProperties
   );
}

function meta::alloy::runtime::java::typeInfo::valueProperties(info:TypeInfoSet[1], class:Class<Any>[1]): AbstractProperty<Any>[*]
{
   $info->valueProperties($info->forClass($class))
}

function meta::alloy::runtime::java::typeInfo::valueProperties(info:TypeInfoSet[1], classInfo:ClassTypeInfo[1]): AbstractProperty<Any>[*]
{
   $info->allProperties($classInfo)->filter(p|$p->isPrimitiveValueProperty());
}

function meta::alloy::runtime::java::typeInfo::classDependenciesViaPropertiesWithsubTypes(info:TypeInfoSet[1], class:Class<Any>[1]): Class<Any>[*]
{
   let cd = $info
      ->classPropertiesRecursiveWithsubTypes($class, [])
      ->map(p| $p.genericType.rawType)
      ->cast(@Class<Any>);

   let subTypes = $cd->map(c | $c->getSpecializations())->filter(s |  $info.typeInfos->exists(ti | $ti.type == $s->cast(@Type)));

      $cd->concatenate($subTypes)->filter(c| !elementsEquals()->eval($c, $class))
      ->remove(Any)
      ->removeDuplicates(elementsEquals())
      ->cast(@Class<Any>);
}

function meta::alloy::runtime::java::typeInfo::enumDependenciesViaProperties(info:TypeInfoSet[1], class:Class<Any>[1]): Enumeration<Any>[*]
{
   let directProperties     = $info->allProperties($class);
   let dependencyProperties = $info->classDependenciesViaPropertiesWithsubTypes($class)->map(c| $info->allProperties($c));
   
   $directProperties
      ->concatenate($dependencyProperties)
      ->filter(p| $p.genericType.rawType->toOne()->instanceOf(Enumeration))
      ->map(p| $p.genericType.rawType)
      ->removeDuplicates(elementsEquals())
      ->cast(@Enumeration<Any>);
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::classPropertiesRecursiveWithsubTypes(info:TypeInfoSet[1], class:Class<Any>[1], visitedClasses:Class<Any>[*]):AbstractProperty<Any>[*]
{
   if($class->in($visitedClasses) || $class == Any,
      |[],
      {|
         let forThisClass        = $info->allProperties($class)->filter(p| $p.genericType.rawType->toOne()->instanceOf(Class));
         let forThisWithSubtypes = $forThisClass->concatenate($class->getSpecializations()->filter(s |  $info.typeInfos->exists(ti | $ti.type == $s->cast(@Type)))->map(g | $info->allProperties($g)->filter(p| $p.genericType.rawType->toOne()->instanceOf(Class))));
         
         let forChildren         = $forThisWithSubtypes.genericType.rawType->cast(@Class<Any>)->map(c| $info->classPropertiesRecursiveWithsubTypes($c, $visitedClasses->concatenate($class)));
         $forThisWithSubtypes->concatenate($forChildren);
      }
   );
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::typeInfoFromTree(info:TypeInfoSet[1], tree:GraphFetchTree[1]): TypeInfoSet[1]
{
   let withThisType = $tree->match([
      r: RoutedGraphFetchTree[1] | $info->typeInfoFromInstanceSetImplementations($r.sets->cast(@InstanceSetImplementation)),
      r: RootGraphFetchTree<Any>[1] | $info->addBasicTypeInfoIfMissing($r.class),
      p: PropertyGraphFetchTree[1]  | let pInfo = $info->addBasicTypeInfoIfMissing($p.property.genericType.rawType->toOne()); if ($p.subType->isNotEmpty(), | $pInfo->addBasicTypeInfoIfMissing($p.subType->toOne()), | $pInfo); 
   ]);

   let requiredQP             = $tree->match([
                                   ergft: ExtendedRootGraphFetchTree<Any>[1] | $ergft.requiredQualifiedProperties,
                                   epgft: ExtendedPropertyGraphFetchTree[1]  | $epgft.requiredQualifiedProperties,
                                   rrgft: RoutedRootGraphFetchTree<Any>[1]   | $rrgft.requiredQualifiedProperties,
                                   rpgft: RoutedPropertyGraphFetchTree[1]    | $rpgft.requiredQualifiedProperties,
                                   gft  : GraphFetchTree[1]                  | []
                                ]);
   let withRequiredQualifiers = $requiredQP->fold({qp,tis |$tis->addQualifiedPropertyForTypeIfMissing($qp)}, $withThisType);
   
   let nonePrimitiveSubTreesReturningClasses = $tree.subTrees->map(x | $x->meta::pure::graphFetch::routing::byPassClusteringInfo())->cast(@PropertyGraphFetchTree)->filter(pgft| $pgft.property->instanceOf(Property) && $pgft.property.genericType.rawType->toOne()->instanceOf(Class));
    
   let qualifiedSubTrees = $tree.subTrees->map(x | $x->meta::pure::graphFetch::routing::byPassClusteringInfo())->cast(@PropertyGraphFetchTree)->filter(pgft| $pgft.property->instanceOf(QualifiedProperty));
   
   $nonePrimitiveSubTreesReturningClasses->concatenate($qualifiedSubTrees)->fold(
      {pgft, tis|
         if($pgft.property->instanceOf(QualifiedProperty), | $tis->addQualifiedPropertyForTypeIfMissing($pgft.property->cast(@QualifiedProperty<Any>)), | $tis->addPropertyForTypeIfMissing($pgft.property->cast(@Property<Nil,Any|*>)))->typeInfoFromTree($pgft);
      }, 
      $withRequiredQualifiers
   );
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::constraintInfoFromTree(typeInfos:TypeInfoSet[1], tree:GraphFetchTree[1]): TypeInfoSet[1]
{
   $tree->classesInTree()
      ->map(c| $c->concatenate($typeInfos->forClass($c).supertypes))
      ->removeDuplicates()
      ->fold({class, infos| $infos->addConstraints($class)}, $typeInfos);
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addConstraints(typeInfos:TypeInfoSet[1], class:Class<Any>[1]): TypeInfoSet[1]
{
   $class.constraints->fold({constraint, infos| $infos->addConstraint($class, $constraint)}, $typeInfos);
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addConstraint(typeInfos:TypeInfoSet[1], class:Class<Any>[1], constraint:Constraint[1]): TypeInfoSet[1]
{
   let classInfo         = $typeInfos->forClass($class);
   let funcProperties    = $constraint.functionDefinition.expressionSequence->at(0)->evaluateAndDeactivate()->scanProperties();
   let messageProperties = $constraint.messageFunction->map(f| $f.expressionSequence->at(0)->evaluateAndDeactivate()->scanProperties());
   let allPaths          = $funcProperties->concatenate($messageProperties).result;
   let missingProperties = $allPaths.values.property->removeDuplicates()->filter(p |!$typeInfos->containsProperty($p));
   let withConstraint    = if($missingProperties->isEmpty(),
                              | $typeInfos->forClass($class)->addSupportedConstraint($constraint),
                              | $typeInfos->forClass($class)->addAlwaysDefectConstraint($constraint, 'properties unavailable ' + $missingProperties.name->map(n| '\''+$n+'\'')->joinStrings(', ') + ' (check your mappings)')
                           );
   $typeInfos->addOrReplace($withConstraint);
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addSupportedConstraint(classInfo:ClassTypeInfo[1], constraint:Constraint[1]): ClassTypeInfo[1]
{
   let constraintInfo = ^SupportedConstraintInfo(constraint=$constraint);
   ^$classInfo(constraints = $classInfo.constraints->filter(ci| $ci.constraint != $constraint)->add($constraintInfo));
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addAlwaysDefectConstraint(classInfo:ClassTypeInfo[1], constraint:Constraint[1], message:String[1]): ClassTypeInfo[1]
{
   let constraintInfo = ^AlwaysDefectConstraintInfo(constraint=$constraint, defectMessage=$message);
   ^$classInfo(constraints = $classInfo.constraints->filter(ci| $ci.constraint != $constraint)->add($constraintInfo));
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::classesInTree(tree:GraphFetchTree[1]): Class<Any>[*]
{
   let class = $tree->match([
      r: RootGraphFetchTree<Any>[1] | $r.class,
      p: PropertyGraphFetchTree[1]  | $p.property.genericType.rawType->filter(t| $t->instanceOf(Class))->cast(@Class<Any>)
   ]);

   $class->concatenate($tree.subTrees->map(st| $st->classesInTree()))->removeDuplicates();
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::typeInfoFromInstanceSetImplementations(info:TypeInfoSet[1], setImplementations:InstanceSetImplementation[*]): TypeInfoSet[1]
{
   $setImplementations->fold(
      {set, updatedTypes |
         let type = if($set.mappingClass->isNotEmpty(),
                       | $set.mappingClass->toOne(),
                       | $set.class
                    );
         $updatedTypes->addBasicTypeInfoIfMissing($type);
      }, 
      $info
   );
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addPropertyForTypeIfMissing(info:TypeInfoSet[1], property:Property<Nil,Any|*>[1]): TypeInfoSet[1]
{
   $property.owner->match([
      {c: Class<Any>[1] |
         $info->addPropertyForClassIfMissing($c, $property);
      },
      {a: Association[1] |
         let p1 = $a.properties->at(0);
         let c1 = $a.properties->at(1).genericType.rawType->cast(@Class<Any>)->toOne();
         let p2 = $a.properties->at(1);
         let c2 = $a.properties->at(0).genericType.rawType->cast(@Class<Any>)->toOne();
         
         $info->addPropertyForClassIfMissing($c1, $p1)->addPropertyForClassIfMissing($c2, $p2);
      }
   ]);
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addPropertyForClassIfMissing(info:TypeInfoSet[1], class:Class<Any>[1], property:Property<Nil,Any|*>[1]): TypeInfoSet[1]
{
   let enriched = $info->addBasicTypeInfoIfMissing($class);
   let ti       = $enriched->addBasicTypeInfoIfMissing($class)->forClass($class);

   if($ti.properties->exists(p| elementsEquals()->eval($p, $property)), 
      | $enriched, 
      | $enriched->addOrReplace(^$ti(properties=$ti.properties->concatenate($property)));
   );
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addQualifiedPropertyForTypeIfMissing(info:TypeInfoSet[1], qualifiedProperty:QualifiedProperty<Any>[1]): TypeInfoSet[1]
{
   let owningClass = $qualifiedProperty->functionType().parameters->evaluateAndDeactivate()->at(0).genericType.rawType->toOne()->cast(@Class<Any>);
   $info->addQualifiedPropertyForClassIfMissing($owningClass, $qualifiedProperty);
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addQualifiedPropertyForClassIfMissing(info:TypeInfoSet[1], class:Class<Any>[1], qualifiedProperty:QualifiedProperty<Any>[1]): TypeInfoSet[1]
{
   let enriched = $info->addBasicTypeInfoIfMissing($class);
   let ti       = $enriched->forClass($class);
   if($qualifiedProperty->printFunctionSignature()->in($ti.qualifiedProperties->map(q| $q->printFunctionSignature())),
      | $enriched,
      {|
         let withQualifier  = $enriched->addOrReplace(^$ti(qualifiedProperties=$ti.qualifiedProperties->concatenate($qualifiedProperty)));
         let withParameters = $qualifiedProperty->functionType().parameters->evaluateAndDeactivate()->tail()->fold({p, agg | $agg->addBasicTypeInfoIfMissing($p.genericType.rawType->toOne())}, $withQualifier);

         let paths = $qualifiedProperty.expressionSequence->map(es| $es->evaluateAndDeactivate()->scanProperties().result);
         $paths.values.property->removeDuplicates()->fold(
            {prop, info|
               $prop->match([
                  p :Property<Nil,Any|*>[1]    | $info->addPropertyForTypeIfMissing($p),
                  qp:QualifiedProperty<Any>[1] | $info->addQualifiedPropertyForTypeIfMissing($qp)
               ]);
            },
            $withParameters
         );
      }
   );
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addOrReplace(info:TypeInfoSet[1], newTypeInfo:TypeInfo[1]): TypeInfoSet[1]
{
   ^$info(
      typeInfos=$info.typeInfos->filter(ti| !elementsEquals()->eval($ti.type, $newTypeInfo.type))->concatenate($newTypeInfo)
   );
}

function<<access.private>> meta::alloy::runtime::java::typeInfo::addBasicTypeInfoIfMissing(info:TypeInfoSet[1], type:Type[1]):TypeInfoSet[1]
{
   
   addBasicTypeInfoIfMissing($info,[],$type);
}
   
function <<access.private>> meta::alloy::runtime::java::typeInfo::addBasicTypeInfoIfMissing(info:TypeInfoSet[1], seenClasses:Class<Any>[*], type:Type[1]): TypeInfoSet[1]
{
   if($info.typeInfos.type->contains($type),
      {| 
         $info 
      },
      {| 
         $type->match([
            e : Enumeration<Any>[1] | $info->addEnumerationTypeInfo($e),
            c : Class<Any>[1]       | $info->addBasicClassTypeInfo($c, $seenClasses),
            u : Unit[1]             | $info->addUnitTypeInfo($u),
            a : Any[1]              | $info
         ])
      }
   );
}


function <<access.private>> meta::alloy::runtime::java::typeInfo::addEnumerationTypeInfo(info:TypeInfoSet[1], enumeration:Enumeration<Any>[1]): TypeInfoSet[1]
{
   $info->addOrReplace(^EnumerationTypeInfo(type=$enumeration));
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addBasicClassTypeInfo(info:TypeInfoSet[1], class:Class<Any>[1], seenClasses:Class<Any>[*]): TypeInfoSet[1]
{
   let supertypes = $class->getGeneralizations();

   //TODO: tests fail due to this line, temporarily disabling to fix build.
   //let byDefaultProperties = $class.properties->filter(p|$p->isPrimitiveValueProperty() || !$p.genericType.rawType->in($seenClasses));
   let byDefaultProperties = $class.properties->filter(p|$p->isPrimitiveValueProperty());


   let newSeenClasses = $seenClasses->concatenate($class);
   let withPropertyTypes   = $byDefaultProperties->map(p| $p.genericType.rawType)->fold({t, set | $set->addBasicTypeInfoIfMissing($newSeenClasses, $t)}, $info);
   let withSupertypes      = $supertypes->fold({c, set | $set->addBasicTypeInfoIfMissing($newSeenClasses, $c)}, $withPropertyTypes);

   // TODO Types due to qualified properties 
   let classInfo = ^ClassTypeInfo(
      type       = $class, 
      supertypes = $supertypes,
      properties = $byDefaultProperties
   );

   $withSupertypes->addOrReplace($classInfo);
}

function <<access.private>> meta::alloy::runtime::java::typeInfo::addUnitTypeInfo(info:TypeInfoSet[1], unit:Unit[1]): TypeInfoSet[1]
{
   let measure = $unit.measure->toOne();
   let conversionFunction = $unit.conversionFunction->toOne();

   let unitInfo = ^UnitTypeInfo(
      type       = $unit,
      measure    = $measure,
      conversionFunction = $conversionFunction
   );

   $info->addOrReplace($unitInfo);
}

function  <<access.private>> meta::alloy::runtime::java::typeInfo::getGeneralizations(class:Type[1]):Class<Any>[*]
{
   let generalizations = $class.generalizations->map(g | $g.general->cast(@GenericType).rawType->toOne())->cast(@Class<Any>);
   $generalizations
      ->concatenate($generalizations->map(g| $g->getGeneralizations()))
      ->filter(c|!elementsEquals()->eval($c, meta::pure::metamodel::type::Any))
      ->removeDuplicates(elementsEquals())
      ->cast(@Class<Any>);
}

function  <<access.private>> meta::alloy::runtime::java::typeInfo::getSpecializations(class:Type[1]):Class<Any>[*]
{
   let specializations = $class.specializations->map(g | $g.specific->filter(t|$t->instanceOf(Class))->cast(@Class<Any>));
  
   $specializations
      ->concatenate($specializations->map(g| $g->getSpecializations()))
      ->filter(c|!elementsEquals()->eval($c, meta::pure::metamodel::type::Any))
      ->removeDuplicates(elementsEquals())
      ->cast(@Class<Any>);
}


// Comparator needed due to Alloy bug in metadata vs other deserialization
// TODO Verify if this is still needed
function  <<access.private>> meta::alloy::runtime::java::typeInfo::elementsEquals():Function<{PackageableElement[1],PackageableElement[1]->Boolean[1]}>[1]
{
   {pe1:PackageableElement[1], pe2:PackageableElement[1] | $pe1->elementToPath() == $pe2->elementToPath()};
}
