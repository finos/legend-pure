// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::*;
import meta::alloy::runtime::java::graphFetch::common::*;
import meta::alloy::runtime::java::naming::*;
import meta::alloy::runtime::java::platform::*;
import meta::alloy::runtime::java::typeInfo::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::dataQuality::*;
import meta::pure::graphFetch::*;
import meta::pure::metamodel::constraint::*;
import meta::pure::mapping::*;
import meta::pure::milestoning::*;
import meta::pure::executionPlan::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::inMemory::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::java::generation::code::*;
import meta::java::generation::convention::*;
import meta::java::generation::convention::jackson::*;
import meta::java::generation::expression::*;
import meta::java::generation::utils::*;
import meta::java::metamodel::project::*;
import meta::java::metamodel::factory::*;
import meta::java::serialization::*;

function <<access.private>> meta::alloy::runtime::java::generateInterfaceForUnit(typeInfo:UnitTypeInfo[1], unitIface:meta::java::metamodel::Class[1],conventions:Conventions[1], debug:DebugContext[1]): meta::java::metamodel::Class[*]
{
   print(if($debug.debug,|$debug.space+'generateInterfaceForUnit: \''+$typeInfo.type.name->toOne()+'\'\n', |''));
   let measure = $typeInfo.unit().measure->toOne();
   let measureInterface = generateInterfaceForMeasure($measure, $conventions, $debug);
   $conventions->className($typeInfo.type)->addModifiers(['public', 'interface'])->implements([$unitIface, $measureInterface])
      ->concatenate($measureInterface);
}

function <<access.private>> meta::alloy::runtime::java::generateInterfaceForMeasure(measure: Type[1], conventions: Conventions[1], debug: DebugContext[1]): meta::java::metamodel::Class[1]
{
   let result = $conventions->className($measure)->addModifiers(['public', 'interface']);
}

function meta::alloy::runtime::java::unitImplementationClasses(context:GenerationContext[1]): meta::java::metamodel::Class[*]
{

   $context.typeInfos->allUnitInfos()
      ->map(uti | $uti.unit())
      ->map(u| $context.conventions->implClassName($u))
      ->map(uc| $context.baseProject->match([p0:Project[0]|$uc, p:Project[1]|$p->resolve($uc)]));
}

function <<access.private>> meta::alloy::runtime::java::createUnitClasses(context:GenerationContext[1], debug:DebugContext[1]): Project[1]
{
    let conventions = $context.conventions;
    let unitTypesInMapping = $context.typeInfos->allUnitInfos()->map(uti | $uti.unit());
    let unitClassesUsed = $unitTypesInMapping->map(u| let conversionFunction = $u->cast(@Unit).conversionFunction->evaluateAndDeactivate()->toOne();
                                                      let inverseFunction = meta::pure::functions::math::calculateInverseFunction($conversionFunction)->evaluateAndDeactivate()->toOne();
                                                      let generatedConversionFunction = $conversionFunction.expressionSequence->toOne()->cast(@ValueSpecification)->meta::java::generation::expression::generateJava($conventions, $debug)->codeToString($conventions);
                                                      let generatedInverseFunction = $inverseFunction.expressionSequence->toOne()->cast(@ValueSpecification)->meta::java::generation::expression::generateJava($conventions, $debug)->codeToString($conventions);
                                                      let variableCode = $conversionFunction->meta::java::generation::expression::getUnitConversionFunctionVariableName($conventions, $debug);

                                                      $conventions->implClassName($u)
                                                               ->addModifiers('public')
                                                               ->implements($conventions->className($u))
                                                               ->imports(javaClass('com.fasterxml.jackson.databind.node.ObjectNode'))
                                                               ->imports(javaClass('com.fasterxml.jackson.databind.JsonNode'))
                                                               ->imports(javaClass('com.fasterxml.jackson.databind.ObjectMapper'))
                                                               ->imports(javaClass('java.util.ArrayList'))
                                                               ->imports(javaClass('com.fasterxml.jackson.databind.node.ArrayNode'))
                                                               ->addField(javaField('private', javaString(), 'unitType'))
                                                               ->addField(javaField('private', javaNumber(), 'unitValue'))
                                                               ->addConstructor(
                                                                  javaConstructor('public', [javaParam(javaNumber(), 'unitValue')],
                                                                     '    this.unitType = "' + $u->elementToPath() + '";\n' +
                                                                     '    this.unitValue = unitValue;'
                                                                  )
                                                               )
                                                               ->addMethod(^meta::java::metamodel::Method(
                                                                                                     modifiers   = [meta::java::metamodel::Modifier.Public],
                                                                                                     name        = 'createJsonObject',
                                                                                                     returnType  = javaClass('com.fasterxml.jackson.databind.JsonNode'),
                                                                                                     body        = 'ObjectMapper mapper = new ObjectMapper();\n' +
                                                                                                                   'JsonNode rootNode = mapper.createObjectNode();\n' +

                                                                                                                   'JsonNode innerNode = mapper.createObjectNode();\n' +
                                                                                                                   '((ObjectNode) innerNode).put("unitId", this.unitType);\n' +
                                                                                                                   'JsonNode innerNode2 = mapper.createObjectNode();\n' +
                                                                                                                   '((ObjectNode) innerNode).put("exponentValue", 1);\n' +

                                                                                                                   'ArrayNode array = mapper.createArrayNode();\n' +
                                                                                                                   '((ArrayNode) array).add(innerNode);\n' +
                                                                                                                   'JsonNode unitNode = mapper.createObjectNode();\n' +
                                                                                                                   '((ObjectNode) rootNode).putArray("unit").addAll(array);\n' +

                                                                                                                   '((ObjectNode) rootNode).put("value", (double)this.unitValue);\n' +

                                                                                                                    'return rootNode;'
                                                                                                  ))
                                                               ->addMethod(^meta::java::metamodel::Method(
                                                                                                     modifiers   = [meta::java::metamodel::Modifier.Public],
                                                                                                     name        = 'getUnitType',
                                                                                                     returnType  = javaString(),
                                                                                                     body        = 'return this.unitType;'
                                                                                                  ))
                                                               ->addMethod(^meta::java::metamodel::Method(
                                                                                                     modifiers   = [meta::java::metamodel::Modifier.Public],
                                                                                                     name        = 'getUnitValue',
                                                                                                     returnType  = javaNumber(),
                                                                                                     body        = 'return this.unitValue;'
                                                                                                  ))
                                                               ->addMethod(^meta::java::metamodel::Method(
                                                                                                     modifiers   = [meta::java::metamodel::Modifier.Public],
                                                                                                     name        = 'convertToCanonical',
                                                                                                     returnType  = javaNumber(),
                                                                                                     body        = 'Number ' + $variableCode + '= this.unitValue;\n' + 'return ' + $generatedConversionFunction + ';'
                                                                                                  ))
                                                               ->addMethod(^meta::java::metamodel::Method(
                                                                                                     modifiers   = [meta::java::metamodel::Modifier.Public, meta::java::metamodel::Modifier.Static],
                                                                                                     parameters = ^meta::java::metamodel::Parameter(name='val', type=javaNumber()),
                                                                                                     name        = 'inverse',
                                                                                                     returnType  = javaNumber(),
                                                                                                     body        = 'Number ' + $variableCode + '= val;\n' + 'return ' + $generatedInverseFunction + ';'
                                                                                                  )););

   mergeProjects(
      newProject()->addClasses($unitClassesUsed)
         ->concatenate(createUnitDependencies($context, $debug)->dependencies()->resolveAndGetProjects())
         ->toOneMany()
   );
}

function <<access.private>> meta::alloy::runtime::java::createUnitDependencies(context:GenerationContext[1], debug:DebugContext[1]): meta::java::generation::code::Code[1]
{
   let conventions = $context.conventions;
   let unitTypesInMapping = $context.typeInfos->allUnitInfos()->map(uti | $uti.unit());
   if ($unitTypesInMapping->size() > 0,
       | let u = $unitTypesInMapping->first();
         let conversionFunction = $u->cast(@Unit).conversionFunction->evaluateAndDeactivate()->toOne();
         let generatedConversionFunctionCode = $conversionFunction.expressionSequence->toOne()->cast(@ValueSpecification)->meta::java::generation::expression::generateJava($conventions, $debug);
         let conversionFunctionCodeWithDependency = $generatedConversionFunctionCode;,
       | ^Code(type=^meta::java::metamodel::Type()));
}
