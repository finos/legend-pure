// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::*;
import meta::pure::graphFetch::execution::*;
import meta::json::*;
import meta::alloy::runtime::java::graphFetch::json::*;
import meta::alloy::runtime::java::naming::*;
import meta::alloy::runtime::java::typeInfo::*;
import meta::java::generation::code::*;
import meta::java::generation::convention::*;
import meta::java::generation::convention::jackson::*;
import meta::java::generation::utils::*;
import meta::java::metamodel::factory::*;
import meta::java::metamodel::project::*;
import meta::java::serialization::*;
import meta::pure::dataQuality::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::metamodel::serialization::grammar::*;

function meta::alloy::runtime::java::graphFetch::json::jsonReaderClass(conventions:Conventions[1], path:String[1], srcTreeClass:Class<Any>[1]): meta::java::metamodel::Class[1]
{   
   $conventions->planNodeClass('public', $path, 'JsonDataReader_' + $conventions->identifier($srcTreeClass->elementToPath('_')));
}

function meta::alloy::runtime::java::graphFetch::json::createJsonReading(data:GraphFetchModelToModelData[1], path:String[1], readableClasses:Class<Any>[*], readableEnums:Enumeration<Any>[*], context:GenerationContext[1], debug:DebugContext[1]): Project[1]
{
   newProject()
      ->addClasses(createJsonReadingClass($data, $path, $readableClasses, $readableEnums, $context, $debug))
      ->addMavenDependency('com.fasterxml.jackson.core', 'jackson-core', '2.10.3');
}

function meta::alloy::runtime::java::graphFetch::json::createJsonReadingClass(data:GraphFetchModelToModelData[1], path:String[1], readableClasses:Class<Any>[*], readableEnums:Enumeration<Any>[*], context:GenerationContext[1], debug:DebugContext[1]): meta::java::metamodel::Class[1]
{
   let proto = $context.conventions->jsonReaderClass($path, $data.sourceTree.class)
      ->implements($context.conventions->className(StoreStreamReader))
      ->usingKnownPackages($context.conventions->knownPackages())
      ->imports($context.conventions->constrainedImports())
      ->imports($context.conventions->standardImports())
      ->imports($context.conventions->defectClass())
      ->imports($readableClasses->map(c| $context.conventions->className($c)))
      ->imports($readableEnums->map(c| $context.conventions->className($c)))
      ->imports($context.conventions->className(Checked))
      ->imports($context->unitImplementationClasses())
      ->imports(javaPackage('java.io'))
      ->imports(javaPackage('java.net'))
      ->imports(jsonFactory())
      ->imports(jsonParser())
      ->imports(jsonNode())
      ->imports(jsonNodeType())
      ->imports(jsonToken())
      ->imports(objectMapper())
      ->imports(javaReflectMethod())
      ->imports(javaInvocationTargetException());

   let conventions = $context.conventions->forClass($proto);
   let jsonToken   = javaClass('com.fasterxml.jackson.core.JsonToken')->typePathToString($proto);
   let baos        = javaClass('java.io.ByteArrayOutputStream');
   let recordType  = $context.conventions->className(JsonDataRecord);
   let unitTypes   = $context.typeInfos->allUnitInfos()->map(uti | $uti.unit());

   $proto
      ->addField(javaField('private', javaBoolean(), 'finishedReading', 'false'))
      ->addField(javaField('private', javaStack(javaObject()), 'stack', javaStack(javaObject())->j_new([])->codeToString($proto)))
      ->addField(javaField('private', jsonParser(), 'parser'))
      ->addField(javaField('private', objectMapper(), 'objectMapper'))      
      ->addField(javaField('private', javaBoolean(), 'inArray', 'false'))
      ->addField(javaField('private', javaLong(), 'recordCount', '0'))      
      ->addField(javaField('private', javaInputStream(), 'in'))
      ->addConstructor()
      ->addInitReading()
      ->addMethodExist()
      ->addMethodInvoke()
      ->addMethod(
         javaMethod(['public'], javaVoid(), 'destroyReading', [],
             'if (this.parser.isClosed())\n' +
             '{\n' +
             '   return;\n' +
             '}\n' +
             'try\n' +
             '{\n' +
             '    this.parser.close();\n' +
             '}\n' +
             'catch (IOException e)\n' +
             '{\n' +
             '    throw new RuntimeException(e);\n' +
             '}'
         )
      )
      ->addMethod(
         javaMethod(['public'], javaBoolean(), 'isFinished',
                    [],
             'nextToken();\n' +
             'if (!this.finishedReading && getCurrentToken() == ' +$jsonToken+'.START_ARRAY && !inArray)\n' +
             '{\n' +           
             '    nextToken();\n' +
             '    inArray = true;\n'+
             '}\n' +
             'if (!this.finishedReading && getCurrentToken() == '+$jsonToken+'.END_ARRAY && inArray)\n' +
             '{\n' +
             '    nextToken();\n' +
             '    inArray = false;\n' +
             '    this.finishedReading = true;\n' +
             '}\n' +
             'this.finishedReading |= getCurrentToken() == null;\n' +

             'return this.finishedReading ;'
         )
      )
      ->addMethod(
         javaMethod(['public'], javaVoid(), 'nextToken', [],
             '    try\n' +
             '    {\n' +
             '        this.parser.nextToken();\n' +
             '    }\n' +
             '    catch (IOException e)\n' +
             '    {\n' +
             '        throw new RuntimeException(e);\n' +
             '    }'
         )
      )
      ->addMethods($readableClasses->map(c|$c->createClassReadMethod($proto, $path, ^$context(conventions=$conventions))))
      ->addMethods($unitTypes->map(t|$t->createUnitAcceptMethod($conventions)))
      ->addMethods($readableEnums->map(c|$c->createEnumReadMethod(^$context(conventions=$conventions))))
      ->addMethod(createAcceptMethod(String, $proto, $conventions))
      ->addMethod(createAcceptMethod(Boolean, $proto, $conventions))
      ->addMethod(createAcceptMethod(Integer, $proto, $conventions))
      ->addMethod(createAcceptMethod(Float, $proto, $conventions))
      ->addMethod(createAcceptMethod(Decimal, $proto, $conventions))
      ->addMethod(createAcceptMethod(Number, $proto, $conventions))
      ->addMethod(createAcceptMethod(StrictDate, $proto, $conventions))
      ->addMethod(createAcceptMethod(DateTime, $proto, $conventions))
      ->addMethod(createAcceptMethod(Date, $proto, $conventions))
      ->addMethod(acceptManyMethod($conventions))
      ->addMethod(
         javaMethod('private', javaClass('com.fasterxml.jackson.core.JsonToken'), 'getCurrentToken', [],
             'return parser.getCurrentToken();'
         )
      )

      ->addMethod(
         javaMethod('private', javaVoid(), 'check', [javaParam(jsonNodeType(), 'expectedNode'), javaParam(jsonNodeType(), 'currentNode')],
             'check(expectedNode, currentNode, "Failed to parse JSON, expected \'" + expectedNode + "\', Found " + currentNode);'
         )
      )
      ->addMethod(
         javaMethod('private', javaVoid(), 'check', 
                    [
                       javaParam(jsonNodeType(), 'expectedNode'),
                       javaParam(jsonNodeType(), 'currentNode'),
                       javaParam(javaString(), 'errorMessage')
                    ],
             'check(Collections.singletonList(expectedNode), currentNode, errorMessage);'
         )
      )
      ->addMethod(
         javaMethod('private', javaVoid(), 'check', 
                    [
                       javaParam(javaList(jsonNodeType()), 'expectedNodes'),
                       javaParam(jsonNodeType(), 'currentNode'),
                       javaParam(javaString(), 'errorMessage')
                    ],
             'if (!expectedNodes.contains(currentNode))\n' +
             '{\n' +
             '    throw new '+$conventions->codeType($conventions->className(meta::pure::executionPlan::engine::DataParsingException))->codeToString($conventions)+'(errorMessage);\n' +
             '}'
         )
      )
      ->addReadCheckedObjects($data, $path, $context);
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::acceptManyMethod(conventions:Conventions[1]): meta::java::metamodel::Method[1]
{
   let jsonNode = j_parameter(jsonNode(), 'node');
   let result   = j_variable(javaList(javaTypeVar('T')), 'result');
   let itrNode  = j_parameter(jsonNode(), 'n');
   
   let acceptor       = j_parameter(javaFunction(jsonNode(), javaTypeVar('T')), 'acceptor');
   let defectRecorder = j_parameter(javaConsumer(javaString()), 'defectRecorder');
   let exception      = j_parameter($conventions->className(meta::pure::executionPlan::engine::DataParsingException), 'ex');
   
   
   javaMethod('private', javaTypeVar('T'), javaList(javaTypeVar('T')), 'acceptMany', 
              [$jsonNode, $acceptor, $defectRecorder],
              [
                 $result->j_declare(javaArrayList(javaTypeVar('T'))->j_new([])),  
                 
                 j_if ($jsonNode->j_invoke('isNull', [], javaBoolean()), $result->j_return()),
                 j_if ($jsonNode->j_invoke('isArray', [], javaBoolean()), 
                         j_for($itrNode, $jsonNode, 
                                 $result->j_invoke('add', $acceptor->j_invoke('apply', $itrNode, javaTypeVar('T')), javaList(javaTypeVar('T')))->j_try(j_catch($exception, $defectRecorder->j_invoke('accept', $exception->j_invoke('getMessage', [], javaString()), javaVoid())))
                              ),
                         [                            
                         $result->j_invoke('add', $acceptor->j_invoke('apply', $jsonNode, javaTypeVar('T')), javaList(javaTypeVar('T')))->j_try(j_catch($exception, $defectRecorder->j_invoke('accept', $exception->j_invoke('getMessage', [], javaString()), javaVoid())))
                         ]
                       ),
                $result->j_return()     
              ]->codesToString()
            );
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::createClassReadMethod(class:Class<Any>[1], proto:meta::java::metamodel::Class[1], path:String[1], context:GenerationContext[1]): meta::java::metamodel::Method[1]
{
   let conventions   = $context.conventions;
   let javaClass     = $conventions->className($class);
   let properties    = $context.typeInfos->valueProperties($class);
   let checked       = $conventions->className(Checked);
   let checkedResult = javaParameterizedType($checked, $javaClass);   

   let jsonToken   = $conventions->codeType(javaClass('com.fasterxml.jackson.core.JsonToken'))->codeToString($conventions);
   
   javaMethod(['public'], $checkedResult, $class->readMethodName($conventions), [j_parameter(jsonNode(), 'node')],

      'if (!node.path("'+defaultAlloyConfig().typeKeyName+'").getNodeType().equals(JsonNodeType.MISSING) && !node.path("'+defaultAlloyConfig().typeKeyName+'").textValue().equals("' +$class->elementToPath()+'")){\n' +  
      '   String methodName = "read_" + node.path("'+defaultAlloyConfig().typeKeyName+'").textValue().replace("::", "_");\n' +            
      '   if (readMethodExists(methodName)){\n' +
      '      return (IChecked) readMethodInvoke(methodName, node);\n' +
      '   }\n' +
      '}\n'+             
      $conventions->codeType(javaList($conventions->defectClass()))->codeToString($conventions)+' defects = new '+$conventions->codeType(javaType('java.util.ArrayList'))->codeToString($conventions)+'<>();\n' +
      '\n'+
      defineClassPreParseVariables($class, $proto, $context)+
      '\n'+
      createObject($class, $proto, $path, $context)+
      '\n'+
      acceptProperties($class, $proto, $context)+
      '\n'+
      validateMultiplicities($class, $context)+
      '\n'+
      returnCheckedObject($class, $proto, $path, $context)
   );
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::defineClassPreParseVariables(class:Class<Any>[1], proto:meta::java::metamodel::Class[1], context:GenerationContext[1]): String[1]
{
   let conventions = $context.conventions;
   $context.typeInfos->allProperties($class)->map({p|
      let javaType = $conventions->pureTypeToJavaType($p);
      let listType = if(isJavaList($javaType), |$javaType, |javaList($javaType));
      let variable = '_'+$conventions->fieldName($p);

      let declare = $conventions->codeType($listType)->codeToString($conventions)+' '+$variable+' = new '+$conventions->codeType(javaClass('java.util.ArrayList'))->codeToString($conventions)+'<>();\n';
      if($p.owner->instanceOf(Association),
         {|
            let elementType = $conventions->codeType($listType->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(0))->codeToString($conventions);
            $declare+
            'if (!this.stack.empty() && this.stack.peek() instanceof '+$elementType+')\n' +
            '{\n' +
            '    '+$variable+'.add(('+$elementType+') this.stack.peek());\n' +
            '}\n';
         },
         | $declare
      );
   })->joinStrings('');
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::acceptProperties(class:Class<Any>[1], proto:meta::java::metamodel::Class[1], context:GenerationContext[1]): String[1]
{
   let conventions     = $context.conventions;
   let jsonToken       = $conventions->codeType(javaClass('com.fasterxml.jackson.core.JsonToken'))->codeToString($conventions);

   let propertyClauses   = $context.typeInfos->allProperties($class)->map({p|
      let variable       = '_'+$conventions->fieldName($p);
      let javaType       = $conventions->pureTypeToJavaType($p);
      let propertyType   = $p.genericType.rawType->toOne();
      let defectRecorder = 'm -> defects.add('+$conventions->codeType($conventions->className(DataQualityBasicDefectClass))->codeToString($conventions)+'.newInvalidInputErrorDefect('+escapedString($p.name->toOne())+'+": "+m,'+escapedString($class->elementToPath())+'))';
      
      'if (node.path('+escapedString($p.name->toOne())+').getNodeType() != JsonNodeType.MISSING){\n' +
      $propertyType->match([
         {c: Class<Any>[1] |
            let checked     = $conventions->className(Checked);
            let elementType = if(isJavaList($javaType), |elementTypeOfJavaList($javaType), |$javaType);
            let checkedType = javaParameterizedType($checked, $elementType);

            $conventions->codeType(javaList($checkedType))->codeToString($conventions)+' checked = acceptMany(node.path('+escapedString($p.name->toOne())+'), this::'+$c->readMethodName($conventions)+','+$defectRecorder+');\n' +
            '        for (int i=0; i<checked.size(); i++)\n' +
            '        {\n' +
            '            '+$conventions->codeType(javaList($conventions->defectClass()))->codeToString($conventions)+' propertyDefects = '++$conventions->accessCheckedDefects('checked.get(i)')+';\n' +
            if($p.multiplicity->isToOne() || $p.multiplicity->isZeroOne(),
               {|
                  '            '+$conventions->codeType($conventions->relativePathNodeClass())->codeToString($conventions)+' pathNode = i == 0\n'+
                  '                    ? '+$conventions->codeType($conventions->className(DataQualityBasicRelativePathNodeClass))->codeToString($conventions)+'.newRelativePathNode('+escapedString($p.name->toOne())+')\n' +
                  '                    : '+$conventions->codeType($conventions->className(DataQualityBasicRelativePathNodeClass))->codeToString($conventions)+'.newRelativePathNode('+escapedString($p.name->toOne())+', i);\n'
               },
               {|
                  '            '+$conventions->codeType($conventions->relativePathNodeClass())->codeToString($conventions)+' pathNode = '+$conventions->codeType($conventions->className(DataQualityBasicRelativePathNodeClass))->codeToString($conventions)+'.newRelativePathNode('+escapedString($p.name->toOne())+', i);\n'
               }
            )+
            '            defects.addAll(propertyDefects.stream().map(d -> '+$conventions->codeType($conventions->className(DataQualityBasicDefectClass))->codeToString($conventions)+'.prefixPath(d, pathNode)).collect('+$conventions->codeType(javaClass('java.util.stream.Collectors'))->codeToString($conventions)+'.toList()));\n' +
            '        }\n' +
            $variable+' = checked.stream().map(c -> '+$conventions->accessCheckedValue('c')+').filter(v -> v != null).collect('+$conventions->codeType(javaType('java.util.stream.Collectors'))->codeToString($conventions)+'.toList());\n';
         },
         {e: Enumeration<Any>[1] |
            $variable+' = acceptMany(node.path('+escapedString($p.name->toOne())+'), this::'+$e->readMethodName($conventions)+','+$defectRecorder+');\n';
         },
         {u: Unit[1] |
            $variable+' = acceptMany(node.path('+escapedString($p.name->toOne())+'), this::accept'+$propertyType.name->toOne()->sanitizeIdentifier()+','+$defectRecorder+');\n';
         },
         {a: Any[1] |
            $variable+' = acceptMany(node.path('+escapedString($p.name->toOne())+'), this::accept'+$propertyType.name->toOne()+','+$defectRecorder+');\n';
         }
      ]) + '}';
      
   });
   
   $propertyClauses->joinStrings('\n');
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::validateMultiplicities(class:Class<Any>[1], context:GenerationContext[1]): String[1]
{
   $context.typeInfos->allProperties($class)->map({p|
      let variable = '_'+$context.conventions->fieldName($p);
      let expected = $p.multiplicity->printMultiplicity();
      
      if($p.multiplicity->isToOne(),
         {|
            'if ('+$variable+'.size() != 1)\n'+
            '{\n'+
            '  defects.add('+$context.conventions->newClassStructureDefect('"Invalid multiplicity for '+$p.name->toOne()+': expected ['+$expected+'] found [" + '+$variable+'.size() + "]"', escapedString($class->elementToPath()))+');\n' +
            '}\n'
         },
         |
      if($p.multiplicity->hasLowerBound() && $p.multiplicity->hasUpperBound(),
         {|
            'if ('+$variable+'.size() < '+$p.multiplicity->getLowerBound()->toString()+' || '+$variable+'.size() > '+$p.multiplicity->getUpperBound()->toString()+')\n'+
            '{\n'+
            '  defects.add('+$context.conventions->newClassStructureDefect('"Invalid multiplicity for '+$p.name->toOne()+': expected ['+$expected+'] found [" + '+$variable+'.size() + "]"', escapedString($class->elementToPath()))+');\n' +
            '}\n'
         },
         |
      if($p.multiplicity->hasLowerBound(),
         {|
            'if ('+$variable+'.size() < '+$p.multiplicity->getLowerBound()->toString()+')\n'+
            '{\n'+
            '  defects.add('+$context.conventions->newClassStructureDefect('"Invalid multiplicity for '+$p.name->toOne()+': expected ['+$expected+'] found [" + '+$variable+'.size() + "]"', escapedString($class->elementToPath()))+');\n' +
            '}\n'
         },
         |
      if($p.multiplicity->hasUpperBound(),
         {|
            'if ('+$variable+'.size() > '+$p.multiplicity->getUpperBound()->toString()+')\n'+
            '{\n'+
            '  defects.add('+$context.conventions->newClassStructureDefect('"Invalid multiplicity for '+$p.name->toOne()+': expected ['+$expected+'] found [" + '+$variable+'.size() + "]"', escapedString($class->elementToPath()))+');\n' +
            '}\n'
         },
         {|
            ''
         }
      ))));      
   })->joinStrings('');
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::createObject(class:Class<Any>[1], proto:meta::java::metamodel::Class[1], path:String[1], context:GenerationContext[1]): String[1]
{   
   'this.stack.push(new '+$context.conventions->codeType($class->dataClass($path, $context.conventions))->codeToString($context.conventions)+'());\n'
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::returnCheckedObject(class:Class<Any>[1], proto:meta::java::metamodel::Class[1], path:String[1], context:GenerationContext[1]): String[1]
{
   let conventions            = $context.conventions;
   let dataClass              = $class->dataClass($path, $conventions);
   let objectAccess           = '(('+$conventions->codeType($dataClass)->codeToString($conventions)+') this.stack.peek())';
   let javaClass              = $conventions->className($class);
   let checked                = $conventions->className(Checked);
   let checkedResult          = javaParameterizedType($checked, $javaClass);

   let declaresAndGetters = $context.typeInfos->allProperties($class)->map({p|
      let variable = $conventions->fieldName($p);
      let value    = if($p.multiplicity->isToOne(),
                        | '_'+$variable+'.get(0)',
                        |
                     if($p.multiplicity->isZeroOne(),
                        | '_'+$variable+'.isEmpty() ? null : _'+$variable+'.get(0)',
                        | $conventions->codeType(javaType('java.util.Collections'))->codeToString($conventions)+'.unmodifiableList(_'+$variable+')'
                     ));
      
         $objectAccess+'.'+$variable+' = '+$value+';\n';
   })->joinStrings('');   

   'if (defects.stream().anyMatch(d -> '+$conventions->accessDefectEnforcementLevel('d')+' == '+$conventions->enforcementLevelCritical()+'))\n'+
   '{\n'+
   '    return '+$conventions->dynamicChecked($javaClass, 'defects', 'null', 'null')+';\n'+
   '}\n'+
   'else\n'+
   '{\n'+
   $declaresAndGetters+
   '    '+$conventions->codeType($javaClass)->codeToString($conventions)+' value = ('+$conventions->codeType($javaClass)->codeToString($conventions)+') this.stack.pop();\n' +
   '    return '+$conventions->dynamicChecked($javaClass, 'defects', 'null', 'value')+';\n'+
   '}';
}
                                  
function <<access.private>> meta::alloy::runtime::java::graphFetch::json::createAcceptMethod(type:Type[1], proto:meta::java::metamodel::Class[1], conventions:Conventions[1]): meta::java::metamodel::Method[1]
{
   let javaType         = $conventions->pureTypeToJavaType($type, PureOne);
   let acceptableNodes  = $conventions->jsonNodeTypesFor($type);
   let errorMessage     = j_variable(javaString(), 'errorMessage');
   let nodeParameter    = j_parameter(jsonNode(), 'node');
   let jThis            = j_this($proto);
   let exception        = j_parameter(javaIllegalArgumentException(), 'ex');

   javaMethod('private', $javaType, 'accept'+$type.name->toOne(), $nodeParameter, 
      [
        $errorMessage->j_declare(j_string('Unexpected node type:')->j_plus($nodeParameter->j_invoke('getNodeType', [], jsonNodeType())->j_plus(j_string(' for PURE ' + $type.name->toOne())))),
        $jThis->j_invoke('check', [javaArrays()->j_invoke('asList', $acceptableNodes, javaList(jsonNodeType())), $nodeParameter->j_invoke('getNodeType', [], jsonNodeType()), $errorMessage], javaVoid()),
   
        j_return($conventions->jsonNodeGetter($nodeParameter, $type))
      ]->j_try(j_catch($exception, $conventions->className(meta::pure::executionPlan::engine::DataParsingException)->j_new($exception->j_invoke('getMessage', [], javaString()))->j_throw())
   )->codesToString($proto)
   );
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::createEnumReadMethod(enum:Enumeration<Any>[1], context:GenerationContext[1]): meta::java::metamodel::Method[1]
{
   let conventions    = $context.conventions;
   let javaClass      = $conventions->className($enum);
   let qualifier      = $enum->elementToPath()+'.';
   let nodeParameter  = j_parameter(jsonNode(), 'node');
   
   javaMethod(['public'], $javaClass, $enum->readMethodName($conventions), $nodeParameter,
      $conventions->codeType(javaString())->codeToString($conventions)+' text  = acceptString(node);\n' +
      $conventions->codeType(javaString())->codeToString($conventions)+' value = text.startsWith('+escapedString($qualifier)+') ? text.substring('+$qualifier->length()->toString()+') : text;\n' +
      'return '+$conventions->codeType($javaClass)->codeToString($conventions)+'.valueOf(value);'
   );
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::createUnitAcceptMethod(type:Type[1], conventions:Conventions[1]): meta::java::metamodel::Method[1]
{
    let javaType                = $conventions->pureTypeToJavaType($type, PureOne);
    let simpleJavaName          = $type.name->toOne()->sanitizeIdentifier();
    let fullJavaName            = $javaType->meta::java::serialization::typePathToString(true)->sanitizeIdentifier();
    let acceptibleTokens        = $conventions->jacksonTokenTypesFor($type);
    let getCurrentTokenErrorMsg = '"Unexpected " + parser.getCurrentToken() + " for PURE '+ $type.name->toOne()+'"';
    let getNextTokenErrorMsg    = '"Unexpected " + parser.nextToken() + " for PURE '+ $type.name->toOne()+'"';
    let appendToRecord          = '    this.appendToRecord();\n';
    let nodeParameter           = j_parameter(jsonNode(), 'node');

    javaMethod('private', $javaType, 'accept' + $simpleJavaName, $nodeParameter,
       '    check(JsonNodeType.OBJECT, node.getNodeType(), "Unexpected " + node.getNodeType() + " for PURE '+ $type.name->toOne()+'");\n' + 
       '    check(JsonNodeType.ARRAY, node.path("unit").getNodeType(), "Unexpected unit" + node.path("unit").getNodeType() + " for PURE '+ $type.name->toOne()+'");\n' +  
       '    check(JsonNodeType.STRING, node.path("unit").path(0).path("unitId").getNodeType(), "Unexpected unitId" + node.path("unit").path(0).path("unitId").getNodeType() + " for PURE '+ $type.name->toOne()+'");\n' +  
       '    check(JsonNodeType.NUMBER, node.path("unit").path(0).path("exponentValue").getNodeType(), "Unexpected exponentValue" + node.path("unit").path(0).path("exponentValue").getNodeType() + " for PURE '+ $type.name->toOne()+'");\n' +                 
               

       '    check(JsonNodeType.NUMBER, node.path("value").getNodeType(), "Unexpected value" + node.path("value").getNodeType() + " for PURE '+ $type.name->toOne()+'");\n' +  
       '    Double unitValue = node.path("value").doubleValue();\n' +
       '    ' +$fullJavaName+' value = new ' + $simpleJavaName +'_Impl(unitValue);\n' +

       '    return value;\n'
    );
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::addReadCheckedObjects(proto:meta::java::metamodel::Class[1], data:GraphFetchModelToModelData[1], path:String[1], context:GenerationContext[1]): meta::java::metamodel::Class[1]
{
   let conv            = $context.conventions;
   let checkedClass    = $context.baseProject->toOne()->resolve($conv->className(Checked));
   let checkedSource   = javaParameterizedType($checkedClass, $data.sourceClass);
   let checked         = j_variable($checkedSource, 'object');
   let sourceRead      = $data.sourceTree.class->readMethodName($conv);
   let ioEx            = j_parameter(javaIOException(), 'e');
   let jThis           = j_this($proto);
   let recordType      = $conv->className(JsonDataRecord);
   let json            = j_variable(javaString(), 'json');
   let recordNumber    = j_variable(javaLong(), 'recordNumber');
   let source          = j_variable($recordType, 'source');
   let node            = j_variable(jsonNode(), 'node');
   
   $proto->addMethod(
      javaMethod('public', javaCollection($checkedSource), 'readCheckedObjects', [],
         [
            $jThis->j_field('recordCount')->j_inc(),                        
   
            $node->j_declare($jThis->j_field('objectMapper', objectMapper())->j_invoke('readValue', [$jThis->j_field('parser', jsonParser()), jsonNode()->j_field('class', javaClassType())], jsonNode())),                  
            $checked->j_declare($jThis->j_invoke($sourceRead, [$node], $checkedSource)),

            $recordNumber->j_declare($jThis->j_field('recordCount')),
            $json->j_declare($node->j_invoke('toString', [])),           
   
            $source->j_declare($recordType->j_newAnon([], [
               j_method('public', javaLong(), $conv->getterName('number'), [], $recordNumber->j_return()),
               j_method('public', javaString(), $conv->getterName('record'), [], $json->j_return())
            ])),
                                                               
            javaCollections()->j_invoke('singleton', $conv->dynamicChecked($conv->checkedGetDefects($checked), $source, $conv->checkedGetValue($checked)), javaCollection($checkedSource))->j_return()
         ]->j_ioExTryCatch()->codesToString($proto)
      )
   );
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::addConstructor(class:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   let in = j_parameter(javaInputStream(),'in');

   $class->addConstructor(
      javaConstructor([], [$in]->cast(@meta::java::metamodel::Parameter),
         [
            j_this($class)->j_field('in')->j_assign($in)
         ]->codesToString($class)
      )
   );
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::addInitReading(class:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   let jThis  = j_this($class);
   let parser = $jThis->j_field('parser');
   let objectMapper = $jThis->j_field('objectMapper');

   $class->addMethod(javaMethod('public', javaVoid(), 'initReading', [],
      [
         $parser->j_assign(jsonFactory()->j_new([])->j_invoke('createParser', $jThis->j_field('in'), jsonParser())),
         $objectMapper->j_assign(objectMapper()->j_new([]))
      ]->j_ioExTryCatch()->codesToString($class)
   ));
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::addMethodExist(class:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   let methodName = j_parameter(javaString(), 'name');
   
   $class->addMethod(javaMethod('private', javaBoolean(), 'readMethodExists', $methodName,
                                    
      'Method[] methods = this.getClass().getDeclaredMethods();\n' +
      'for (int i = 0; i < methods.length; i++) {\n' +
      '   if (methods[i].getName().equals(name)) return true;\n' +
      '};\n' +
      'return false;'                                
   ));
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::addMethodInvoke(class:meta::java::metamodel::Class[1]): meta::java::metamodel::Class[1]
{
   let methodName = j_parameter(javaString(), 'name');
   let jsonNode   = j_parameter(jsonNode(), 'node');
   
   $class->addMethod(javaMethod('private', javaObject(), 'readMethodInvoke', [$methodName, $jsonNode],
      'Method m = null;\n' +
      'try{\n' +
      '   m = this.getClass().getMethod(name, JsonNode.class);\n' +
      '}\n' +
      'catch (NoSuchMethodException e){throw new RuntimeException(e.getMessage());}\n' +
      'try{\n' +         
      '   return m.invoke(this, node);\n' +
      '}\n' +
      'catch (IllegalAccessException e){throw new RuntimeException(e.getMessage());}catch (InvocationTargetException e){throw new RuntimeException(e.getMessage());}' 
   ));
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::json::nextToken(parser:Code[1]): Code[1] { $parser->j_invoke('nextToken', [], jsonToken()); }
