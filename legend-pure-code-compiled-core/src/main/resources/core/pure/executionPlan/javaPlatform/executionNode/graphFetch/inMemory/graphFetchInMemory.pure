// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::*;
import meta::alloy::runtime::java::graphFetch::common::*;
import meta::alloy::runtime::java::graphFetch::inMemory::*;
import meta::alloy::runtime::java::naming::*;
import meta::alloy::runtime::java::platform::*;
import meta::alloy::runtime::java::typeInfo::*;
import meta::java::generation::code::*;
import meta::java::generation::convention::*;
import meta::java::generation::expression::*;
import meta::java::generation::utils::*;
import meta::java::metamodel::factory::*;
import meta::java::metamodel::project::*;
import meta::java::serialization::*;
import meta::java::tostring::*;
import meta::pure::dataQuality::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::*;
import meta::pure::mapping::modelToModel::inMemory::*;
import meta::pure::mapping::xStore::*;
import meta::pure::milestoning::*;
import meta::pure::router::extension::*;
import meta::pure::runtime::*;

function meta::alloy::runtime::java::graphFetch::inMemory::prepareForInMemoryGraphFetch(node: InMemoryGraphFetchExecutionNode[1], path: String[1], context: GenerationContext[1], debug: DebugContext[1]):GenerationContext[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') prepareForInMemory' + if($node->instanceOf(InMemoryRootGraphFetchExecutionNode),|'Root',|'Property') + 'GraphFetch\n', |''));
         
   let pureType        = $node->typeFromStoreLocalNode();
   let simpleType      = ^SimpleJavaType(pureType = $pureType, javaType = $context.conventions->className($pureType));
   let currentNodeInfo = $node->match([
      r : InMemoryRootGraphFetchExecutionNode[1]     | let childNodeInfo   = $context->nodeInfosForPath($path + '.n1')->toOne();
                                                       let returnType      = if($r.checked, | ^CheckedJavaType(checkedOf = $simpleType, source = $childNodeInfo.returnType), | $simpleType);
                                                       ^NodeInfo(path = $path, returnType = $returnType, graphFetchTrees = $childNodeInfo.graphFetchTrees);,
      
      p : InMemoryPropertyGraphFetchExecutionNode[1] | ^NodeInfo(path = $path, returnType = $simpleType)
   ]);
   
   ^$context(nodeInfos = $context.nodeInfos->concatenate($currentNodeInfo));
}

function meta::alloy::runtime::java::graphFetch::inMemory::generateInMemoryStoreGraphFetchProject(node: InMemoryGraphFetchExecutionNode[1], path: String[1], context: GenerationContext[1], extensions: RouterExtension[*], debug: DebugContext[1]):Project[1]
{
   $node->match([
      r : InMemoryRootGraphFetchExecutionNode[1]     | $r->generateInMemoryStoreRootNodeProject($path, $context, $extensions, $debug),
      p : InMemoryPropertyGraphFetchExecutionNode[1] | $p->generateInMemoryStorePropertyNodeProject($path, $context, $extensions, $debug)      
   ])
}

function meta::alloy::runtime::java::graphFetch::inMemory::enrichForInMemoryGraphExecution(class: meta::java::metamodel::Class[1], node: InMemoryGraphFetchExecutionNode[1], context: GenerationContext[1], extensions: RouterExtension[*], debug: DebugContext[1]): Project[1]
{
   let conventions  = $context.conventions;
   let currentClass = $node->typeFromStoreLocalNode();

   let allQualifiers        = $context.typeInfos->allQualifiedProperties($currentClass);
   let qualifiersProject    = $class->createQualifiedPropertiesForClass($allQualifiers, $conventions, $debug->indent());
   let constraintsProject   = $class->createConstraintCheckingForClass($currentClass, $context, $debug->indent());
   let sourceReferenceClass = $class
                                 ->addPropertyWithGetterAndSetter(inMemorySource(), javaObject(), $conventions)
                                 ->addPropertyWithGetterAndSetter($conventions->referencedObjectReference(), javaString(), $conventions);

   [$qualifiersProject, $constraintsProject, newProject()->addClass($sourceReferenceClass)]->mergeProjects();
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::generateInMemoryStoreRootNodeProject(node: InMemoryRootGraphFetchExecutionNode[1], path: String[1], context: GenerationContext[1], extensions: RouterExtension[*], debug: DebugContext[1]):Project[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') generateCodeForInMemoryRootGraphFetch\n', |''));
   
   let conventions    = $context.conventions;
   let graphFetchTree = $node.graphFetchTree->cast(@RoutedRootGraphFetchTree<Any>);
   let graphImpl      = $node->graphImplClass($path, $context);
   let currentSet     = $graphFetchTree.sets->toOne()->cast(@InstanceSetImplementation);
   let input          = j_parameter(javaObject(), 'input');
   
   let executeClassWithImports = $context.conventions->planNodeClass('public', $path, 'Execute')
      ->usingKnownPackages($conventions->knownPackages())
      ->imports($conventions->standardImports())
      ->imports([IReferencedObject, GraphInstance, IStoreStreamReadingExecutionNodeContext, IInMemoryRootGraphFetchExecutionNodeSpecifics]->map(x | $conventions->className($x)))
      ->implements($conventions->className(IInMemoryRootGraphFetchExecutionNodeSpecifics));

   let transformMethodCodes = $input->setTransformerCodes($currentSet, $graphFetchTree, $graphImpl, true, true, $context, $extensions, $debug);
   let transformMethod      = javaMethod(['public'], javaObject(), 'transform', [$input], $transformMethodCodes->codesToString($executeClassWithImports)); 
   
   let executeClass   = $executeClassWithImports->addMethod($transformMethod);
   let executeProject = newProject()->addClasses($executeClass);
   let allProjects    = $executeProject->concatenate($transformMethodCodes->dependencies()->resolveAndGetProjects())->toOneMany();
   
   $allProjects->mergeProjects();
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::generateInMemoryStorePropertyNodeProject(node: InMemoryPropertyGraphFetchExecutionNode[1], path: String[1], context: GenerationContext[1], extensions: RouterExtension[*], debug: DebugContext[1]):Project[1]
{
   print(if($debug.debug,|$debug.space+'('+$path+') generateCodeForInMemoryPropertyGraphFetch\n', |''));

   let conventions     = $context.conventions;
   let graphFetchTree  = $node.graphFetchTree->cast(@RoutedPropertyGraphFetchTree);

   let isMilestonedProp = $graphFetchTree.property->instanceOf(QualifiedProperty) && $graphFetchTree.property->hasGeneratedMilestoningPropertyStereotype();
   let property         = if ($isMilestonedProp,
                              | let cl = $graphFetchTree.property->functionType().parameters->evaluateAndDeactivate()->at(0).genericType.rawType->toOne()->cast(@Class<Any>);
                                $cl->propertyByName($graphFetchTree.property->edgePointPropertyName()->toOne())->toOne();,
                              | $graphFetchTree.property
                          )->cast(@Property<Nil,Any|*>);
   let propertyMappings = if ($isMilestonedProp,
                              | let cl = $graphFetchTree.property->functionType().parameters->evaluateAndDeactivate()->at(0).genericType.rawType->toOne()->cast(@Class<Any>);
                                $graphFetchTree.sets.parent.rootClassMappingByClass($cl)->cast(@InstanceSetImplementation).propertyMappingsByPropertyName($property.name->toOne())->toOne();,
                              | $graphFetchTree.propertyMapping
                          );
   
   let currentGraphImpl = $node->graphImplClass($path, $context);
   let parentPath       = $path->substring(0, $path->lastIndexOf('.'));
   let parentNodeInfo   = $context->nodeInfosForPath($parentPath)->toOne();
   let parentIFace      = $parentNodeInfo.returnType->match([c:CheckedJavaType[1]|$c.checkedOf, s:SimpleJavaType[1]|$s])->cast(@SimpleJavaType).javaType->cast(@meta::java::metamodel::Class);
   let parentGraphImpl  = graphImplClass($node.parentIndex->toOne(), $parentIFace, $parentPath, $context);
   
   let executeClassWithImports = 
      $context.conventions->planNodeClass('public', $path, 'Execute')
         ->usingKnownPackages($conventions->knownPackages())
         ->imports($conventions->standardImports())
         ->imports([IReferencedObject, GraphInstance, IStoreStreamReadingExecutionNodeContext, IInMemoryPropertyGraphFetchExecutionNodeSpecifics]->map(x | $conventions->className($x)))
         ->implements($conventions->className(IInMemoryPropertyGraphFetchExecutionNodeSpecifics));
   
   let propMappingTransformers = $propertyMappings->map({pm |
      let parentSet = $pm.owner->toOne()->cast(@InstanceSetImplementation);
      let parentSrc = j_parameter($conventions->className($parentSet->sourceClass($extensions)), 'src');
      let transform = $parentSet->generatePropertyMappingTransform($property, $pm, $parentSrc, $conventions, $extensions, $debug->indent());
      j_lambda($parentSrc, $transform);
   });
   
   let targetSetTransformers = $propertyMappings->map({pm |
      let targetSet = $graphFetchTree.sets->filter(x | $x.id == $pm.targetSetImplementationId)->toOne()->cast(@InstanceSetImplementation);
      let input     = j_parameter($conventions->className($targetSet->sourceClass($extensions)), 'input');
      j_lambda($input, $input->setTransformerCodes($targetSet, $graphFetchTree, $currentGraphImpl, false, false, $context, $extensions, $debug)->j_block());
   });
   
   let executeClassWithFields = $executeClassWithImports
      ->addFields($propMappingTransformers->map({pmt |
         let pmtType = $pmt.type->cast(@meta::java::metamodel::FunctionType);
         javaField(
            ['private', 'static', 'final'], javaFunction($pmtType.parameterTypes->at(0), $pmtType.returnType), 'propertyMappingTransformer_' + $propMappingTransformers->indexOf($pmt)->toString(),
            $pmt->codeToString($executeClassWithImports)
         );
      }))
      ->addFields($propertyMappings->map({pm |
         let pmIdx     = $propertyMappings->indexOf($pm);
         let tst       = $targetSetTransformers->at($pmIdx);
         let targetSet = $graphFetchTree.sets->filter(x | $x.id == $pm.targetSetImplementationId)->toOne()->cast(@InstanceSetImplementation);
         let targetSrc = $conventions->className($targetSet->sourceClass($extensions));
         javaField(
            ['private', 'static', 'final'], javaFunction($targetSrc, if($targetSet->hasExplodeProperty(),|$currentGraphImpl->javaStream(),|$currentGraphImpl)), 'targetSetTransformer_' + $targetSetTransformers->indexOf($tst)->toString(),
            $tst->codeToString($executeClassWithImports)
         );
      }));

   let graphObjects      = j_parameter(javaList(javaWildcard()), 'graphObjects');
   let graphObject       = j_parameter($parentGraphImpl, 'graphObject');
   let targetGraphObject = j_parameter($currentGraphImpl, 'targetGraphObject');
   
   let singlePropMappingStreamGenerator = {pm : PropertyMapping[1] |
      let pmIndex       = $propertyMappings->indexOf($pm);
      let pmTransformer = $executeClassWithFields->j_field('propertyMappingTransformer_' + $pmIndex->toString());
      let tsTransformer = $executeClassWithFields->j_field('targetSetTransformer_' + $pmIndex->toString());
      let pmtType       = $propMappingTransformers->at($pmIndex).type->cast(@meta::java::metamodel::FunctionType);
      let targetSet     = $graphFetchTree.sets->filter(x | $x.id == $pm.targetSetImplementationId)->toOne()->cast(@InstanceSetImplementation);
      let targetSrc     = j_parameter($conventions->className($targetSet->sourceClass($extensions)), 'targetSrc');

      $graphObjects
         ->j_streamOf()
         ->js_filter(j_lambda($graphObject, $graphObject->j_ne(j_null())))
         ->js_flatMap(
            j_lambda(
               $graphObject,
               $pmTransformer
                  ->j_invoke('apply', $graphObject->j_invoke($conventions->getterName(inMemorySource()), [], javaObject())->j_cast($pmtType.parameterTypes->at(0)), $pmtType.returnType)
                  ->j_streamOf()
                  ->map(x | if($targetSet->hasExplodeProperty(),
                               | $x->js_flatMap(j_lambda($targetSrc, $tsTransformer->j_invoke('apply', [$targetSrc] , $currentGraphImpl->javaStream()))),
                               | $x->js_map(j_lambda($targetSrc, $tsTransformer->j_invoke('apply', [$targetSrc] , $currentGraphImpl)))
                            )
                  )
                  ->js_map(
                     j_lambda(
                        $targetGraphObject,
                        $graphObject->j_invoke('add' + $property.name->toUpperFirstCharacter()->toOne(), $targetGraphObject, javaVoid())->concatenate(
                           if ($property.owner->instanceOf(Association),
                               | let otherProperty = $property.owner->cast(@Association).properties->filter(x | $x != $property)->toOne();
                                 $targetGraphObject->j_invoke('add' + $otherProperty.name->toUpperFirstCharacter()->toOne(), $graphObject, javaVoid());,
                               | []
                           )
                        )->concatenate(
                           $conventions->createGraphInstance($currentGraphImpl, $targetGraphObject)->j_return()
                        )->j_block()
                     )
                  )
            )
         );
   };

   let transformPropertyMethodCodes = $propertyMappings->tail()->fold({pm, stream |
      javaStream()->j_invoke('concat', [$stream, $singlePropMappingStreamGenerator->eval($pm)], javaStream($conventions->className(GraphInstance)))
   }, $singlePropMappingStreamGenerator->eval($propertyMappings->at(0)))->j_return();

   let transformPropertyMethod = javaMethod(['public'], javaStream($conventions->className(GraphInstance)), 'transformProperty', [$graphObjects], $transformPropertyMethodCodes->codesToString($executeClassWithFields));
   let executeClass            = $executeClassWithFields ->addMethod($transformPropertyMethod);
   let executeProject          = newProject()->addClasses($executeClass);

   let allProjects = $executeProject
      ->concatenate($propMappingTransformers->dependencies()->resolveAndGetProjects())
      ->concatenate($targetSetTransformers->dependencies()->resolveAndGetProjects())
      ->concatenate($transformPropertyMethodCodes->dependencies()->resolveAndGetProjects())
      ->toOneMany();
   
   $allProjects->mergeProjects();
}


/* Helper functions */

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::inMemorySource():String[1]
{
   'src$'
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::addPropertyWithGetterAndSetter(class: meta::java::metamodel::Class[1], propertyName: String[1], propertyType: meta::java::metamodel::Type[1], conventions: Conventions[1]): meta::java::metamodel::Class[1]
{
   let propertyFieldName = $conventions->fieldName($propertyName);
   let propertyField     = $class->j_this()->j_field($propertyFieldName, $propertyType);
   let setterParameter   = j_parameter($propertyType, $propertyName);
   
   $class
      ->addField(
         javaField(['private'], $propertyType, $propertyFieldName)
      )
      ->addMethod(
         javaMethod(['public'], $propertyType, $conventions->getterName($propertyName), [], $propertyField->j_return()->codesToString($class))
      )
      ->addMethod(
         javaMethod(['public'], javaVoid(), $conventions->setterName($propertyName), [$setterParameter], $propertyField->j_assign($setterParameter)->codesToString($class))
      );
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::setTransformerCodes(input: Code[1], set: InstanceSetImplementation[1], graphFetchTree: RoutedGraphFetchTree[1], graphImplClass: meta::java::metamodel::Class[1], wrapAsGraphInstance: Boolean[1], resolveToList: Boolean[1], context: GenerationContext[1], extensions: RouterExtension[*], debug: DebugContext[1]): Code[1..*]
{
   let conventions       = $context.conventions;
   let primitiveSubTrees = $graphFetchTree.subTrees->cast(@RoutedPropertyGraphFetchTree)->filter(st | $st.property->instanceOf(Property) && $st.property->isPrimitiveValueProperty());
   let setHasExplosion   = $set->hasExplodeProperty();
   let result            = j_variable($graphImplClass, 'result');
   let srcClass          = $set->sourceClass($extensions);
   let srcJavaClass      = $conventions->className($srcClass);
   let src               = j_variable($srcJavaClass, 'src');
   
   let transform = if ($setHasExplosion,
                       | $set->cast(@PureInstanceSetImplementation)->propertyExplosionCodes($primitiveSubTrees, $result, $graphImplClass, $src, $wrapAsGraphInstance, $resolveToList, $conventions, $extensions, $debug),
                       | let propertyValues = $primitiveSubTrees->map({st |
                            let prop = $st.property->cast(@Property<Nil,Any|*>);
                            $set->generatePropertyMappingTransform($prop, $set.propertyMappingsByPropertyName($prop.name->toOne())->head(), $src, $conventions, $extensions, $debug->indent());
                         });
                         let milestoneDateGetter   = {strategy: SingleDateTemporalStrategy[1] |
                            let propertyName = temporalStrategyToPropertyName($strategy);
                            let property     = $set.class->propertyByName($propertyName)->toOne()->cast(@Property<Nil,Any|*>);
                            pair($property, $src->j_invoke($conventions->getterName($propertyName), [], javaObject()));      
                         };
                         let milestoningDateValues = if ($set.class->isProcessingTemporal() && $srcClass->isProcessingTemporal(),
                                                         | $milestoneDateGetter->eval(^ProcessingTemporal()), 
                                                         |
                                                     if ($set.class->isBusinessTemporal() && $srcClass->isBusinessTemporal(),
                                                         | $milestoneDateGetter->eval(^BusinessTemporal()), 
                                                         |
                                                     if ($set.class->isBiTemporal() && $srcClass->isBiTemporal(),
                                                         | [$milestoneDateGetter->eval(^ProcessingTemporal()), $milestoneDateGetter->eval(^BusinessTemporal())],
                                                         | []
                                                     )));
                         $result->objectCreationCodes($graphImplClass, $src, $milestoningDateValues->concatenate($primitiveSubTrees.property->cast(@Property<Nil,Any|*>)->zip($propertyValues)), $wrapAsGraphInstance, $conventions);
                   );
   
   [$src->j_declare($input->j_cast($srcJavaClass))]->concatenate($set->applyTypeFilter($src, $transform, $context, $extensions, $debug->indent()))->toOneMany();
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::objectCreationCodes(var: Code[1], class: meta::java::metamodel::Class[1], src: Code[1], propertyAssignments: Pair<Property<Nil,Any|*>, Code>[*], wrapAsGraphInstance: Boolean[1], conventions: Conventions[1]): Code[1..*]
{
   let initializationCodes = [$var->j_declare($class->j_new([])), $var->j_invoke($conventions->setterName(inMemorySource()), $src, javaVoid())];
   let assignmentCodes     = $propertyAssignments->map(p | $var->j_invoke($conventions->setterName($p.first), $p.second, javaVoid()));
   let returnCodes         = if($wrapAsGraphInstance, | $conventions->createGraphInstance($class, $var), | $var)->j_return();

   $initializationCodes->concatenate($assignmentCodes)->concatenate($returnCodes)->toOneMany();
}


/* Property mapping helpers */

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::generatePropertyMappingTransform(setImpl: InstanceSetImplementation[1], property: Property<Nil,Any|*>[1], propertyMapping: PropertyMapping[0..1], src: Code[1], conventions: Conventions[1], extensions: RouterExtension[*], debug: DebugContext[1]): Code[1]
{
   print(if($debug.debug,|$debug.space+'generatePropertyMappingTransform: \''+$property.name->toOne()+'\'\n', |''));
   
   let isNoMappingPassThru       = $propertyMapping->isEmpty() && $property.owner->instanceOf(Class) && $setImpl->isNoMappingPassThru($property);
   let isNoMappingDefaultToEmpty = $propertyMapping->isEmpty() && $property.owner->instanceOf(Class) && $setImpl->isNoMappingDefaultToEmpty($property);
   let propertyJavaType          = $conventions->pureTypeToJavaType($property);

   if ($isNoMappingPassThru,
      {|
         let pureSetImpl    = $setImpl->cast(@PureInstanceSetImplementation);    
         let sourceProperty = $pureSetImpl->noMappingPassThruSourceProperty($property)->toOne();
         let sourceType     = $conventions->pureTypeToJavaType($sourceProperty);
         let callGetter     = $src->j_invoke($conventions->getterName($sourceProperty), [], $sourceType);
         
         if($propertyJavaType == $sourceType,
            | $callGetter,
            |
         if(isJavaList($propertyJavaType),
            | $callGetter->j_listOf($propertyJavaType),
            | $callGetter->j_cast($propertyJavaType)
         ));
      },
      {|
         if ($isNoMappingDefaultToEmpty,
            {| 
               if (isJavaList($propertyJavaType), 
                   | $propertyJavaType->j_emptyList(), 
                   | $propertyJavaType->j_null()
               )
            },
            {|
               let transformFunction = $propertyMapping->toOne()->match([ppm : PurePropertyMapping[1] | $ppm.transform]->concatenate($extensions.java_graphFetch_inMemory_generatePropertyMapping1)->toOneMany());
               let transformType     = $conventions->pureTypeToJavaType($transformFunction->functionReturnType(), $property->functionReturnMultiplicity());
               let javaExpression    = $transformFunction.expressionSequence->at(0)->evaluateAndDeactivate()->generateJava($conventions, $debug->indent());
               let valueTransformer  = $propertyMapping->toOne()->match([ppm : PurePropertyMapping[1] | $ppm.transformer]->concatenate($extensions.java_graphFetch_inMemory_generatePropertyMapping2)->toOneMany());
               let code              = if ($valueTransformer->isEmpty(), | $javaExpression, | $javaExpression->applyTransformer($valueTransformer->toOne(), $conventions, $debug->indent()));
               let returnType        = if ($valueTransformer->isEmpty(), | $transformType,  | if($transformType->isJavaList(), | $conventions->enumerationType($valueTransformer->toOne())->javaList(), | $conventions->enumerationType($valueTransformer->toOne())));

               if ($returnType == $code.type,
                   |$code,
                   |
               if ($returnType->isJavaList() && ($returnType->elementTypeOfJavaList() == $code.type->toBoxed()),
                   |$code->j_listOf($returnType),
                   |
               if ($returnType->isJavaList(),
                   |$code->j_listOf($returnType),
                   |$code->j_cast($returnType)
               )));
            }
         )
      }
  );
}


/* Filter helpers */

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::applyTypeFilter(set: InstanceSetImplementation[1], src: Code[1], withoutFilter: Code[1..*], context: GenerationContext[1], extensions: RouterExtension[*], debug: DebugContext[1]): Code[1..*]
{
   print(if($debug.debug,|$debug.space+'filter generation\n', |''));
   
   let pureSetFilterGeneration = {ps : PureInstanceSetImplementation[1] |
      if ($ps.filter->isNotEmpty(),
          | $ps.filter.expressionSequence->at(0)->evaluateAndDeactivate()->generateJava($context.conventions, $debug->indent())->j_if($withoutFilter, j_null()->j_return()),
          | $withoutFilter
      )
   };
   
   let otherSetsFilterGeneration = $extensions.java_graphFetch_inMemory_applyTypeFilter->map(f|$f->evaluate([list($set), list($src), list($withoutFilter), list($context), list($debug)])->cast(@Function<{Nil[1]->Code[1..*]}>));
   
   $set->match($pureSetFilterGeneration->concatenate($otherSetsFilterGeneration)->toOneMany());
}


/* Value transformer helpers */

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::applyTransformer(expression: Code[1], transformer: ValueTransformer<Any>[1], conventions: Conventions[1], debug: DebugContext[1]): Code[1]
{
   assert($transformer->instanceOf(EnumerationMapping), |'Unsupported transformer type: ' + $transformer->type()->elementToPath());
   
   print(if($debug.debug,|$debug.space+'applyTransformer\n', |''));

   let enumerationType  = $conventions->enumerationType($transformer);
   let transformerClass = $transformer->generateTransformer($conventions, $debug->indent());
   let transformrCode   = if ($expression.type->isJavaList(),
                              | $expression->j_streamOf()->js_map($transformerClass->j_methodReference('toDomainValue'))->js_resolve($enumerationType->javaList()),
                              | $transformerClass->j_invoke('toDomainValue', $expression)
                          );
   
   $transformrCode->dependsOn($transformerClass->typePathToString(true)->newDependency($transformerClass));
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::generateTransformer(transformer: ValueTransformer<Any>[1], conventions: Conventions[1], debug: DebugContext[1]): meta::java::metamodel::Class[1]
{
   assert($transformer->instanceOf(EnumerationMapping), |'Unsupported transformer type: ' + $transformer->type()->elementToPath());

   let em = $transformer->cast(@EnumerationMapping<Any>);
   
   print(if($debug.debug,|$debug.space+'generateTransformer: \''+$em.name->toOne()+'\'\n', |''));

   let enumType     = $conventions->enumerationType($transformer);
   let mapType      = javaMap(javaObject(), $enumType);
   let base         = $conventions->className($em.parent);
   let class        = ^$base(simpleName = $base.simpleName + '_EnumerationMapping_' + $em.name->toUpperFirstCharacter()->toOne());
   let fValuesField = javaField(['private', 'static', 'final'], $mapType, 'values', 'initValues()');
   let fValues      = $class->j_field($fValuesField);
   let values       = j_variable($mapType, 'values');
   
   let addValues = $em.enumValueMappings->map({evm |
      $evm.sourceValues
         ->map(sv | ^InstanceValue(genericType = ^GenericType(rawType = $sv->type()), multiplicity = PureOne, values = $sv)->evaluateAndDeactivate()->generateJava($conventions, $debug->indent()))
         ->map(sv | $values->j_invoke('put', [$sv, $enumType->j_field($evm.enum.name)]))
   });
   let initCode  = j_block($values->j_declare(javaTreeMap(javaObject(), $enumType)->j_new([]))->concatenate($addValues)->concatenate($values->j_return()));

   let in                = j_parameter(javaObject(), 'in');
   let toDomainValueCode = j_if($in->j_eq(j_null()),
                              j_null()->j_return(),
                              j_if(
                                 $fValues->j_invoke('containsKey', $in),
                                 $fValues->j_invoke('get', $in)->j_return(),
                                 javaIllegalArgumentException()->j_new([j_string('Unmapped value: ')->j_plus($in)])->j_throw()
                              )
                           );
                              
   javaClass(
      ['public'], $class, $fValuesField, 
      [
         pair(javaMethod(['private', 'static'], $mapType, 'initValues', []),     $initCode),
         pair(javaMethod(['public', 'static'],  $enumType,'toDomainValue', $in), $toDomainValueCode)
      ]
   );
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::enumerationType(conventions:Conventions[1], transformer: ValueTransformer<Any>[1]): meta::java::metamodel::Class[1]
{
   $conventions->className($transformer->cast(@EnumerationMapping<Any>).enumeration)
}


/* Property explosion helpers */

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::hasExplodeProperty(set: InstanceSetImplementation[1]): Boolean[1]
{
   $set->collectExplodeProperties()->size() > 0
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::collectExplodeProperties(set: InstanceSetImplementation[1]): Property<Nil,Any|*>[*]
{
   $set.allPropertyMappings()->filter(pm | $pm->isExplodeMapping()).property
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::isExplodeMapping(pm: PropertyMapping[1]): Boolean[1]
{
   $pm->match([
      ppm : PurePropertyMapping[1] | $ppm.explodeProperty->isTrue(),
      a   : Any[1]                 | false
   ])
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::explodePropertyListName(conventions: Conventions[1], prop: Property<Nil, Any|*>[1]): String[1]
{
   $conventions->fieldName($prop) + '_ExplodePropertyList$'
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::inMemory::propertyExplosionCodes(set: PureInstanceSetImplementation[1], primitiveSubTrees: RoutedPropertyGraphFetchTree[*], var: Code[1], class: meta::java::metamodel::Class[1], src: Code[1], wrapAsGraphInstance: Boolean[1], resolveToList: Boolean[1], conventions: Conventions[1], extensions: RouterExtension[*], debug: DebugContext[1]): Code[1..*]
{
   let javaIntStream       = javaClass('java.util.stream.IntStream');
   let explodeProperties   = $set->collectExplodeProperties();
   let explodePropertyVars = $explodeProperties->map(p | j_variable(javaList($conventions->pureTypeToJavaType($p)), $conventions->explodePropertyListName($p)));
   let explodeListLength   = j_variable(javaInt(), 'explodeListlength');
   let idx                 = j_parameter(javaInt(), 'idx');
   
   let explodeListInitCodes = $explodeProperties->size()->range()->map({i |
      let propertyMapping = $set.propertyMappingsByPropertyName($explodeProperties->at($i).name->toOne())->cast(@PurePropertyMapping);
      $explodePropertyVars->at($i)->j_declare($propertyMapping.transform.expressionSequence->at(0)->evaluateAndDeactivate()->generateJava($conventions->updateConventionsForExplosion(), $debug->indent()));                                    
   });
   
   let explodeListLengthCode = $explodeListLength->j_declare($explodePropertyVars->at(0)->j_invoke('size', [], javaInt()));
   let sameLengthCheckCodes  = $explodeProperties->tail()->size()->range()->map({i |
      j_if(
         $explodePropertyVars->at($i + 1)->j_invoke('size', [], javaInt())->j_ne($explodeListLength),
         javaIllegalArgumentException()->j_new(j_string('Explode properties do not have the same size.'))->j_throw()
      )
   });

   let returnElementType   = if($wrapAsGraphInstance, | $class->graphInstanceOf($conventions), | $class);
   let propertyValues = $primitiveSubTrees->map({st |
      let prop = $st.property->cast(@Property<Nil,Any|*>);
      if ($explodeProperties->contains($prop),
          | $explodePropertyVars->at($explodeProperties->indexOf($prop))->j_invoke('get', [$idx], $conventions->pureTypeToJavaType($prop)), 
          | $set->generatePropertyMappingTransform($prop, $set.propertyMappingsByPropertyName($prop.name->toOne())->head(), $src, $conventions, $extensions, $debug->indent())
      );
   });
   let transformLambdaCodes = $var->objectCreationCodes($class, $src, $primitiveSubTrees.property->cast(@Property<Nil,Any|*>)->zip($propertyValues), $wrapAsGraphInstance, $conventions);
   let mapToObjectCodes     = $javaIntStream
         ->j_invoke('range', [j_int(0), $explodeListLength], $javaIntStream)
         ->j_invoke('mapToObj', j_lambda($idx, $transformLambdaCodes->j_block()), $returnElementType->javaStream())
         ->map(x | if($resolveToList, | $x->js_resolve($returnElementType->javaList()), | $x))
         ->j_return();
   
   $explodeListInitCodes->concatenate($explodeListLengthCode)->concatenate($sameLengthCheckCodes)->concatenate($mapToObjectCodes)->toOneMany();
}
