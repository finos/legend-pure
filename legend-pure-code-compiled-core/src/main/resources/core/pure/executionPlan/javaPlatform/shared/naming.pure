// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::naming::*;
import meta::java::generation::convention::*;
import meta::java::metamodel::factory::*;
import meta::java::serialization::*;
import meta::pure::mapping::*;

function meta::alloy::runtime::java::naming::mappingAdaptorClassName(conventions:Conventions[1], set:SetImplementation[1]): meta::java::metamodel::Class[1]
{
   // Replace $ with __ otehrwise Java compile generates spurious inner class (...$..$1)
   let base     = $conventions->className($set.parent);
   let toName   = $conventions->identifier($set.id->toOne())->replace('$', '__');
   ^$base(simpleName=$base.simpleName+'_Adaptor_'+$toName);
}

function meta::alloy::runtime::java::naming::mapperClassName(conventions:Conventions[1], set:SetImplementation[1], extensions : meta::pure::router::extension::RouterExtension[*]): meta::java::metamodel::Class[1]
{
   // Replace $ with __ otehrwise Java compile generates spurious inner class (...$..$1)
   let base     = $conventions->className($set.parent);
   let fromName = $set->match([o:OperationSetImplementation[1]|$conventions->identifier($o.id),
                               s:SetImplementation[1]| $conventions->identifier($set->sourceClass($extensions).name->toOne())->replace('$', '__')]);
   let toName   = $conventions->identifier($set.id->toOne())->replace('$', '__');
   ^$base(simpleName=$base.simpleName+'_Mapper_'+$toName);
}

function meta::alloy::runtime::java::naming::enumerationMapperClassName(conventions:Conventions[1], set:SetImplementation[1], em:EnumerationMapping<Any>[1], extensions : meta::pure::router::extension::RouterExtension[*]): meta::java::metamodel::Class[1]
{
   let base = $conventions->mapperClassName($set, $extensions);
   ^$base(simpleName=$base.simpleName+'_'+$em.name->toUpperFirstCharacter()->toOne());
}

function meta::alloy::runtime::java::naming::implementationName(conventions:Conventions[1], set:InstanceSetImplementation[1], path:String[1]): meta::java::metamodel::Class[1]
{
   $conventions->planNodeClass('public', $path, $set.class.name->toUpperFirstCharacter()->toOne() + '_' + $set.id->toOne() + '_Impl');
}

function meta::alloy::runtime::java::naming::baseImplementationName(conventions:Conventions[1], sets:InstanceSetImplementation[*], resultClass: Class<Any>[1], path:String[1]): meta::java::metamodel::Class[1]
{
   $conventions->planNodeClass('public', $path, $resultClass.name->toUpperFirstCharacter()->toOne() + '_' + $sets.id->joinStrings('__') + '_BaseImpl');
}

function meta::alloy::runtime::java::naming::constraintCheckerClassName(conventions:Conventions[1], pe:PackageableElement[1]): meta::java::metamodel::Class[1]
{
   let base = $conventions->className($pe);
   ^$base(simpleName='ConstraintChecker'+$base.simpleName->toOne());
}

function meta::alloy::runtime::java::naming::planNodeClass(conventions:Conventions[1], modifiers:String[*], path:String[1], simpleName:String[1]): meta::java::metamodel::Class[1]
{
   javaClass($modifiers, javaPackage($conventions.basePackageName + '.plan.'+$path)->packageToString()+'.'+$simpleName);
}
