// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::*;
import meta::alloy::runtime::java::naming::*;
import meta::alloy::runtime::java::platform::*;
import meta::alloy::runtime::java::serialize::*;
import meta::alloy::runtime::java::typeInfo::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::engine::*;
import meta::pure::graphFetch::execution::*;
import meta::java::metamodel::factory::*;
import meta::java::generation::code::*;
import meta::java::generation::convention::*;
import meta::java::generation::expression::*;
import meta::java::metamodel::project::*;
import meta::java::serialization::*;

function <<access.private>> meta::alloy::runtime::java::prepareForPlatformNode(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], extensions : meta::pure::router::extension::RouterExtension[*], debug:DebugContext[1]):GenerationContext[1]
{   
   if($p.expression->cast(@FunctionExpression)->isSerialize($extensions),
      | prepareForSerialize($p, $path, $context, $debug),
      | if($p.expression->cast(@FunctionExpression)->isUnionOnGraphFetch(),
           | prepareForUnionOnGraphFetch($p, $path, $context, $extensions, $debug),
           | $context
        )
    );
}

function <<access.private>> meta::alloy::runtime::java::generateImplementionForPlatformNode(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], extensions : meta::pure::router::extension::RouterExtension[*], debug:DebugContext[1]):GeneratedCode[1]
{   
   if($p.expression->cast(@FunctionExpression).func == now__DateTime_1_,
      | generateImplementionForNow($context.conventions),
      |
   if($p.expression->cast(@FunctionExpression)->isSerialize($extensions),
      | generateImplementionForSerialize($p, $path, $context, $debug),
      |
   if($p.expression->cast(@FunctionExpression)->isParseObjectReferences(),
      | generateImplementationForParseObjectReferences($p, $path, $context, $extensions, $debug),
      |
   if($p.expression->cast(@FunctionExpression)->isUnionOnGraphFetch(),
      | generateImplementationForUnionOnGraphFetch($p, $path, $context, $extensions, $debug),
      | generateImplementionForExpression($p, $path, $context, $debug)
   ))));
}

function <<access.private>> meta::alloy::runtime::java::isParseObjectReferences(fe:FunctionExpression[1]):Boolean[1]
{
   $fe.func == parseObjectReferences_String_MANY__String_1__Any_MANY__Any_MANY_;
}

function <<access.private>> meta::alloy::runtime::java::generateImplementionForNow(conventions:Conventions[1]):GeneratedCode[1]
{   
   ^GeneratedCode(
      implementation = ^JavaPlatformImplementation
                       (
                          executionClassFullName = $conventions->className(PredefinedExpressions)->typePathToString(true),
                          executionMethodName    = 'now'
                       )
   );   
}

function <<access.private>> meta::alloy::runtime::java::generateImplementionForExpression(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], debug:DebugContext[1]):GeneratedCode[1]
{  
   let body            = $p.expression->generateJava($context.conventions, $debug)->j_return();
   let execClass       = $body->buildExecuteClass(iExecutionNodeContextParam($context.conventions), $path, $context.conventions);
   generatedCode(newProject()->addClass($execClass), $execClass);
}

function meta::alloy::runtime::java::getObjectReferenceParserHelperInterface(path:String[1], context:GenerationContext[1]):meta::java::metamodel::Class[1]
{
   let objectReferenceParam = j_parameter(javaString(), 'objectReferences');
   
   $context.conventions->planNodeClass(['public', 'interface'], $path, 'ObjectReferenceParserHelper')
                       ->imports(javaPackage('java.util'))
                       ->addMethod(javaMethod(['public'], javaObject(), 'parseObjectReference', [$objectReferenceParam]));
}

function meta::alloy::runtime::java::generateImplementationForParseObjectReferences(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], extensions : meta::pure::router::extension::RouterExtension[*], debug:DebugContext[1]):GeneratedCode[1]
{
   let conventions    	     = $context.conventions;

   let inputExpression       = $p.expression->cast(@FunctionExpression);
   let inputVarName          = $conventions->identifier($inputExpression.parametersValues->at(0)->cast(@VariableExpression).name);
   let storeType             = $inputExpression.parametersValues->at(1)->cast(@InstanceValue).values->toOne()->cast(@String);
   let args                  = $inputExpression.parametersValues->at(2)->cast(@InstanceValue).values;

   let objectRefParserIface  = getObjectReferenceParserHelperInterface($path, $context);
   let objectRefParserVar    = j_variable($objectRefParserIface, 'objectReferenceParserHelper');
   
   let objectRefParserImpls  = $extensions.java_parseObjectReference_getParseObjectReferenceImplClass->map(f | $f->eval($storeType, $args, $path, $context, $debug));
   assert($objectRefParserImpls->size() == 1, | 'Expected 1 Implementation of ObjectReferenceParserHelper for storeType - ' + $storeType + ' Found - ' + $objectRefParserImpls->size()->toString());
   let objectRefParserImpl   = $objectRefParserImpls->toOne();
   
   let executionContextVar   = iExecutionNodeContextParam($context.conventions);

   let objectRefs            = j_variable(javaList(javaString()), 'objectReferences');
   let lambdaParam           = j_parameter(javaString(), 'objRef');
   
   let listOfStringsType     = $executionContextVar->j_invoke('listType', javaString()->j_field('class', javaClassType()));

   let lambda                = j_lambda($lambdaParam, $objectRefParserVar->j_invoke('parseObjectReference', $lambdaParam, javaObject()))->nonNull();

   let executeBody           = j_block([
                                  $objectRefs->j_declare($executionContextVar->j_invoke('getResult', [j_string($inputVarName), $listOfStringsType], javaList(javaString()))),  
                                  $objectRefParserVar->j_declare(j_new($objectRefParserImpl, [])),
                                  $objectRefs->j_streamOf()->js_map($lambda)->j_return()
                               ]);

   let executeClass          = buildExecuteClass($executeBody, $executionContextVar, $path, $conventions);

   generatedCode(newProject()->addClasses([$objectRefParserIface, $objectRefParserImpl, $executeClass]), $executeClass);
}

function <<access.private>> meta::alloy::runtime::java::prepareForUnionOnGraphFetch(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], extensions : meta::pure::router::extension::RouterExtension[*], debug:DebugContext[1]):GenerationContext[1]
{
   let childNodeInfos = $context->childNodeInfosForPath($path);
   ^$context(nodeInfos = $context.nodeInfos->concatenate(^NodeInfo(path = $path, returnType = $childNodeInfos->at(0).returnType, graphFetchTrees = $childNodeInfos.graphFetchTrees->removeDuplicatesBy(x | $x.class))));
}

function <<access.private>> meta::alloy::runtime::java::generateImplementationForUnionOnGraphFetch(p:PureExpressionPlatformExecutionNode[1], path:String[1], context:GenerationContext[1], extensions : meta::pure::router::extension::RouterExtension[*], debug:DebugContext[1]):GeneratedCode[1]
{
   let conventions  = $context.conventions;
   let interface    = $conventions->className(IPlatformPureExpressionExecutionNodeGraphFetchUnionSpecifics);
   let executeClass = $conventions->planNodeClass('public', $path, 'Execute')->imports($interface)->implements($interface);
   generatedCode(newProject()->addClasses($executeClass), $executeClass);
}