// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::*;
import meta::alloy::runtime::java::graphFetch::common::*;
import meta::alloy::runtime::java::naming::*;
import meta::alloy::runtime::java::platform::*;
import meta::alloy::runtime::java::typeInfo::*;
import meta::java::generation::code::*;
import meta::java::generation::convention::*;
import meta::java::generation::utils::*;
import meta::java::metamodel::factory::*;
import meta::java::metamodel::project::*;
import meta::java::serialization::*;
import meta::pure::executionPlan::*;
import meta::pure::mapping::*;
import meta::pure::milestoning::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::router::extension::*;

function meta::alloy::runtime::java::graphFetch::common::prepareForGlobalGraphFetchNode(node: GlobalGraphFetchExecutionNode[1], path: String[1], context:GenerationContext[1], debug:DebugContext[1]):GenerationContext[1]
{
   if ($node.parentIndex->isEmpty(),
       |
         let localNodeInfo = $context->nodeInfosForPath($path + '.localGraph')->toOne();

         ^$context
         (
            typeInfos = $context.typeInfos
                           ->addForGraphFetchTree($node.graphFetchTree->byPassClusteringInfo())
                           ->map(ti| if($node.enableConstraints == true, |$ti->addConstraintsForGraphFetchTree($node.graphFetchTree->byPassClusteringInfoDeep()), |$ti)),
            nodeInfos = $context.nodeInfos->concatenate(^NodeInfo(path = $path, returnType = $localNodeInfo.returnType, graphFetchTrees = $node.graphFetchTree->byPassClusteringInfoDeep()->cast(@RootGraphFetchTree<Any>)->concatenate($localNodeInfo.graphFetchTrees)))
         );,
       | $context
   )
}

function meta::alloy::runtime::java::graphFetch::common::generateCodeForLocalGraphFetchNode(node: LocalGraphFetchExecutionNode[1], path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]):GeneratedCode[1]
{
   let implProject   = if($node.resultType->instanceOf(ClassResultType), | generateGraphNodeImplementation($node, $context, $path, $extensions, $debug), | []);
   let globalProject = generateTypes($context, $debug);
   let storeProject  = $node->match([
      i : meta::pure::mapping::modelToModel::graphFetch::executionPlan::InMemoryGraphFetchExecutionNode[1] | $i->meta::alloy::runtime::java::graphFetch::inMemory::generateInMemoryStoreGraphFetchProject($path, $context, $extensions, $debug)
   ]->concatenate(
      $extensions.java_graphFetch_generateCodeForLocalGraphFetchNode->map(f|$f->eval($path, $context, $extensions, $debug))
   )->toOneMany());

   generatedCode(
      mergeProjects($implProject->concatenate([$globalProject, $storeProject])->toOneMany()),
      $storeProject->resolve($context.conventions->planNodeClass('public', $path, 'Execute'))
   );
}

function meta::alloy::runtime::java::graphFetch::common::classSizeIdentifier():String[1]
{
   'classSize$'
}

function meta::alloy::runtime::java::graphFetch::common::instanceSizeIdentifier():String[1]
{
   'instanceSize$'
}

function meta::alloy::runtime::java::graphFetch::common::typeFromStoreLocalNode(storeLocalNode: LocalGraphFetchExecutionNode[1]):Class<Any>[1]
{
   if ($storeLocalNode.resultType->cast(@ClassResultType).setImplementations->size() > 1,
       | $storeLocalNode.resultType->cast(@ClassResultType).type->cast(@Class<Any>),
       | let setImpl = $storeLocalNode.resultType->cast(@ClassResultType).setImplementations->toOne()->cast(@InstanceSetImplementation);
         $setImpl.mappingClass->isNotEmpty()->if(| $setImpl.mappingClass->toOne(), | $setImpl.class);
   )
}

function meta::alloy::runtime::java::graphFetch::common::graphImplClass(storeLocalNode: LocalGraphFetchExecutionNode[1], path: String[1], context: GenerationContext[1]):meta::java::metamodel::Class[1]
{
   graphImplClass($storeLocalNode.nodeIndex, $context.conventions->className($storeLocalNode->typeFromStoreLocalNode()), $path, $context)
}

function meta::alloy::runtime::java::graphFetch::common::graphImplClass(nodeIndex: Integer[1], interface: meta::java::metamodel::Class[1], path: String[1], context: GenerationContext[1]):meta::java::metamodel::Class[1]
{
   $context.conventions
      ->planNodeClass('public', $path, 'GraphFetch_Node' + $nodeIndex->toString() + '_' + $interface.simpleName + '_Impl')
      ->usingKnownPackages($context.conventions->knownPackages())
      ->imports($context.conventions->standardImports())
      ->implements($interface);
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::common::generateGraphNodeImplementation(node: LocalGraphFetchExecutionNode[1], context: GenerationContext[1], path: String[1], extensions:RouterExtension[*], debug: DebugContext[1]):Project[1]
{
   let resultClass       = $node->typeFromStoreLocalNode();
   let implClass         = graphImplClass($node, $path, $context);
   let implProject       = newProject()->addClasses($implClass);
   let propertiesProject = $implClass->updateImplementationClassWithProperties($node, $resultClass, $context);
   let storeProject      = $implClass->updateImplementationClassWithStoreSpecificFieldsAndMethods($node, $context, $extensions, $debug);
   let mergedProject     = mergeProjects([$implProject, $propertiesProject, $storeProject]);
   let withSizeMethods   = $mergedProject->resolve($implClass)->updateImplementationClassWithInstanceSizeMethods($resultClass, $context);

   mergeProjects([$mergedProject, $withSizeMethods]);
}

function meta::alloy::runtime::java::graphFetch::common::createGraphInstance(conventions: Conventions[1], impl: meta::java::metamodel::Class[1], value: Code[1]): Code[1]
{
   j_newAnon(
      graphInstanceOf($impl, $conventions), [],
      [
         j_method(['public'], $impl, 'getValue', [], $value->j_return()),
         j_method(['public'], javaLong(), 'instanceSize', [], $value->j_invoke($conventions->getterName(instanceSizeIdentifier()), [], javaLong())->j_return())
      ]
   )
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::common::updateImplementationClassWithProperties(implClass: meta::java::metamodel::Class[1], node: LocalGraphFetchExecutionNode[1], nodeType: Class<Any>[1], context: GenerationContext[1]): Project[1]
{
   let conventions   = $context.conventions;
   let allProperties = $context.typeInfos->allProperties($nodeType);
   let fetchTree     = $node.graphFetchTree->cast(@RoutedGraphFetchTree);

   let withProperties = $allProperties->fold({p, javaClass |
      let fieldName   = $conventions->fieldName($p);
      let getterName  = $conventions->getterName($p);
      let fieldType   = $conventions->pureTypeToJavaType($p);

      let noMappingDefaultToEmpty = $p.owner->instanceOf(Class) && ($fetchTree.sets->size() == 1) && $fetchTree.sets->toOne()->defaultToEmptyProperty($p);
      let noMappingPassThru = $p.owner->instanceOf(Class) && ($fetchTree.sets->size() == 1) && $fetchTree.sets->toOne()->passThruProperty($p);

      if ($p.owner->instanceOf(Class) && ($fetchTree.sets->size() == 1) && $fetchTree.sets->toOne()->cast(@InstanceSetImplementation).propertyMappingsByPropertyName($p.name->toOne())->isEmpty() && !($p->hasGeneratedMilestoningDatePropertyStereotype()) && !($noMappingDefaultToEmpty || $noMappingPassThru),
         {|
            $javaClass->addMethod(javaMethod(['public'], $fieldType, $getterName, [], javaUnsupportedOperationException()->j_new(j_string('No mapping for property \'' + $p.name->toOne() +'\''))->j_throw()->codeToString($javaClass)))
         },
         {|
            let field  = j_this($javaClass)->j_field($fieldName, $fieldType);
            let param  = j_parameter($fieldType, $fieldName);
            let elType = if($fieldType->isJavaList(), | $fieldType->elementTypeOfJavaList(), | $fieldType);
            let object = j_parameter($elType, 'object');

            let getter = javaMethod(
               ['public'], $fieldType, $getterName, [],
               if($fieldType->isJavaList(),| j_conditional($field->j_eq(j_null()), j_emptyList($fieldType), $field),| $field)->j_return()->codeToString($javaClass)
            );
            let setter = javaMethod(
               ['public'], javaVoid(), $conventions->setterName($p), $param, 
               $field->j_assign($param)->codesToString($javaClass)
            );
            let adder  = javaMethod(
               ['public'], javaVoid(), 'add' + $fieldName->toUpperFirstCharacter()->toOne(), [$object],
               if ($fieldType->isJavaList(),
                   | [
                        $field->j_eq(j_null())->j_if($field->j_assign(javaArrayList($elType)->j_new([]))),
                        $field->j_invoke('add', [$object], javaVoid())
                     ],
                   | [
                        j_cast($field, javaObject())->j_ne(j_null())->j_if(javaIllegalStateException()->j_new(j_string('Found multiple objects for property \'' + $p.name->toOne() + '\' of multiplicity with bound 1'))->j_throw()),
                        $field->j_assign($object)
                     ]
               )->codesToString($javaClass)
            );

            $javaClass->addField(javaField(['private'], $fieldType, $fieldName))->addMethods([$getter, $setter, $adder]);
         }
      );
   }, $implClass);

   newProject()->addClasses($withProperties);
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::common::updateImplementationClassWithStoreSpecificFieldsAndMethods(implClass: meta::java::metamodel::Class[1], node: LocalGraphFetchExecutionNode[1], context: GenerationContext[1], extensions: RouterExtension[*], debug: DebugContext[1]): Project[1]
{
   $node->match([
      i : meta::pure::mapping::modelToModel::graphFetch::executionPlan::InMemoryGraphFetchExecutionNode[1] | $implClass->meta::alloy::runtime::java::graphFetch::inMemory::enrichForInMemoryGraphExecution($i, $context, $extensions, $debug)
   ]->concatenate($extensions.java_graphFetch_updateImplementationClassWithStoreSpecificFieldsAndMethods->map(f|$f->eval($implClass, $context, $extensions, $debug)))->toOneMany())
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::common::updateImplementationClassWithInstanceSizeMethods(implClass: meta::java::metamodel::Class[1], nodeType: Class<Any>[1], context: GenerationContext[1]): Project[1]
{
   let conventions = $context.conventions;

   let typePathToSizeMap = newMap([
      pair($conventions->pureTypeToJavaType(String, ZeroOne)->typePathToString(true), 24),
      pair($conventions->pureTypeToJavaType(Integer, PureOne)->typePathToString(true), 8),
      pair($conventions->pureTypeToJavaType(Integer, ZeroOne)->typePathToString(true), 24),
      pair($conventions->pureTypeToJavaType(Float, PureOne)->typePathToString(true), 8),
      pair($conventions->pureTypeToJavaType(Float, ZeroOne)->typePathToString(true), 24),
      pair($conventions->pureTypeToJavaType(Boolean, PureOne)->typePathToString(true), 1),
      pair($conventions->pureTypeToJavaType(Boolean, ZeroOne)->typePathToString(true), 17),
      pair($conventions->pureTypeToJavaType(Decimal, ZeroOne)->typePathToString(true), 92),
      pair($conventions->pureTypeToJavaType(Date, ZeroOne)->typePathToString(true), 64)
   ]);

   let jThis = j_this($implClass);
   let size  = javaLong()->j_variable('size');
   
   let classSizeMethod = javaMethod(
      ['private', 'static'], javaLong(), $conventions->getterName(classSizeIdentifier()), [],
      j_long(
         $implClass.fields
            ->filter(x | !$x.modifiers->contains(meta::java::metamodel::Modifier.Static))
            ->map(x | let size = $typePathToSizeMap->get($x.type->typePathToString(true));if($size->isEmpty(), | 24, | $size->toOne());)
            ->sum() + 12
      )->j_return()->codesToString($implClass)
   );

   let instanceSizeMethod = javaMethod(
      ['public'], javaLong(), $conventions->getterName(instanceSizeIdentifier()), [],
      $size->j_declare($implClass->j_invoke($conventions->getterName(classSizeIdentifier()), [], javaLong()))->concatenate(
         $implClass.fields
            ->filter(x | !$x.modifiers->contains(meta::java::metamodel::Modifier.Static))
            ->filter(x | $x.type->typePathToString(true) ==  $conventions->pureTypeToJavaType(String, ZeroOne)->typePathToString(true))
            ->map(x | j_if($jThis->j_field($x.name, javaString())->j_ne(j_null()), $size->j_assign($size->j_plus($jThis->j_field($x.name, javaString())->j_invoke('length', [], javaLong())))))
      )->concatenate(
         $implClass.fields
            ->filter(x | !$x.modifiers->contains(meta::java::metamodel::Modifier.Static))
            ->filter(x | $x.type->isJavaList())
            ->map(x |
               let elType = $x.type->elementTypeOfJavaList();
               j_if($jThis->j_field($x.name, javaString())->j_ne(j_null()),
                  j_for(j_parameter($elType, 'i'), $jThis->j_field($x.name),
                     j_if(j_parameter($elType, 'i')->j_ne(j_null()),
                        $size->j_assign($size->j_plus(if($typePathToSizeMap->get($elType->typePathToString(true))->isEmpty(), | j_long(20), | j_long($typePathToSizeMap->get($elType->typePathToString(true))->toOne() - 4))))->concatenate(
                           if ($elType->typePathToString(true) == $conventions->pureTypeToJavaType(String, ZeroOne)->typePathToString(true),
                               | $size->j_assign($size->j_plus(j_parameter($elType, 'i')->j_invoke('length', [], javaLong()))),
                               | []
                           )
                        )->toOneMany()
                     )->j_block()
                  )->j_block()
               );
            )
      )->concatenate(
         $size->j_return()
      )->codesToString($implClass)
   );

   newProject()->addClasses($implClass->addMethods([$classSizeMethod, $instanceSizeMethod]));
}


function <<access.private>> meta::alloy::runtime::java::graphFetch::common::defaultToEmptyProperty(setImpl:SetImplementation[1], property:AbstractProperty<Any>[1]):Boolean[1]
{
   !$property.multiplicity->hasLowerBound() && $property->functionReturnType().rawType->toOne()->instanceOf(DataType)
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::common::passThruProperty(setImpl:SetImplementation[1], property:AbstractProperty<Any>[1]):Boolean[1]
{
   $setImpl->meta::pure::mapping::modelToModel::inMemory::isNoMappingPassThru($property)
}