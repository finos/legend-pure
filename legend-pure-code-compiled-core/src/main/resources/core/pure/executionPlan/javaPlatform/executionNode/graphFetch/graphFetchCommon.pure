// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::*;
import meta::alloy::runtime::java::graphFetch::common::*;
import meta::alloy::runtime::java::naming::*;
import meta::alloy::runtime::java::typeInfo::*;
import meta::java::generation::code::*;
import meta::java::generation::convention::*;
import meta::java::generation::utils::*;
import meta::java::metamodel::factory::*;
import meta::java::metamodel::project::*;
import meta::java::serialization::*;
import meta::pure::mapping::*;
import meta::pure::executionPlan::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::router::extension::*;

function meta::alloy::runtime::java::graphFetch::common::prepareForGraphQuery(node: GraphFetchExecutionNode[1], path: String[1], context:GenerationContext[1], debug:DebugContext[1]):GenerationContext[1]
{
   let oldConventions = $context.conventions;
   ^$context(typeInfos = $context.typeInfos->addForGraphFetchTree($node.graphFetchTree->byPassClusteringInfo()), nodeInfos = $context.nodeInfos->concatenate(^NodeInfo(path=$path, returnType=^SimpleJavaType(pureType=$node.graphFetchTree->byPassClusteringInfo()->cast(@RootGraphFetchTree<Any>).class, javaType=$context.conventions->className($node.graphFetchTree->byPassClusteringInfo()->cast(@RootGraphFetchTree<Any>).class)))), conventions=^$oldConventions(getterNameStrategy  = {p:String[1] | 'get' + $p->toUpperFirstCharacter()->toOne()}, setterNameStrategy  = {p:String[1] | 'set' + $p->toUpperFirstCharacter()->toOne()}));
}

function meta::alloy::runtime::java::graphFetch::common::generateCodeForLocalGraphFetchNode(node: LocalGraphFetchExecutionNode[1], path:String[1], context:GenerationContext[1], extensions:RouterExtension[*], debug:DebugContext[1]):GeneratedCode[1]
{
   let implClass = if($node.resultType->instanceOf(PartialClassResultType), | meta::alloy::runtime::java::graphFetch::common::generateGraphNodeImplementation($node, $context, $path, $extensions, $debug), | []);
   let globalProject = generateInterfacesAndEnums($context, $debug->indent())->addClasses($implClass);
   let storeProject = $node->match($extensions.java_graphFetch_generateCodeForLocalGraphFetchNode->map(f|$f->eval($path, $context, $debug))->toOneMany());
   generatedCode(mergeProjects([$globalProject, $storeProject]), $storeProject->resolve($context.conventions->planNodeClass('public', $path, 'Execute')));
}

function meta::alloy::runtime::java::graphFetch::common::classSizeIdentifier():String[1]
{
   'classSize$'
}

function meta::alloy::runtime::java::instanceSizeIdentifier():String[1]
{
   'instanceSize$'
}

function meta::alloy::runtime::java::graphFetch::common::typeFromStoreLocalNode(storeLocalNode: LocalGraphFetchExecutionNode[1]):Class<Any>[1]
{
   let setImpl = $storeLocalNode.resultType->cast(@ClassResultType).setImplementations->toOne()->cast(@InstanceSetImplementation);
   $setImpl.mappingClass->isNotEmpty()->if(| $setImpl.mappingClass->toOne(), | $setImpl.class);
}

function meta::alloy::runtime::java::graphFetch::common::graphImplClass(storeLocalNode: LocalGraphFetchExecutionNode[1], path: String[1], context: GenerationContext[1]):meta::java::metamodel::Class[1]
{
   let conventions = $context.conventions;
   let resultClass = $storeLocalNode->typeFromStoreLocalNode();
   let interface = $conventions->className($resultClass);
   
   $conventions
      ->planNodeClass('public', $path, 'GraphFetch_Node' + $storeLocalNode.nodeIndex->toString() + '_' + $interface.simpleName + '_Impl')
      ->imports(javaPackage('java.util'))
      ->imports(javaClass('com.fasterxml.jackson.annotation.JsonProperty'))
      ->imports(javaClass('com.fasterxml.jackson.annotation.JsonIgnore'))
      ->implements($interface);
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::common::generateGraphNodeImplementation(node: LocalGraphFetchExecutionNode[1], context: GenerationContext[1], path: String[1], extensions:RouterExtension[*], debug: DebugContext[1]):meta::java::metamodel::Class[1]
{
   let resultClass = $node->typeFromStoreLocalNode();
   graphImplClass($node, $path, $context)
      ->updateImplementationClassWithProperties($resultClass, $context)
      ->updateImplementationClassWithQualifiedProperties($resultClass, $context)
      ->map(x | $node->match($extensions.java_graphFetch_generateGraphNodeImplementation->map(f|$f->eval($x, $context))->toOneMany()))
      ->updateImplementationClassWithInstanceSizeMethods($resultClass, $context);
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::common::updateImplementationClassWithProperties(implClass: meta::java::metamodel::Class[1], nodeType: Class<Any>[1], context: GenerationContext[1]): meta::java::metamodel::Class[1]
{
   let conventions = $context.conventions;
   let typeInfo = $context.typeInfos->forClass($nodeType);
   let jThis     = j_this($implClass);

   $context.typeInfos->allProperties($typeInfo)->fold({p, cl | 
      let fieldName = $conventions->fieldName($p);
      let fieldType = $conventions->pureTypeToJavaType($p);

      let field     = $jThis->j_field($fieldName, $fieldType);
      let param     = j_parameter($fieldType, $fieldName);
      let singlePropertyType = if ($p->functionReturnMultiplicity()->hasToOneUpperBound(), | $fieldType, | $fieldType->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(0));
      let objParam = j_parameter($singlePropertyType, 'object');

      $cl
         ->addField(
            javaField(['private'], $fieldType, $fieldName)
         )
         ->addMethod(
            javaMethod(
               ['public'], $fieldType, $conventions->getterName($p), [],
               if ($fieldType->isJavaList(),
                   | j_conditional($field->j_eq(j_null()), j_emptyList($fieldType), $field),
                   | $field
               )->j_return()->codeToString($cl)
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaVoid(), $conventions->setterName($p), $param, 
               $field->j_assign($param)->codesToString($cl)
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaVoid(), 'add' + $fieldName->toUpperFirstCharacter()->toOne(), [javaParam($singlePropertyType, 'object')], 
               if (!$p->functionReturnMultiplicity()->hasToOneUpperBound(),
                   | 
                     [
                        j_if($field->j_eq(j_null()), $field->j_assign(j_new(javaArrayList($singlePropertyType), []))),
                        $field->j_invoke('add', [$objParam], javaVoid())
                     ]->codesToString($cl),
                   |
                     [
                        j_if(j_cast($field, javaObject())->j_ne(j_null()), j_throw(j_new(javaRuntimeException(), j_string('Found multiple objects for property \'' + $p.name->toOne() + '\' of multiplicity with bound 1')))),
                        $field->j_assign($objParam)
                     ]->codesToString($cl)
               )
            )
         );
   }, $implClass);
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::common::updateImplementationClassWithQualifiedProperties(implClass: meta::java::metamodel::Class[1], nodeType: Class<Any>[1], context: GenerationContext[1]): meta::java::metamodel::Class[1]
{
   let conventions = $context.conventions;
   let typeInfo = $context.typeInfos->forClass($nodeType);
   let jThis     = j_this($implClass);

   $context.typeInfos->allQualifiedProperties($typeInfo)->fold({q, cl | 
      let fieldName = $conventions->fieldName($q);
      let mapName = $fieldName + '_QualifierMap';
      let keyType = javaList(javaList(javaWildcard()));
      let fieldType = $conventions->pureTypeToJavaType($q);

      let field     = $jThis->j_field($fieldName, $fieldType);
      let mapField     = $jThis->j_field($mapName, javaMap($keyType, $fieldType));
      let param     = j_parameter($fieldType, $fieldName);
      let keyVar = $keyType->j_variable('qualifierKey$');
      let existingVar = javaObject()->j_variable('existing$');
      let singlePropertyType = if ($q->functionReturnMultiplicity()->hasToOneUpperBound(), | $fieldType, | $fieldType->cast(@meta::java::metamodel::ParameterizedType).typeArguments->at(0));
      
      $cl
         ->addField(
            javaField(
               ['private'], javaMap($keyType, $fieldType), $mapName, j_new(javaParameterizedType(javaClass('java.util.HashMap'), [$keyType, $fieldType->toBoxed()]), [])->codesToString($cl)
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], $fieldType, $conventions->getterName($q), [$q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | javaParam($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name))], 
               [
                  $keyVar->j_declare(javaArrays()->j_invoke([javaList(javaWildcard())], 'asList', $q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | let param = j_parameter($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name); if($p.multiplicity->hasToOneUpperBound(), | javaArrays()->j_invoke('asList', $param, javaList(javaWildcard())), | $param);), $keyType)),
                  j_return($mapField->j_invoke('get', [$keyVar], $fieldType))
               ]->codesToString($cl)
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaMap($keyType, $fieldType), $conventions->getterName($q.name->toOne() + '_QualifierMap'), [],
               j_return($mapField)->codesToString($cl)
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaVoid(), $conventions->setterName($q), $q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | javaParam($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name))->concatenate(javaParam($fieldType, 'qualifierValue$')), 
               [
                  $keyVar->j_declare(javaArrays()->j_invoke([javaList(javaWildcard())], 'asList', $q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | let param = j_parameter($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name); if($p.multiplicity->hasToOneUpperBound(), | javaArrays()->j_invoke('asList', $param, javaList(javaWildcard())), | $param);), $keyType)),
                  $existingVar->j_declare($mapField->j_invoke('put', [$keyVar, j_parameter($fieldType, 'qualifierValue$')], javaObject()))
               ]
               ->concatenate(
                  if ($q->functionReturnMultiplicity()->hasToOneUpperBound(),
                      | j_if($existingVar->j_ne(j_null()), j_throw(j_new(javaRuntimeException(), j_string('Found multiple objects for property \'' + $q.name->toOne() + '\' of multiplicity with bound 1')))),
                      | []
                  )
               )->codesToString($cl)
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaVoid(), $conventions->setterName($q.name->toOne() + '_QualifierMap'), [javaParam(javaMap($keyType, $fieldType), 'qualifierMap$')],
               $mapField->j_assign(j_parameter(javaMap($keyType, $fieldType), 'qualifierMap$'))->codesToString($cl)
            )
         )
         ->addMethod(
            javaMethod(
               ['public'], javaVoid(), 'add' + $fieldName->toUpperFirstCharacter()->toOne(), $q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | javaParam($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name))->concatenate(javaParam($singlePropertyType, 'qualifierValue$')),
               [
                  $keyVar->j_declare(javaArrays()->j_invoke([javaList(javaWildcard())], 'asList', $q->functionType().parameters->evaluateAndDeactivate()->tail()->map(p | let param = j_parameter($conventions->pureTypeToJavaType($p.genericType.rawType->toOne(), $p.multiplicity), $p.name); if($p.multiplicity->hasToOneUpperBound(), | javaArrays()->j_invoke('asList', $param, javaList(javaWildcard())), | $param);), $keyType)),
                  $existingVar->j_declare($mapField->j_invoke('get', [$keyVar], javaObject()))
               ]
               ->concatenate(
                  if (!$q->functionReturnMultiplicity()->hasToOneUpperBound(),
                      | j_if(
                           $existingVar->j_eq(j_null()),
                           $mapField->j_invoke('put', [$keyVar, j_new(javaArrayList($singlePropertyType), javaArrays()->j_invoke('asList', [j_parameter($fieldType, 'qualifierValue$')], $fieldType))], javaObject()),
                           $mapField->j_invoke('get', [$keyVar], javaObject())->j_invoke('add', j_parameter($fieldType, 'qualifierValue$'), javaVoid())
                        ),
                      | [
                            j_if($existingVar->j_ne(j_null()), j_throw(j_new(javaRuntimeException(), j_string('Found multiple objects for property \'' + $q.name->toOne() + '\' of multiplicity with bound 1')))),
                            $mapField->j_invoke('put', [$keyVar, j_parameter($fieldType, 'qualifierValue$')], javaObject())
                        ]
                  )
               )->codesToString($cl)
            )
         );
   }, $implClass);
}

function <<access.private>> meta::alloy::runtime::java::graphFetch::common::updateImplementationClassWithInstanceSizeMethods(implClass: meta::java::metamodel::Class[1], nodeType: Class<Any>[1], context: GenerationContext[1]): meta::java::metamodel::Class[1]
{
   let conventions = $context.conventions;
   let typeInfo = $context.typeInfos->forClass($nodeType);
   let jThis     = j_this($implClass);
   let classLayoutClass = javaClass('org.openjdk.jol.info.ClassLayout');

   let classSizeFieldName =  $conventions->fieldName(classSizeIdentifier());
   let classSizeField  = $implClass->j_field($classSizeFieldName, javaClass('java.lang.Long'));
   let classSizeVar = javaLong()->j_variable('classSize');

   let instanceSizeFieldName =  $conventions->fieldName(instanceSizeIdentifier());
   let instanceSizeVar = javaLong()->j_variable('instanceSize');

   let primitiveTypes = [String, Boolean, Integer, Float, Decimal, Number, StrictDate, DateTime, Date];
   let boxedPrimitiveTypes = $primitiveTypes->map(x | $conventions->pureTypeToJavaType($x, ZeroOne));
   let boxedPrimitiveTypesCanonocialStrings = $boxedPrimitiveTypes->map(x | $x->typePathToString(true));
   
   $implClass
      ->imports($classLayoutClass)
      ->addField(
         javaField(['private', 'static'], javaClass('java.lang.Long'), $classSizeFieldName)
      )
      ->addMethod(
         javaMethod(
            ['private', 'static'], javaLong(), $conventions->getterName(classSizeIdentifier()), [],
            [
               j_if($classSizeField->j_eq(j_null()),
                  $classSizeVar->j_declare($classLayoutClass->j_invoke('parseClass', [$implClass->j_field('class', javaClassType())], $classLayoutClass)->j_invoke('instanceSize', [], javaLong()))
                  ->concatenate(
                     $implClass.fields
                        ->filter(x | ! $x.modifiers->contains(meta::java::metamodel::Modifier.Static))
                        ->filter(x | $x.type->typePathToString(true)->in($boxedPrimitiveTypesCanonocialStrings))
                        ->map(x | $classSizeVar->j_assign($classSizeVar->j_plus($classLayoutClass->j_invoke('parseClass', [$x.type->j_field('class', javaClassType())], $classLayoutClass)->j_invoke('instanceSize', [], javaLong()))))
                  )
                  ->concatenate(
                     $classSizeField->j_assign($classSizeVar)
                  )->toOneMany()
               ),
               j_return($classSizeField)
            ]->codesToString($implClass)
         )
      )
      ->addMethod(
         javaMethod(
            ['public'], javaLong(), $conventions->getterName(instanceSizeIdentifier()), [],
            $instanceSizeVar->j_declare($implClass->j_invoke($conventions->getterName(classSizeIdentifier()), [], javaLong()))
            ->concatenate(
               $implClass.fields
                     ->filter(x | ! $x.modifiers->contains(meta::java::metamodel::Modifier.Static))
                     ->filter(x | $x.type->typePathToString(true) ==  $conventions->pureTypeToJavaType(String, ZeroOne)->typePathToString(true))
                     ->map(x | j_if($jThis->j_field($x.name, javaString())->j_ne(j_null()), $instanceSizeVar->j_assign($instanceSizeVar->j_plus($jThis->j_field($x.name, javaString())->j_invoke('length', [], javaLong())))))
            )
            ->concatenate(
               j_return($instanceSizeVar)
            )
            ->codesToString($implClass)
         )
      );
}
