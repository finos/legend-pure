// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::treepath::*;
import meta::pure::router::extension::*;
import meta::pure::dataQuality::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::executionPlan::*;
import meta::pure::mapping::modelToModel::chain::*;
import meta::pure::mapping::modelToModel::inMemory::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;

import meta::alloy::runtime::java::*;

import meta::json::*;
import meta::flatData::runtime::*;

Class meta::pure::mapping::modelToModel::ModelStore extends meta::pure::store::Store
{
}

// TODO Is there a better way of breaking ModelConnection into Instances/Json
Class meta::pure::mapping::modelToModel::PureModelConnection extends Connection
{
}

Class meta::pure::mapping::modelToModel::ModelConnection extends PureModelConnection
{
   instances : Map<Class<Any>, List<Any>>[1];
}

// Only supported for Alloy
Class meta::pure::mapping::modelToModel::JsonModelConnection extends PureModelConnection
{
   class: Class<Any>[1];
   url  : String[1];
}

Class meta::pure::mapping::modelToModel::JsonDataRecord
{
   number : Integer[1];
   record : String[1];
}

Class meta::pure::mapping::modelToModel::XmlModelConnection extends PureModelConnection
{
   class: Class<Any>[1];
   url  : String[1];
}

Class meta::pure::mapping::modelToModel::XmlDataRecord
{
   number : Integer[1];
   record : String[1];
}

Class meta::pure::mapping::modelToModel::ModelChainConnection extends Connection
{
   mappings : Mapping[*];
}





Class meta::pure::mapping::modelToModel::ModelToModelExecutionNode extends ExecutionNode
{
   fd: FunctionDefinition<{->Any[*]}>[1];
   classes:Class<Any>[*];
   jsonPropertyPaths : LambdaFunction<{Nil[1]->Any[*]}>[*];
   
   connection: Connection[1];
   mapping: Mapping[1];
}

Class meta::pure::mapping::modelToModel::GraphFetchM2MExecutionNode extends ExecutionNode
{
   trees: RoutedGraphFetchTree[*];
   connections: Connection[*];
   mapping: Mapping[1];
   enableConstraints: Boolean[1];
}

Class meta::pure::mapping::modelToModel::JsonFeWithPropertyPaths
{
   fe: FunctionExpression[1];
   jsonPropertyPaths : LambdaFunction<{Nil[1]->Any[*]}>[*];
}




function meta::pure::mapping::modelToModel::inMemory::isNoMappingPassThru(setImpl:SetImplementation[1], property:AbstractProperty<Any>[1]):Boolean[1]
{
   $setImpl->match([
      pisi:PureInstanceSetImplementation[1] | $pisi->noMappingPassThruSourceProperty($property)->isNotEmpty(),
      si: SetImplementation[1]              | false;
   ])
}

function meta::pure::mapping::modelToModel::inMemory::isNoMappingDefaultToEmpty(setImpl:SetImplementation[1], property:AbstractProperty<Any>[1]):Boolean[1]
{
   $setImpl->match([
      pisi:PureInstanceSetImplementation[1] | !$property.multiplicity->hasLowerBound() && $property->functionReturnType().rawType->toOne()->instanceOf(DataType),
      si: SetImplementation[1]              | false;
   ])
}

function meta::pure::mapping::modelToModel::inMemory::noMappingPassThruSourceProperty(setImpl:PureInstanceSetImplementation[1], property:AbstractProperty<Any>[1]):AbstractProperty<Any>[0..1]
{
   let propertyType = $property.genericType.rawType->toOne();
   let srcProperty  = $setImpl.srcClass->filter(c| $c->instanceOf(Class))->cast(@Class<Any>)->map(c | $c->propertyByName($property.name->toOne()));
   
   let valid = $propertyType->instanceOf(DataType) && $srcProperty->match([
      s:Property<Nil,Any|*>[1] | $s.genericType.rawType->toOne()->subTypeOf($propertyType) && $property.multiplicity->multiplicitySubsumes($s.multiplicity),
      a:Any[*]                 | false
   ]);
   
   if($valid, |$srcProperty->toOne(), |[]);
}




function <<access.protected>> meta::pure::mapping::modelToModel::findMainClassInGetAllExpression(vs:ValueSpecification[1]):Class<Any>[1]
{
   let getAllFe = $vs->findExpressionsForFunctionInValueSpecification([getAll_Class_1__T_MANY_, getAll_Class_1__Date_1__T_MANY_, getAll_Class_1__Date_1__Date_1__T_MANY_]);
   if($getAllFe->isEmpty(), | Any, | $getAllFe.parametersValues->at(0)->cast(@ExtendedRoutedValueSpecification)->byPassRouterInfo()->cast(@InstanceValue).values->toOne()->cast(@Class<Any>));
}





function meta::pure::mapping::modelToModel::execution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:RouterExtension[*], debug:DebugContext[1]):Result<Any|*>[1]
{
   let connection = $runtime->connectionByElement($sq.store);
   $connection->match(
                        [
                           mc:ModelConnection[1]| executeInMemory($sq.fe, $ext->cast(@ExtendedRoutedValueSpecification), $m, $mc, $runtime, $sq.advancedRouting->toOne(), $exeCtx, $extensions, $debug),
                           mcc:ModelChainConnection[1]| executeChain($sq, $ext->cast(@ExtendedRoutedValueSpecification), $m, $mcc, $runtime, $exeCtx, $extensions, $debug)
                        ]
               );
}

function <<access.private>> meta::pure::mapping::modelToModel::planExecutionPure(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:meta::pure::router::extension::RouterExtension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let connection = $runtime->toOne()->connectionByElement($sq.store);
   $connection->match([
      mc: ModelConnection[1]| planExecutionInMemory($sq, $ext->cast(@ExtendedRoutedValueSpecification), $m, $mc, $runtime, $exeCtx, $extensions, $debug),
      mcc: ModelChainConnection[1]| planExecutionChain($sq, $ext->cast(@ExtendedRoutedValueSpecification), $m, $mcc, $runtime, $exeCtx, $extensions, $debug)
   ]);
}

function meta::pure::mapping::modelToModel::planExecution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extension:RouterExtension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   if($sq.fe->meta::pure::router::isUnionOnGraphFetch() || $sq.fe.func == graphFetch_T_MANY__RootGraphFetchTree_1__T_MANY_ || $sq.fe.func == graphFetchChecked_T_MANY__RootGraphFetchTree_1__Checked_MANY_,
      | planExecutionAlloy($sq, $ext, $m, $runtime, $exeCtx, $extension, $debug),
      | planExecutionPure($sq, $ext, $m, $runtime, $exeCtx, $extension, $debug)
   );
}

function meta::pure::mapping::modelToModel::supports(f:FunctionExpression[1]):Boolean[1]
{   
   !$f->isSerialize()
}

function <<access.private>> meta::pure::mapping::modelToModel::planExecutionAlloy(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:meta::pure::router::extension::RouterExtension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let graphFetchFe = if($sq.fe->meta::pure::router::isUnionOnGraphFetch() ,| $sq.fe.parametersValues->map(vs|$vs->byPassRouterInfo())->cast(@FunctionExpression)
                                                                           ,| $sq.fe);

   let fetchTrees = $graphFetchFe->map(fe| $fe.parametersValues->at(1)->byPassRouterInfo()->cast(@InstanceValue).values->cast(@ClusteredGraphFetchTree)->toOne().tree->cast(@RoutedRootGraphFetchTree<Any>));

   let resultClassType = $fetchTrees->at(0).class;
   let connections = $runtime->toOne().connections;
   let unsupportedConnections = $connections->filter(c|!($c->instanceOf(JsonModelConnection) || $c->instanceOf(ModelConnection) || $c->instanceOf(XmlModelConnection) || $extensions.unsupportedConnection->fold( {a,b | $a->eval($c) || $b}, true)));
   
   assert($unsupportedConnections->isEmpty(), 'Unsupported connection type(s) for Alloy graphFetch ModelToModel query: ' + $unsupportedConnections->map(c|$c->type()->elementToPath())->joinStrings());

   let resultType = ^ClassResultType
                     (
                        genericType        = if($sq.fe.func == graphFetchChecked_T_MANY__RootGraphFetchTree_1__Checked_MANY_,
                                                | ^GenericType(rawType=Checked, typeArguments=^GenericType(rawType=$resultClassType)),
                                                | []
                                             ),
                        type               = $resultClassType,
                        setImplementations = $fetchTrees.sets->cast(@SetImplementation)->meta::pure::router::routing::resolveOperation($m->toOne())
                     );
   ^GraphFetchM2MExecutionNode(
      resultType        = $resultType,
      trees             = $fetchTrees,
      connections       = $connections,
      mapping           = $m->toOne(),
      enableConstraints = $exeCtx.enableConstraints->isEmpty() || $exeCtx.enableConstraints->toOne()
   );
}

function meta::pure::mapping::modelToModel::plan::modelToModelPlanNodeToString(c:ModelToModelExecutionNode[1], space:String[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   'M2M\n'+$space+'('+header($c, $space, $extensions)+'\n'+$space+ '  connection = '+$c.connection->meta::pure::executionPlan::toString::connectionToString($extensions)+'\n' + if($c.jsonPropertyPaths->isNotEmpty(),| '  propertyPath = '+$c.jsonPropertyPaths->buildPropertyPathTree()->toJSON()+'\n',|'') + $space+')\n'
}

function meta::pure::mapping::modelToModel::plan::graphFetchPlanNodeToString(g:GraphFetchM2MExecutionNode[1], space:String[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   let trees = $g.trees->map(tree|$tree->asString(true)->replace('\n', '\n         '+$space));
   let connections = $g.connections->map(c|$c->meta::pure::executionPlan::toString::connectionToString($extensions));
   'GraphFetchM2M\n'+ $space+ '('+
      header($g, $space, $extensions) + '\n' +
      $space + if($g.trees->size()==1,| '  tree = '+$trees->toOne(),| '  trees = '+$trees->joinStrings('[',',',']')) + '\n'+
      $space + if($g.connections->size() == 1,|'  connection = '+$connections->toOne(),|'  connections = '+$connections->joinStrings('[',',',']')) + '\n'+
      $space + '  mapping = '+$g.mapping->elementToPath() +'\n'+
      $space + '  enableConstraints = ' + $g.enableConstraints->toString() + '\n' +
      $g.implementation->printImplementation('implementation', $space + '  ', $extensions)+
   $space+')\n';
}

function meta::pure::mapping::modelToModel::modelToModelConnectionToString(c:Connection[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   $c->match([mc:ModelConnection[1] | 'instances = "' +  $mc.instances->keyValues()->map(p|$p.second.values->map(v|pair($p.first->elementToPath(), $v->toJSON())))->makeString('{',',','}'),
              jmc:JsonModelConnection[1] | 'url = ' + $jmc.url + ', class = ' + $jmc.class->elementToPath(),
              xmc:XmlModelConnection[1] | 'url = ' + $xmc.url + ', class = ' + $xmc.class->elementToPath(),
              mcc:ModelChainConnection[1] | fail('ModelChainConnection not supported in Execution Plan');'';])
}


