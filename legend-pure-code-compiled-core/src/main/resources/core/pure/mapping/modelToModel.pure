// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::metamodel::treepath::*;
import meta::pure::router::extension::*;
import meta::pure::dataQuality::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::executionPlan::*;
import meta::pure::mapping::modelToModel::chain::*;
import meta::pure::mapping::modelToModel::inMemory::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::*;
import meta::pure::runtime::*;
import meta::pure::mapping::*;

import meta::alloy::runtime::java::*;

import meta::json::*;
import meta::flatData::runtime::*;

Class meta::pure::mapping::modelToModel::ModelStore extends meta::pure::store::Store
{
}

// TODO Is there a better way of breaking ModelConnection into Instances/Json
Class meta::pure::mapping::modelToModel::PureModelConnection extends Connection
{
}

Class meta::pure::mapping::modelToModel::ModelConnection extends PureModelConnection
{
   instances : Map<Class<Any>, List<Any>>[1];
}

// Only supported for Alloy
Class meta::pure::mapping::modelToModel::JsonModelConnection extends PureModelConnection
{
   class: Class<Any>[1];
   url  : String[1];
}

Class meta::pure::mapping::modelToModel::JsonDataRecord
{
   number : Integer[1];
   record : String[1];
}

Class meta::pure::mapping::modelToModel::XmlModelConnection extends PureModelConnection
{
   class: Class<Any>[1];
   url  : String[1];
}

Class meta::pure::mapping::modelToModel::XmlDataRecord
{
   number : Integer[1];
   record : String[1];
}

Class meta::pure::mapping::modelToModel::ModelChainConnection extends Connection
{
   mappings : Mapping[*];
}





Class meta::pure::mapping::modelToModel::ModelToModelExecutionNode extends ExecutionNode
{
   fd: FunctionDefinition<{->Any[*]}>[1];
   classes:Class<Any>[*];
   jsonPropertyPaths : LambdaFunction<{Nil[1]->Any[*]}>[*];
   
   connection: Connection[1];
   mapping: Mapping[1];
}

Class <<doc.deprecated>> meta::pure::mapping::modelToModel::GraphFetchM2MExecutionNode extends ExecutionNode
{
   trees: RoutedGraphFetchTree[*];
   connections: Connection[*];
   mapping: Mapping[1];
   enableConstraints: Boolean[1];
}

Class meta::pure::mapping::modelToModel::JsonFeWithPropertyPaths
{
   fe: FunctionExpression[1];
   jsonPropertyPaths : LambdaFunction<{Nil[1]->Any[*]}>[*];
}




function meta::pure::mapping::modelToModel::inMemory::isNoMappingPassThru(setImpl:SetImplementation[1], property:AbstractProperty<Any>[1]):Boolean[1]
{
   $setImpl->match([
      pisi:PureInstanceSetImplementation[1] | $pisi->noMappingPassThruSourceProperty($property)->isNotEmpty(),
      si: SetImplementation[1]              | false;
   ])
}

function meta::pure::mapping::modelToModel::inMemory::isNoMappingDefaultToEmpty(setImpl:SetImplementation[1], property:AbstractProperty<Any>[1]):Boolean[1]
{
   !$property.multiplicity->hasLowerBound() && $property.owner->instanceOf(Class);
}

function meta::pure::mapping::modelToModel::inMemory::noMappingPassThruSourceProperty(setImpl:PureInstanceSetImplementation[1], property:AbstractProperty<Any>[1]):AbstractProperty<Any>[0..1]
{
   let propertyType = $property.genericType.rawType->toOne();
   let srcProperty  = $setImpl.srcClass->filter(c| $c->instanceOf(Class))->cast(@Class<Any>)->map(c | $c->propertyByName($property.name->toOne()));
   
   let valid = $propertyType->instanceOf(DataType) && $srcProperty->match([
      s:Property<Nil,Any|*>[1] | $s.genericType.rawType->toOne()->_subTypeOf($propertyType) && $property.multiplicity->multiplicitySubsumes($s.multiplicity),
      a:Any[*]                 | false
   ]);
   
   if($valid, |$srcProperty->toOne(), |[]);
}




function <<access.protected>> meta::pure::mapping::modelToModel::findMainClassInGetAllExpression(vs:ValueSpecification[1]):Class<Any>[1]
{
   let getAllFe = $vs->findExpressionsForFunctionInValueSpecification([getAll_Class_1__T_MANY_, getAll_Class_1__Date_1__T_MANY_, getAll_Class_1__Date_1__Date_1__T_MANY_]);
   if($getAllFe->isEmpty(), | Any, | $getAllFe.parametersValues->at(0)->cast(@ExtendedRoutedValueSpecification)->byPassRouterInfo()->cast(@InstanceValue).values->toOne()->cast(@Class<Any>));
}





function meta::pure::mapping::modelToModel::execution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[1], runtime:Runtime[1], exeCtx:ExecutionContext[1], extensions:RouterExtension[*], debug:DebugContext[1]):Result<Any|*>[1]
{
   let connection = $runtime->connectionByElement($sq.store);
   $connection->match(
                        [
                           mc:ModelConnection[1]| executeInMemory($sq.fe, $ext->cast(@ExtendedRoutedValueSpecification), $m, $mc, $runtime, $sq.advancedRouting->toOne(), $exeCtx, $extensions, $debug),
                           mcc:ModelChainConnection[1]| executeChain($sq, $ext->cast(@ExtendedRoutedValueSpecification), $m, $mcc, $runtime, $exeCtx, $extensions, $debug)
                        ]
               );
}

function <<access.private>> meta::pure::mapping::modelToModel::planExecutionPure(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extensions:meta::pure::router::extension::RouterExtension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let connection = $runtime->toOne()->connectionByElement($sq.store);
   $connection->match([
      mc: ModelConnection[1]| planExecutionInMemory($sq, $ext->cast(@ExtendedRoutedValueSpecification), $m, $mc, $runtime, $exeCtx, $extensions, $debug),
      mcc: ModelChainConnection[1]| planExecutionChain($sq, $ext->cast(@ExtendedRoutedValueSpecification), $m, $mcc, $runtime, $exeCtx, $extensions, $debug)
   ]);
}

function meta::pure::mapping::modelToModel::planExecution(sq:meta::pure::mapping::StoreQuery[1], ext:RoutedValueSpecification[0..1], m:Mapping[0..1], runtime:Runtime[0..1], exeCtx:ExecutionContext[1], extension:RouterExtension[*], debug:DebugContext[1]):ExecutionNode[1]
{
   let fe = $sq.fe->evaluateAndDeactivate()->cast(@FunctionExpression);
   if ($fe->meta::pure::router::isUnionOnGraphFetch() || $fe.func->in(graphFetchFunctions()),
       | planInMemoryGraphFetchExecution($sq, $ext, $m->toOne(), $runtime->toOne(), $exeCtx, $extension, $debug),
       | planExecutionPure($sq, $ext, $m, $runtime, $exeCtx, $extension, $debug)
   );
}

function meta::pure::mapping::modelToModel::supports(f:FunctionExpression[1]):Boolean[1]
{   
   !($f->isSerialize() || $f->isLetFunction())
}

function meta::pure::mapping::modelToModel::plan::modelToModelPlanNodeToString(c:ModelToModelExecutionNode[1], space:String[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   'M2M\n'+$space+'('+header($c, $space, $extensions)+'\n'+$space+ '  connection = '+$c.connection->meta::pure::executionPlan::toString::connectionToString($extensions)+'\n' + if($c.jsonPropertyPaths->isNotEmpty(),| '  propertyPath = '+$c.jsonPropertyPaths->buildPropertyPathTree()->toJSON()+'\n',|'') + $space+')\n'
}

function meta::pure::mapping::modelToModel::modelToModelConnectionToString(c:Connection[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   $c->match([mc:ModelConnection[1] | 'instances = "' +  $mc.instances->keyValues()->map(p|$p.second.values->map(v|pair($p.first->elementToPath(), $v->toJSON())))->makeString('{',',','}'),
              jmc:JsonModelConnection[1] | 'url = ' + $jmc.url + ', class = ' + $jmc.class->elementToPath(),
              xmc:XmlModelConnection[1] | 'url = ' + $xmc.url + ', class = ' + $xmc.class->elementToPath(),
              mcc:ModelChainConnection[1] | fail('ModelChainConnection not supported in Execution Plan');'';])
}




// Strategic in memory graph fetch flow

###Pure
import meta::flatData::runtime::*;
import meta::flatData::transfer::*;
import meta::pure::dataQuality::*;
import meta::pure::executionPlan::*;
import meta::pure::executionPlan::toString::*;
import meta::pure::graphFetch::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::graphFetch::executionPlan::*;
import meta::pure::graphFetch::routing::*;
import meta::pure::mapping::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::mapping::modelToModel::graphFetch::executionPlan::*;
import meta::pure::mapping::xStore::*;
import meta::pure::milestoning::*;
import meta::pure::router::clustering::*;
import meta::pure::router::extension::*;
import meta::pure::router::routing::*;
import meta::pure::runtime::*;
import meta::pure::store::*;

Class meta::pure::mapping::modelToModel::graphFetch::executionPlan::StoreStreamReadingExecutionNode extends ExecutionNode
{
   graphFetchTree    : RootGraphFetchTree<Any>[1];
   store             : Store[0..1];
   connection        : Connection[1];
   enableConstraints : Boolean[1];
   checked           : Boolean[1];
}

Class <<typemodifiers.abstract>> meta::pure::mapping::modelToModel::graphFetch::executionPlan::InMemoryGraphFetchExecutionNode extends LocalGraphFetchExecutionNode
{
   children : InMemoryGraphFetchExecutionNode[*];
}

Class meta::pure::mapping::modelToModel::graphFetch::executionPlan::InMemoryPropertyGraphFetchExecutionNode extends InMemoryGraphFetchExecutionNode
{
}

Class meta::pure::mapping::modelToModel::graphFetch::executionPlan::InMemoryRootGraphFetchExecutionNode extends InMemoryGraphFetchExecutionNode
{
   batchSize : Integer[0..1];
   checked   : Boolean[1];
}

function meta::pure::mapping::modelToModel::graphFetch::executionPlan::planInMemoryGraphFetchExecution(sq: StoreQuery[1], ext: RoutedValueSpecification[0..1], mapping: Mapping[1], runtime: Runtime[1], exeCtx: ExecutionContext[1], extensions: RouterExtension[*], debug: DebugContext[1]): ExecutionNode[1]
{
   let fe = $sq.fe->evaluateAndDeactivate();
   if ($fe->meta::pure::router::isUnionOnGraphFetch(),
       | planInMemoryRouterUnionGraphFetchExecution($sq, $ext, $mapping->toOne(), $runtime->toOne(), $exeCtx, $extensions, $debug),
       | assert($fe.func->in(graphFetchFunctions()), | 'Non graphFetch function encountered');

         let sets    = $fe.parametersValues->evaluateAndDeactivate()->at(1)->cast(@InstanceValue).values->at(0)->cast(@ClusteredGraphFetchTree).tree->cast(@RoutedRootGraphFetchTree<Any>).sets;
         let isUnion = ($sets->size() > 1) || ($sets->toOne()->instanceOf(OperationSetImplementation) && $sets->toOne()->cast(@OperationSetImplementation).operation == meta::pure::router::operations::union_OperationSetImplementation_1__SetImplementation_MANY_);
         
         if ($isUnion,
             | let resolvedSets = if($sets->size() > 1, | $sets, | $sets->toOne()->cast(@OperationSetImplementation)->meta::pure::router::routing::resolveOperation($mapping->toOne()))->cast(@InstanceSetImplementation);
               planInMemoryStoreUnionGraphFetchExecution($sq, $ext, $resolvedSets, $mapping->toOne(), $runtime->toOne(), $exeCtx, $extensions, $debug);,
             | planGraphFetchExecution($sq, $ext, $mapping->toOne(), $runtime->toOne(), $exeCtx, $extensions, $debug)
         );
   );
}

function meta::pure::mapping::modelToModel::graphFetch::executionPlan::planRootGraphFetchExecutionInMemory(sq: StoreQuery[1], ext: RoutedValueSpecification[0..1], clusteredTree: ClusteredGraphFetchTree[1], orderedPaths: String[*], mapping: Mapping[1], runtime: Runtime[1], exeCtx: ExecutionContext[1], enableConstraints: Boolean[1], checked: Boolean[1], extensions: meta::pure::router::extension::RouterExtension[*], debug: DebugContext[1]): InMemoryRootGraphFetchExecutionNode[1]
{
   let store       = $sq.store;
   let fe          = $sq.fe->evaluateAndDeactivate();
   let rootTree    = $clusteredTree->byPassClusteringInfo()->cast(@RoutedRootGraphFetchTree<Any>);
   let batchSize   = if($fe.func == graphFetch_T_MANY__RootGraphFetchTree_1__Integer_1__T_MANY_, | $fe->instanceValuesAtParameter(2, $sq.inScopeVars)->toOne()->cast(@Integer), | 1);

   let connection = if ($sq.store->instanceOf(ModelStore),
                        | let sourceClass = $rootTree.sets->toOne()->cast(@PureInstanceSetImplementation).srcClass->toOne(); 
                          $runtime.connections->filter(c|$c.element->instanceOf(ModelStore) && $c->match([
                             j : JsonModelConnection[1] | $j.class == $sourceClass,
                             x : XmlModelConnection[1]  | $x.class ==  $sourceClass,
                             m : ModelConnection[1]     | true
                          ]));,
                        | $runtime->connectionByElement($store)
                    )->toOne();
   
   let sourceTree = $connection->match([
      f : FlatDataConnection[1] | #{ParsedFlatData{typeName, values{label, value->subType(@ParsedFlatData) {typeName, values {label, value}}, value}}}#,
      c : Connection[1]         | calculateSourceTree($rootTree, $mapping, $extensions)
   ]);
   let sourceTreeExtended = if($enableConstraints, | $sourceTree->ensureConstraintsRequirements(), | $sourceTree);
   
   ^InMemoryRootGraphFetchExecutionNode
   (
      resultType        = $rootTree->resultTypeFromGraphFetchTree(),
      nodeIndex         = 0,
      graphFetchTree    = $rootTree,
      batchSize         = $batchSize,
      checked           = $checked,
      children          = $rootTree->generateInMemoryChildGraphNodes($rootTree->nodePathName(), $orderedPaths, $debug),
      executionNodes    = ^StoreStreamReadingExecutionNode
                          (
                             resultType        = ^PartialClassResultType
                                                 (
                                                    type = $sourceTreeExtended->typeFromGraphFetchTree(),
                                                    propertiesWithParameters = $sourceTreeExtended.subTrees->cast(@PropertyGraphFetchTree)->map(x | $x->map(x | ^PropertyWithParameters(property = $x.property, parameters = $x.parameters)))
                                                 ),
                             graphFetchTree    = $sourceTreeExtended,
                             store             = $store,
                             connection        = $connection,
                             enableConstraints = $enableConstraints,
                             checked           = $checked
                          )
   );
}

function <<access.private>> meta::pure::mapping::modelToModel::graphFetch::executionPlan::generateInMemoryChildGraphNodes(tree: RoutedGraphFetchTree[1], parentPath: String[1], orderedPaths: String[*], debug: DebugContext[1]): InMemoryGraphFetchExecutionNode[*]
{
   $tree.subTrees->cast(@RoutedPropertyGraphFetchTree)->map({st | 
      if (!$st.property->isPrimitiveValueProperty() && (!$st.property->instanceOf(QualifiedProperty) || $st.property->hasGeneratedMilestoningPropertyStereotype()),
         {| 
            let property    = $st.property;
            let currentPath = $parentPath + '.' + $st->nodePathName();

            assert($parentPath->in($orderedPaths),   | 'Unknown path ' + $parentPath  + '; known are: ' + $orderedPaths->joinStrings('[', '; ', ']'));
            assert($currentPath->in($orderedPaths),  | 'Unknown path ' + $currentPath + '; known are: ' + $orderedPaths->joinStrings('[', '; ', ']'));
            
            ^InMemoryPropertyGraphFetchExecutionNode
            (
               resultType        = $st->resultTypeFromGraphFetchTree(),
               nodeIndex         = $orderedPaths->indexOf($currentPath),
               parentIndex       = $orderedPaths->indexOf($parentPath),
               graphFetchTree    = $st,
               children          = $st->generateInMemoryChildGraphNodes($currentPath, $orderedPaths, $debug)
            );
         },
         {|
            []
         }
      )
   })
}

function <<access.private>> meta::pure::mapping::modelToModel::graphFetch::executionPlan::planInMemoryStoreUnionGraphFetchExecution(sq: StoreQuery[1], ext: RoutedValueSpecification[0..1], sets: InstanceSetImplementation[*], mapping: Mapping[1], runtime: Runtime[1], exeCtx: ExecutionContext[1], extensions: meta::pure::router::extension::RouterExtension[*], debug: DebugContext[1]): ExecutionNode[1]
{
   let fe     = $sq.fe->evaluateAndDeactivate();
   let params = $fe.parametersValues->evaluateAndDeactivate();
   let p1     = $params->at(0);
   let p2     = $params->at(1)->cast(@InstanceValue);
   let tree   = $p2.values->at(0)->cast(@ClusteredGraphFetchTree);
   let rf     = {set: InstanceSetImplementation[1] | ^$fe(parametersValues = [$p1, ^$p2(values = ^$tree(tree = $tree->byPassClusteringInfoDeep()->cast(@RootGraphFetchTree<Any>)->routeRootGraphFetchTree($set, $mapping, $exeCtx, $extensions)))]->evaluateAndDeactivate())->evaluateAndDeactivate()};
   
   let newFe  = $sets->tail()->fold({set, agg |
      ^SimpleFunctionExpression
      (
         func = union_T_MANY__T_MANY__T_MANY_,
         functionName = 'union',
         genericType = $fe.genericType,
         multiplicity = ZeroMany,
         importGroup = system::imports::coreImport,
         resolvedTypeParameters = ^GenericType(rawType=Any),
         parametersValues = [$agg, $rf->eval($set)]->evaluateAndDeactivate()
      )->evaluateAndDeactivate()
   }, $rf->eval($sets->at(0)));

   planInMemoryRouterUnionGraphFetchExecution(^$sq(fe = $newFe), $ext, $mapping, $runtime, $exeCtx, $extensions, $debug);
}

function <<access.private>> meta::pure::mapping::modelToModel::graphFetch::executionPlan::planInMemoryRouterUnionGraphFetchExecution(sq: StoreQuery[1], ext: RoutedValueSpecification[0..1], mapping: Mapping[1], runtime: Runtime[1], exeCtx: ExecutionContext[1], extensions: RouterExtension[*], debug: DebugContext[1]): ExecutionNode[1]
{
   let fe = $sq.fe->evaluateAndDeactivate();
   assert($fe->isUnionOnGraphFetch(), | 'Non union graphFetch function encountered');

   let subClusters  = $fe.parametersValues->evaluateAndDeactivate()->map({p | $p->cluster($mapping, $runtime, $sq.inScopeVars, $exeCtx, $extensions, $debug).cluster->evaluateAndDeactivate()})->cast(@ClusteredValueSpecification);
   let firstCluster = $subClusters->at(0);
   let childNodes   = $subClusters->map(cls | $cls->plan($runtime, $sq.inScopeVars, $sq.advancedRouting, $exeCtx, $extensions, $debug));
   
   ^PureExpressionPlatformExecutionNode
   (
      fromCluster    = ^$firstCluster(val = $fe),
      expression     = $fe,
      resultType     = $childNodes->at(0).resultType,
      executionNodes = $childNodes
   );
}

function <<access.private>> meta::pure::mapping::modelToModel::graphFetch::executionPlan::explodeMultiPropertyMappingSubTreesToMultiSubTrees(tree: RoutedGraphFetchTree[1]): RoutedGraphFetchTree[1]
{
   ^$tree
   (
      subTrees = $tree.subTrees->match([
         rp : RoutedPropertyGraphFetchTree[1] | if ($rp.propertyMapping->size() > 1,
                                                   | $rp.propertyMapping->map(pm | ^$rp(propertyMapping = $pm, sets = $rp.sets->filter(x | $x.id == $pm.targetSetImplementationId))),
                                                   | $rp
                                                )->map(x | $x->explodeMultiPropertyMappingSubTreesToMultiSubTrees()),
         g  : GraphFetchTree[1] | $g
      ])
   )
}

function meta::pure::mapping::modelToModel::graphFetch::executionPlan::inMemoryGraphFetchExecutionNodeToString(node: InMemoryGraphFetchExecutionNode[1], space: String[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   $node->match([
      g : InMemoryRootGraphFetchExecutionNode[1] | 
         'InMemoryRootGraphFetch\n' + 
         $space + '(' + header($g, $space, $extensions) + '\n'+
         $space + '  graphFetchTree = ' + $g.graphFetchTree->asString(true)->replace('\n', '')->replace(' ', '') + '\n' +
         $space + '  nodeIndex = ' + $g.nodeIndex->toString() + '\n' +   
         if($g.parentIndex->isEmpty(), | '', | $space + '  parentIndex = ' + $g.parentIndex->toOne()->toString() + '\n') +
         if($g.batchSize->isEmpty(), | '', | $space + '  batchSize = ' + $g.batchSize->toOne()->toString() + '\n') +
         $space + '  checked = ' + $g.checked->toString() +
         $g->childrenToString($space+'  ', $extensions)+'\n'+
         $space + '  children = ' + $g.children->map(x | inMemoryGraphFetchExecutionNodeToString($x, $space + '     ', $extensions))->joinStrings('[\n'+ $space + '     ', '\n' + $space + '     ', '\n' + $space + '  ]\n') + 
         $g.implementation->printImplementation('implementation', $space+'  ', $extensions)+
         $space + ')\n',
      g : InMemoryPropertyGraphFetchExecutionNode[1] | 
         'InMemoryPropertyGraphFetch\n' + 
         $space + '(' + header($g, $space, $extensions) + '\n'+
         $space + '  graphFetchTree = ' + $g.graphFetchTree->asString(true)->replace('\n', '')->replace(' ', '') + '\n' +
         $space + '  nodeIndex = ' + $g.nodeIndex->toString() + '\n' +   
         if($g.parentIndex->isEmpty(), | '', | $space + '  parentIndex = ' + $g.parentIndex->toOne()->toString() + '\n') +
         $space + '  children = ' + $g.children->map(x | inMemoryGraphFetchExecutionNodeToString($x, $space + '     ', $extensions))->joinStrings('[\n'+ $space + '     ', '\n' + $space + '     ', '\n' + $space + '  ]\n') + 
         $g.implementation->printImplementation('implementation', $space+'  ', $extensions)+
         $space + ')\n'
   ])
}

function meta::pure::mapping::modelToModel::graphFetch::executionPlan::storeStreamReadingExecutionNodeToString(node: StoreStreamReadingExecutionNode[1], space: String[1], extensions:meta::pure::router::extension::RouterExtension[*]):String[1]
{
   'StoreStreamReading\n' + 
   $space + '(' + header($node, $space, $extensions) + '\n'+
   $space + '  graphFetchTree = ' + $node.graphFetchTree->asString(true)->replace('\n', '')->replace(' ', '') + '\n' +
   $space + '  connection = ' + $node.connection->meta::pure::executionPlan::toString::connectionToString($extensions) + '\n' +
   $space + '  enableConstraints = ' + $node.enableConstraints->toString() + '\n' +   
   $space + '  checked = ' + $node.checked->toString() + '\n' +   
   $node.implementation->printImplementation('implementation', $space+'  ', $extensions)+
   $space + ')\n'
}
