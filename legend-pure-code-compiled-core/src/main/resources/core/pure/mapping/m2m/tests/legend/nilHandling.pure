// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::alloy::runtime::java::roadmap::*;
import meta::json::*;
import meta::pure::executionPlan::profiles::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::mapping::modelToModel::test::alloy::simple::nilHandling::*;
import meta::pure::mapping::modelToModel::test::alloy::utils::*;

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly, feature.M2MBasics>> 
{  serverVersion.start='v1_19_0',
   doc.doc='Given: a mapping that uses [] for Nil in an if',
   doc.doc='Given: data that reaches the []',
   doc.doc='When:  a mapping is executed using graphFetch and serialize.',
   doc.doc='Then:  the mapping conversion should succeed.'
} 
meta::pure::mapping::modelToModel::test::alloy::simple::canHandleNilWhileMapping() : Boolean[1]
{
   let tree = #{Target {s}}#;

   let result = execute(
      |Target.all()->graphFetch($tree)->serialize($tree),
      mapWithNil,
      testJsonRuntime(Source, '{"i":0}'),
      []
   );

   let json = $result.values->toOne();
   let expected= '{"s":null}';
   assert(jsonEquivalent($expected->parseJSON(), $json->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly, feature.M2MBasics>> 
{  serverVersion.start='v1_19_0',
   doc.doc='Given: a mapping that uses [] for Nil in an if',
   doc.doc='Given: data that does not reach the []',
   doc.doc='When:  a mapping is executed using graphFetch and serialize.',
   doc.doc='Then:  the mapping conversion should succeed.'
} 
meta::pure::mapping::modelToModel::test::alloy::simple::canHandleNonNilWhileMapping() : Boolean[1]
{
   let tree = #{Target {s}}#;

   let result = execute(
      |Target.all()->graphFetch($tree)->serialize($tree),
      mapWithNil,
      testJsonRuntime(Source, '{"i":1}'),
      []
   );

   let json = $result.values->toOne();
   let expected= '{"s":"Non-Zero"}';
   assert(jsonEquivalent($expected->parseJSON(), $json->parseJSON()));
}

Class meta::pure::mapping::modelToModel::test::alloy::simple::nilHandling::Source
{
   i: Integer[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::simple::nilHandling::Target
{
   s: String[0..1];
}

###Mapping
import meta::pure::mapping::modelToModel::test::alloy::simple::nilHandling::*;

Mapping meta::pure::mapping::modelToModel::test::alloy::simple::nilHandling::mapWithNil
(
   Target: Pure
      {
         ~src Source
         s: if($src.i == 0, |[], |'Non-Zero')
      }
)