// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


import meta::alloy::runtime::java::roadmap::*;
import meta::json::*;
import meta::pure::mapping::modelToModel::*;
import meta::pure::runtime::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::executionPlan::profiles::*;
import meta::pure::mapping::modelToModel::test::alloy::constraints::*;

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testTargetConstraintsWhenRequiredPropertiesAreNotSpecifiedOnGraphFetchTree():Boolean[1]
{
    let result = execute( |Firm.all()->graphFetchChecked(#{Firm {name} }#)->serialize(#{Firm {name} }#),
                           m2mconstraintmapping1,
                           ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm, 
                                url='data:application/json,{"name":"FirmX"}'
                             )
      ),
      []
   );

   assert(jsonEquivalent('{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::Firm","message":"Constraint :[0] violated in the Class Firm"}],"source":{"defects":[],"source":{"number":1,"record":"{\\"name\\":\\"FirmX\\"}"},"value":{"name":"FirmX","employees":[]}},"value":{"name":"FirmX"}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testQueryOnTypeWithFailingConstraintSucceedsWithConstraintsDisabled():Boolean[1]
{
    let result = execute( |Firm.all()->graphFetch(#{Firm {name} }#)->serialize(#{Firm {name} }#),
                           m2mconstraintmapping1,
                           ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm, 
                                url='data:application/json,{"name":"FirmX"}')),
                           ^ExecutionContext(enableConstraints=false),
                         []
   );

   assert(jsonEquivalent('{"name":"FirmX"}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testQueryOnSourceTypeWithFailingConstraintSucceedsWithConstraintsDisabled():Boolean[1]
{
   let result = execute( |Firm2.all()->graphFetch(#{Firm2 {name} }#)->serialize(#{Firm2 {name} }#),
                          m2mconstraintmapping2,
                          ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm2, 
                                url='data:application/json,{"name":"FirmX"}')),
                          ^ExecutionContext(enableConstraints=false),
                        []
                     );
  
   assert(jsonEquivalent('{"name":"FirmX"}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>> 
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testSourceConstraintsWhenRelatedTargetPropertiesAreNotSpecifiedOnGraphFetchTree():Boolean[1]
{
    let result = execute( |Firm2.all()->graphFetchChecked(#{Firm2 {name} }#)->serialize(#{Firm2 {name} }#),
                           m2mconstraintmapping2,
                           ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Firm2, 
                                url='data:application/json,{"name":"FirmX","employees":[{"firstName":"David","lastName":"Roe"}]}'
                             )
                           ),
                         []
                  );
   
   assert(jsonEquivalent('{"defects":[],"source":{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm2","message":"Constraint :[0] violated in the Class _Firm2"},{"path":[{"propertyName":"employees","index":0}],"enforcementLevel":"Error","ruleType":"ClassConstraint","externalId":null,"id":"0","ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::_Person2","message":"Constraint :[0] violated in the Class _Person2"}],"source":{"number":1,"record":"{\\"name\\":\\"FirmX\\",\\"employees\\":[{\\"firstName\\":\\"David\\",\\"lastName\\":\\"Roe\\"}]}"},"value":{"name":"FirmX","employees":[{"firm":null,"address":null}]}},"value":{"name":"FirmX"}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testSourceConstraintsWithNew():Boolean[1]
{
   let result = execute( |Car.all()->graphFetchChecked(#{Car {engineSize}}#)->serialize(#{Car {engineSize}}#),
                          m2mconstraintnewmapping,
                          ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_Car,
                             url='data:application/json,{"make" : "Ford", "engineSize" : "big", "numOfDoors" : "1"}'
                             )
                           ),
                           []
                     );

   assert(jsonEquivalent('{"defects":[{"path":[],"enforcementLevel":"Critical","ruleType":"NoInput","externalId":null,"id":null,"ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::Car","message":"No Input Available"}],"source":{"defects":[{"path":[],"enforcementLevel":"Error","ruleType":"InvalidInput","externalId":null,"id":null,"ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::_Car","message":"numOfDoors: Unexpected node type:STRING for PURE Integer"},{"path":[],"enforcementLevel":"Critical","ruleType":"ClassStructure","externalId":null,"id":null,"ruleDefinerPath":"meta::pure::mapping::modelToModel::test::alloy::constraints::_Car","message":"Invalid multiplicity for numOfDoors: expected [1] found [0]"}],"source":{"number":1,"record":"{\\"make\\":\\"Ford\\",\\"engineSize\\":\\"big\\",\\"numOfDoors\\":\\"1\\"}"},"value":null},"value":null}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{  serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testSourceConstraintsWithNewPropertyAssociation():Boolean[1]
{
   let result = execute( |ProductTaxonomy.all()->graphFetchChecked(#{ProductTaxonomy {id}}#)->serialize(#{ProductTaxonomy {id}}#),
                          m2mconstraintnewmapping2,
                          ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=ProductTaxonomy,
                             url='data:application/json,{"id":"1"}'
                             )
                           ),
                           []
                       );
  
   assert(jsonEquivalent('{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"id\\":\\"1\\"}"},"value":{"id":"1"}},"value":{"id":"1"}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testIsEqualConstraint():Boolean[1]
{
   let result = execute(|B.all()->graphFetchChecked(#{B { b }}#)->serialize(#{B { b }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::isEqualTest,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_B,
                             url='data:application/json,{"b":true}'
                             )
                          ),
                          []
                );

   assert(jsonEquivalent( '{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"b\\":true}"},"value":{"b":true}},"value":{"b":true}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}

function <<meta::pure::profiles::test.Test, meta::pure::profiles::test.AlloyOnly>>
{ serverVersion.start='v1_19_0' }
meta::pure::mapping::modelToModel::test::alloy::constraints::testIsDistinctConstraint():Boolean[1]
{
   let result = execute(|C.all()->graphFetchChecked(#{C { b }}#)->serialize(#{C { b }}#),
                        meta::pure::mapping::modelToModel::test::alloy::constraints::isDistinctTest,
                         ^Runtime(connections = ^JsonModelConnection(
                                element=^ModelStore(), 
                                class=_C,
                             url='data:application/json,{"b":true}'
                             )
                         ),
                        []
                );

   assert(jsonEquivalent('{"defects":[],"source":{"defects":[],"source":{"number":1,"record":"{\\"b\\":true}"},"value":{"b":true}},"value":{"b":true}}'->parseJSON(), $result.values->toOne()->parseJSON()));
}


Class meta::pure::mapping::modelToModel::test::alloy::constraints::TaxonomyValue
{
   id : String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Taxonomy
{
   id : String[1];
}

Association meta::pure::mapping::modelToModel::test::alloy::constraints::Taxonomy_TaxonomyValue
{
   taxonomy:meta::pure::mapping::modelToModel::test::alloy::constraints::Taxonomy[1];
   taxonomyValue:meta::pure::mapping::modelToModel::test::alloy::constraints::TaxonomyValue[*];
}

// Test new in M2M execution with properties from associations
Class meta::pure::mapping::modelToModel::test::alloy::constraints::ProductTaxonomy
[
   [^Taxonomy(id='1', taxonomyValue=[^TaxonomyValue(id='t1')]),^Taxonomy(id='2', taxonomyValue=[^TaxonomyValue(id='t2')])]->filter(t | $t.id == $this.id)->isNotEmpty()
]
{
   id: String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Firm
[
   $this.employees->isNotEmpty()
]
{
  name: String[1];
  employees: meta::pure::mapping::modelToModel::test::alloy::constraints::Person[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Firm2
{
  name: String[1];
  employees: meta::pure::mapping::modelToModel::test::alloy::constraints::Person[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Person
{
  fullName: String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm
{   
  name: String[1];
  employees:meta::pure::mapping::modelToModel::test::alloy::constraints::_Person[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm2
[
   $this.employees.address.street->isNotEmpty()
]
{   
  name: String[1];
  employees:meta::pure::mapping::modelToModel::test::alloy::constraints::_Person2[*];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Person2
[
   $this.firm->isNotEmpty()
]
{
  firstName: String[1];
  lastName: String[1];
  address: _Address[0..1];
  firm: _Firm2[0..1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Person
{
  firstName: String[1];
  lastName: String[1];
  address: _Address[0..1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Address
{
  street: String[1];
}


Enum meta::pure::mapping::modelToModel::test::alloy::constraints::CarManufacturer
{
   Ford, Vauxhall, Peugeot, BadCarCo1, BadCarCo2
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::CurrentCarData
{
   allowed : CarManufacturer[*];
   numAllowed(){$this.allowed->size();}:Integer[1];
   
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_Car
[
   $this.make->in(^CurrentCarData(allowed=[CarManufacturer.Ford]).allowed)
]
{
   make : CarManufacturer[1];
   engineSize : String[1];
   numOfDoors : Integer[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::Car
{
   make:CarManufacturer[1];
  engineSize : String[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::A
{
   s:String[1];
   b:Boolean[1];
   i:Integer[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::B
{
   b:Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_B
[
   isEqual(^A(s='blah', b=true, i=10), ^A(s='blah', b=true, i=10), #{A {b}}#)

]
{
   b:Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::C
{
   b:Boolean[1];
}

Class meta::pure::mapping::modelToModel::test::alloy::constraints::_C
[
   isDistinct([^A(s='blah', b=false, i=10), ^A(s='blah', b=true, i=10)], #{A {b}}#)
]
{
   b:Boolean[1];
}

###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::isEqualTest
(
   meta::pure::mapping::modelToModel::test::alloy::constraints::B : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_B
      b: $src.b
   }
)

###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::isDistinctTest
(
   meta::pure::mapping::modelToModel::test::alloy::constraints::C : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_C
      b: $src.b
   }
)


###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::m2mconstraintnewmapping
(
  meta::pure::mapping::modelToModel::test::alloy::constraints::Car : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Car
      make : $src.make,
      engineSize : $src.engineSize
  }
)

###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::m2mconstraintnewmapping2
(
  meta::pure::mapping::modelToModel::test::alloy::constraints::ProductTaxonomy : Pure
   {
      ~src meta::pure::mapping::modelToModel::test::alloy::constraints::ProductTaxonomy
      id : $src.id
  }   
)



###Mapping
Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::m2mconstraintmapping1
(
  meta::pure::mapping::modelToModel::test::alloy::constraints::Firm : Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm
    name: $src.name,
    employees: $src.employees
  }

  meta::pure::mapping::modelToModel::test::alloy::constraints::Person: Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Person
    fullName: $src.firstName + ' ' + $src.lastName
  }
)

Mapping meta::pure::mapping::modelToModel::test::alloy::constraints::m2mconstraintmapping2
(
  meta::pure::mapping::modelToModel::test::alloy::constraints::Firm2 : Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Firm2
    name: $src.name,
    employees: $src.employees
  }

  meta::pure::mapping::modelToModel::test::alloy::constraints::Person: Pure
  {
    ~src meta::pure::mapping::modelToModel::test::alloy::constraints::_Person2
    fullName: $src.firstName + ' ' + $src.lastName
  }
)


