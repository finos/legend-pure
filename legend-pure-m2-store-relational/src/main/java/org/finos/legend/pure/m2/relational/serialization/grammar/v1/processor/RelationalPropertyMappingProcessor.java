// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.finos.legend.pure.m2.relational.serialization.grammar.v1.processor;

import org.eclipse.collections.api.RichIterable;
import org.eclipse.collections.api.list.MutableList;
import org.eclipse.collections.api.set.MutableSet;
import org.eclipse.collections.impl.factory.Lists;
import org.eclipse.collections.impl.factory.Sets;
import org.finos.legend.pure.m2.dsl.mapping.serialization.grammar.v1.processor.EnumerationMappingProcessor;
import org.finos.legend.pure.m3.compiler.postprocessing.ProcessorState;
import org.finos.legend.pure.m3.compiler.postprocessing.processor.milestoning.MilestoningFunctions;
import org.finos.legend.pure.m3.navigation.PackageableElement.PackageableElement;
import org.finos.legend.pure.m3.navigation.importstub.ImportStub;
import org.finos.legend.pure.m3.coreinstance.meta.pure.mapping.PropertyMapping;
import org.finos.legend.pure.m3.coreinstance.meta.pure.mapping.PropertyMappingsImplementation;
import org.finos.legend.pure.m3.coreinstance.meta.pure.mapping.SetImplementation;
import org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.ModelElement;
import org.finos.legend.pure.m3.coreinstance.meta.pure.metamodel.function.property.Property;
import org.finos.legend.pure.m3.coreinstance.meta.pure.tools.GrammarInfoStub;
import org.finos.legend.pure.m3.coreinstance.meta.relational.mapping.EmbeddedRelationalInstanceSetImplementation;
import org.finos.legend.pure.m3.coreinstance.meta.relational.mapping.OtherwiseEmbeddedRelationalInstanceSetImplementation;
import org.finos.legend.pure.m3.coreinstance.meta.relational.mapping.RelationalPropertyMapping;
import org.finos.legend.pure.m3.coreinstance.meta.relational.mapping.RootRelationalInstanceSetImplementation;
import org.finos.legend.pure.m3.coreinstance.meta.relational.metamodel.RelationalOperationElement;
import org.finos.legend.pure.m3.coreinstance.meta.relational.metamodel.RelationalOperationElementWithJoin;
import org.finos.legend.pure.m3.coreinstance.meta.relational.metamodel.TableAlias;
import org.finos.legend.pure.m3.coreinstance.meta.relational.metamodel.join.JoinTreeNode;
import org.finos.legend.pure.m3.navigation.ProcessorSupport;
import org.finos.legend.pure.m3.tools.matcher.Matcher;
import org.finos.legend.pure.m4.coreinstance.CoreInstance;
import org.finos.legend.pure.m4.ModelRepository;
import org.finos.legend.pure.m4.exception.PureCompilationException;

import java.util.Collection;

class RelationalPropertyMappingProcessor
{
    private RelationalPropertyMappingProcessor()
    {
    }

    static MutableSet<TableAlias> processRelationalPropertyMappings(RichIterable<? extends PropertyMapping> propertyMappings, PropertyMappingsImplementation implementation, RootRelationalInstanceSetImplementation topLevel, String depth, Matcher matcher, ProcessorState state, ModelRepository repository, ProcessorSupport processorSupport)
    {
        MutableSet<TableAlias> tableAliases = Sets.mutable.empty();
        for (PropertyMapping propertyMapping : propertyMappings)
        {
            tableAliases.addAll(processRelationalPropertyMapping(propertyMapping, matcher, state, repository, depth, processorSupport, implementation, topLevel));
        }
        return tableAliases;
    }

    static MutableSet<TableAlias> processRelationalPropertyMapping(PropertyMapping propertyMapping, Matcher matcher, ProcessorState state, ModelRepository repository, String depth, ProcessorSupport processorSupport, PropertyMappingsImplementation implementation, PropertyMappingsImplementation topLevel)
    {
        if (MilestoningFunctions.isAutoGeneratedMilestoningNamedDateProperty(propertyMapping._property(), processorSupport))
        {
            throw new PureCompilationException(propertyMapping.getSourceInformation(), "Class : [" + PackageableElement.getUserPathForPackageableElement(((SetImplementation)implementation)._class()) + "] has temporal specification. Hence mapping of property : [milestoning] is reserved and should not be explicit in the mapping");
        }

        MutableSet<TableAlias> tableAliases = Sets.mutable.empty();

        String newDepth = depth + "_" + ((ModelElement)propertyMapping._propertyCoreInstance())._name();
        CoreInstance sourceSetImplementationId = repository.newStringCoreInstance_cached(depth);

        if (implementation instanceof EmbeddedRelationalInstanceSetImplementation)
        {
            propertyMapping._sourceSetImplementationId(sourceSetImplementationId.getName());
        }

        if (propertyMapping instanceof EmbeddedRelationalInstanceSetImplementation)
        {
            EmbeddedRelationalInstanceSetImplementation embeddedRelationalInstanceSetImplementation = (EmbeddedRelationalInstanceSetImplementation)propertyMapping;

            if (!(implementation instanceof EmbeddedRelationalInstanceSetImplementation))
            {
                propertyMapping._sourceSetImplementationId(implementation._id());
            }
            String newId;
            if (embeddedRelationalInstanceSetImplementation._id() == null)
            {
                CoreInstance new_Id = repository.newStringCoreInstance_cached(newDepth);
                embeddedRelationalInstanceSetImplementation._id(new_Id.getName());
                embeddedRelationalInstanceSetImplementation._targetSetImplementationId(new_Id.getName());
                newId = newDepth;
            }
            else
            {
                newId = embeddedRelationalInstanceSetImplementation._id();
            }

            RootRelationalInstanceSetImplementation owner = embeddedRelationalInstanceSetImplementation._setMappingOwner();
            if (owner == null)
            {
                embeddedRelationalInstanceSetImplementation._setMappingOwner((RootRelationalInstanceSetImplementation)topLevel);
            }

            Property property = (Property)ImportStub.withImportStubByPass(embeddedRelationalInstanceSetImplementation._propertyCoreInstance(), processorSupport);
            CoreInstance targetClass = property._classifierGenericType() == null ||
                    property._classifierGenericType()._typeArguments() == null ||
                    property._classifierGenericType()._typeArguments().size() < 2 ||
                    property._classifierGenericType()._typeArguments().toList().get(1) == null ? null : ImportStub.withImportStubByPass(property._classifierGenericType()._typeArguments().toList().get(1)._rawTypeCoreInstance(), processorSupport);

            embeddedRelationalInstanceSetImplementation._classCoreInstance(targetClass);

            RichIterable<? extends PropertyMapping> embeddedPropertyMappings = embeddedRelationalInstanceSetImplementation._propertyMappings();
            tableAliases.addAll(processRelationalPropertyMappings(embeddedPropertyMappings, embeddedRelationalInstanceSetImplementation, (RootRelationalInstanceSetImplementation)topLevel, newId, matcher, state, repository, processorSupport));

            RelationalInstanceSetImplementationProcessor.processUserDefinedPrimaryKey(embeddedRelationalInstanceSetImplementation, topLevel, matcher, state, repository, processorSupport);

            if (propertyMapping instanceof OtherwiseEmbeddedRelationalInstanceSetImplementation)
            {
                OtherwiseEmbeddedRelationalInstanceSetImplementation otherwiseEmbeddedRelationalInstanceSetImplementation = (OtherwiseEmbeddedRelationalInstanceSetImplementation)propertyMapping;
                PropertyMapping otherwiseMapping = otherwiseEmbeddedRelationalInstanceSetImplementation._otherwisePropertyMapping();
                otherwiseMapping._sourceSetImplementationId(sourceSetImplementationId.getName());

                //relationalOperationElement
                RelationalOperationElement impl = ((RelationalPropertyMapping)otherwiseMapping)._relationalOperationElement();
                RelationalOperationElementProcessor.processColumnExpr(impl, topLevel, topLevel, tableAliases, matcher, state, repository, processorSupport);
            }
        }
        else
        {

            //Transformer
            if (propertyMapping instanceof RelationalPropertyMapping)
            {
                GrammarInfoStub transformerStub = (GrammarInfoStub)((RelationalPropertyMapping)propertyMapping)._transformerCoreInstance();

                EnumerationMappingProcessor.processsEnumerationTransformer(transformerStub, propertyMapping, processorSupport);

                //relationalOperationElement
                RelationalOperationElement impl = ((RelationalPropertyMapping)propertyMapping)._relationalOperationElement();
                RelationalOperationElementProcessor.processColumnExpr(impl, topLevel, topLevel, tableAliases, matcher, state, repository, processorSupport);
                propertyMapping._store(impl instanceof RelationalOperationElementWithJoin ? ((RelationalOperationElementWithJoin)impl)._joinTreeNode()._database() : null);
            }
        }
        return tableAliases;
    }

    static void populateReferenceUsagesForRelationalPropertyMappings(Iterable<? extends PropertyMapping> propertyMappings, ModelRepository repository, ProcessorSupport processorSupport)
    {
        for (PropertyMapping propertyMapping : propertyMappings)
        {
            populateReferenceUsagesForRelationalPropertyMapping(propertyMapping, repository, processorSupport);
        }
    }

    static void populateReferenceUsagesForRelationalPropertyMapping(PropertyMapping propertyMapping, ModelRepository repository, ProcessorSupport processorSupport)
    {
        if (propertyMapping instanceof EmbeddedRelationalInstanceSetImplementation)
        {
            EmbeddedRelationalInstanceSetImplementation embeddedRelationalInstanceSetImplementation = (EmbeddedRelationalInstanceSetImplementation)propertyMapping;
            RichIterable<? extends PropertyMapping> embeddedPropertyMappings = embeddedRelationalInstanceSetImplementation._propertyMappings();
            populateReferenceUsagesForRelationalPropertyMappings(embeddedPropertyMappings, repository, processorSupport);
            RelationalInstanceSetImplementationProcessor.populateReferenceUsagesForUserDefinedPrimaryKey(propertyMapping, repository, processorSupport);
            if (propertyMapping instanceof OtherwiseEmbeddedRelationalInstanceSetImplementation)
            {
                OtherwiseEmbeddedRelationalInstanceSetImplementation otherwiseEmbeddedRelationalInstanceSetImplementation = (OtherwiseEmbeddedRelationalInstanceSetImplementation)embeddedRelationalInstanceSetImplementation;
                PropertyMapping otherwiseEmbeddedPropertyMappings = otherwiseEmbeddedRelationalInstanceSetImplementation._otherwisePropertyMapping();
                populateReferenceUsagesForRelationalPropertyMapping(otherwiseEmbeddedPropertyMappings, repository, processorSupport);
            }
        }
        else
        {
            if (propertyMapping instanceof RelationalPropertyMapping)
            {
                RelationalOperationElement columnExpression = ((RelationalPropertyMapping)propertyMapping)._relationalOperationElement();
                RelationalOperationElementProcessor.populateColumnExpressionReferenceUsages(columnExpression, repository, processorSupport);
            }
        }
    }

    static RichIterable<JoinTreeNode> collectJoinTreeNodes(Iterable<? extends PropertyMapping> propertyMappings)
    {
        MutableList<JoinTreeNode> joinTreeNodes = Lists.mutable.empty();
        for (PropertyMapping propertyMapping : propertyMappings)
        {
            collectJoinTreeNodes(joinTreeNodes, propertyMapping);
        }
        return joinTreeNodes;
    }

    static RichIterable<JoinTreeNode> collectJoinTreeNodes(PropertyMapping propertyMapping)
    {
        MutableList<JoinTreeNode> joinTreeNodes = Lists.mutable.empty();
        collectJoinTreeNodes(joinTreeNodes, propertyMapping);
        return joinTreeNodes;
    }

    private static void collectJoinTreeNodes(Collection<? super JoinTreeNode> targetCollection, PropertyMapping propertyMapping)
    {
        if (propertyMapping instanceof RelationalPropertyMapping)
        {
            RelationalOperationElement relationalOperationElement = ((RelationalPropertyMapping)propertyMapping)._relationalOperationElement();
            RelationalOperationElementProcessor.collectJoinTreeNodes(targetCollection, relationalOperationElement);
        }
        if (propertyMapping instanceof OtherwiseEmbeddedRelationalInstanceSetImplementation)
        {
            PropertyMapping relationalOperationElement = ((OtherwiseEmbeddedRelationalInstanceSetImplementation)propertyMapping)._otherwisePropertyMapping();
            collectJoinTreeNodes(targetCollection, relationalOperationElement);
        }
        if (propertyMapping instanceof PropertyMappingsImplementation)
        {
            RichIterable<? extends PropertyMapping> propertyMappings = ((PropertyMappingsImplementation)propertyMapping)._propertyMappings();
            for (PropertyMapping subMapping : propertyMappings)
            {
                collectJoinTreeNodes(targetCollection, subMapping);
            }
        }
    }
}
