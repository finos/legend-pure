// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::collection::*;

import meta::pure::mapping::*;

import meta::relational::mapping::*;

import meta::relational::metamodel::*;
import meta::relational::metamodel::join::*;
import meta::relational::metamodel::relation::*;

// Relational Mapping
Class meta::relational::mapping::RelationalInstanceSetImplementation extends InstanceSetImplementation
{
    primaryKey : RelationalOperationElement[*];
}

Class meta::relational::mapping::FilterMapping
{
    setMappingOwner : RelationalInstanceSetImplementation[0..1];
    joinTreeNode : JoinTreeNode[0..1];
    database : Database[1];
    filterName : String[1];
    filter : Filter[1];
}

Class meta::relational::mapping::GroupByMapping
{
    setMappingOwner : RelationalInstanceSetImplementation[0..1];
    columns : RelationalOperationElement[*];
}

Class meta::relational::mapping::RootRelationalInstanceSetImplementation extends RelationalInstanceSetImplementation, RelationalMappingSpecification
{
    resolveFilter()
    {
        if ($this.filter->isEmpty(),
            | let superMapping = $this.superMapping()->cast(@RootRelationalInstanceSetImplementation);
              if ($superMapping->isEmpty(),
                  | [],
                  | $superMapping.resolveFilter()
              );,
            | $this.filter
        );
    }:FilterMapping[0..1];

    resolveGroupBy()
    {
        if ($this.groupBy->isEmpty(),
            | let superMapping = $this.superMapping()->cast(@RootRelationalInstanceSetImplementation);
              if ($superMapping->isEmpty(),
                  | [],
                  | $superMapping.resolveGroupBy()
              );,
            | $this.groupBy
        );
    }:GroupByMapping[0..1];

    resolveDistinct()
    {
        if ($this.distinct == true,
            | true,
            | let superMapping = $this.superMapping()->cast(@RootRelationalInstanceSetImplementation);
              if ($superMapping->isEmpty(),
                  | false,
                  | $superMapping.resolveDistinct()
              );
        );
    }:Boolean[0..1];

    resolveUserDefinedPrimaryKey()
    {
        if ($this.userDefinedPrimaryKey == true,
            | true,
            | let superMapping = $this.superMapping()->cast(@RootRelationalInstanceSetImplementation);
              if ($superMapping->isEmpty(),
                  | false,
                  | $superMapping->toOne().resolveUserDefinedPrimaryKey()
              );
        );
    }:Boolean[1];

    resolvePrimaryKey()
    {
        let superMapping = $this.superMapping()->cast(@RootRelationalInstanceSetImplementation);
        if ($superMapping->isEmpty(),
            | $this.primaryKey,
            | let thisPrimaryKey = $this.primaryKey;
              let thisHasGroupBy = !$this.groupBy->isEmpty();
              let thisHasDistinct = if ($this.distinct == true,| true,| false);
              let thisHasUserDefinedPrimaryKey = $this.userDefinedPrimaryKey;

              let superPrimaryKey = $superMapping.resolvePrimaryKey();
              let superHasGroupBy = !$superMapping.resolveGroupBy()->isEmpty();
              let superHasDistinct = if ($superMapping.resolveDistinct() == true,| true,| false);
              let superHasUserDefinedPrimaryKey = $superMapping->toOne().resolveUserDefinedPrimaryKey();

              let primaryKeyLogicalOrder = [pair($thisHasGroupBy, list($this.primaryKey)),
                                            pair($superHasGroupBy, list($superPrimaryKey)),
                                            pair($thisHasDistinct, list($this.primaryKey)),
                                            pair($superHasDistinct, list($superPrimaryKey)),
                                            pair($thisHasUserDefinedPrimaryKey, list($this.primaryKey)),
                                            pair($superHasUserDefinedPrimaryKey, list($superPrimaryKey)),
                                            pair(true, list($this.primaryKey))];

              $primaryKeyLogicalOrder->filter(x|$x.first==true)->first().second.values;
        );
    }:RelationalOperationElement[*];
}

Class meta::relational::mapping::EmbeddedRelationalInstanceSetImplementation extends EmbeddedSetImplementation, RelationalInstanceSetImplementation
{
    setMappingOwner : RootRelationalInstanceSetImplementation[1];
}

Class meta::relational::mapping::OtherwiseEmbeddedRelationalInstanceSetImplementation extends EmbeddedRelationalInstanceSetImplementation,OtherwiseEmbeddedSetImplementation
{

}

Class meta::relational::mapping::InlineEmbeddedRelationalInstanceSetImplementation extends EmbeddedRelationalInstanceSetImplementation,InlineEmbeddedSetImplementation
{


}

Class meta::relational::mapping::RelationalPropertyMapping extends PropertyMapping
{
   relationalOperationElement : RelationalOperationElement[1];
   transformer: ValueTransformer<Any>[0..1];
   transform(sourceValue: Any[1])
   {
        if($this.transformer->isEmpty(),
            | $sourceValue ,
            | $this.transformer->toOne()->cast(@EnumerationMapping<Any> ).toDomainValue($sourceValue)
        );
   } : Any[1];
}

Class meta::relational::mapping::RelationalAssociationImplementation extends AssociationImplementation
{
}


Class meta::relational::mapping::RelationalActivity extends meta::pure::mapping::Activity
{
   sql : String[1];
   executionTimeInNanoSecond : Integer[0..1];
   sqlGenerationTimeInNanoSecond : Integer[0..1];
   connectionAcquisitionTimeInNanoSecond : Integer[0..1];
   executionPlanInformation : String[0..1];
   dataSource : meta::relational::runtime::DataSource[0..1];
}