// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::mapping::*;

import meta::relational::mapping::*;

import meta::relational::metamodel::*;
import meta::relational::metamodel::datatype::*;
import meta::relational::metamodel::join::*;
import meta::relational::metamodel::operation::*;
import meta::relational::metamodel::relation::*;

Class meta::relational::metamodel::Database extends meta::pure::store::set::SetBasedStore
{
    schemas : Schema[*];

    schema(name:String[1])
    {
        let schemas = $this.includes->map(d|$d->cast(@Database).schema($name))->concatenate($this.schemas->filter(s|$s.name == $name));
        if ($schemas->size() > 1,
                |let schema = $schemas->at(0);
                 ^$schema(tables = $schemas.tables);,
                |$schemas->first()
           );
    }:Schema[0..1];

    joins : Join[*];
    join(join:String[1])
    {
        $this.includes->map(d|$d->cast(@Database).join($join))
                      ->concatenate($this.joins->filter(j|$j.name == $join))->first();
    }:Join[0..1];

    filters : Filter[*];
    filter(filter:String[1])
    {
        $this.includes->map(d|$d->cast(@Database).filter($filter))
                      ->concatenate($this.filters->filter(j|$j.name == $filter))->first();
    }:Filter[0..1];
}

Class meta::relational::metamodel::Schema extends meta::pure::store::set::Namespace
{
    name : String[1];

    database : Database[1];

    tables : Table[*];
    table(name:String[1])
    {
        $this.tables->filter(t|$t.name == $name)->first();
    }:Table[0..1];

    views : View[*];
    view(name:String[1])
    {
        $this.views->filter(t|$t.name == $name)->first();
    }:View[0..1];
}

Class meta::relational::metamodel::relation::Relation extends meta::relational::metamodel::RelationalOperationElement, meta::pure::store::set::SetRelation
{
   columns : RelationalOperationElement[*];
}

Class meta::relational::metamodel::relation::NamedRelation extends meta::relational::metamodel::relation::Relation
{
   name : String[1];
}

Class meta::relational::metamodel::relation::Milestoning
{
    owner : Relation[0..1];
}

Class meta::relational::metamodel::relation::TemporalMilestoning extends Milestoning
{
    infinityDate : Date[0..1];
}

Class meta::relational::metamodel::relation::ProcessingMilestoning extends TemporalMilestoning
{
   in : Column[1];
   out : Column[1];
   outIsInclusive : Boolean[1];
}

Class meta::relational::metamodel::relation::BusinessMilestoning extends TemporalMilestoning
{
   from : Column[1];
   thru : Column[1];
   thruIsInclusive : Boolean[1];
}

Class meta::relational::metamodel::relation::BusinessSnapshotMilestoning extends TemporalMilestoning
{
   snapshotDate : Column[1];
}

Class meta::relational::metamodel::relation::Table extends NamedRelation
{
   schema : Schema[1];
   primaryKey : Column[*];
   milestoning : Milestoning[*];
   temporaryTable : Boolean[0..1];

   column(columnName:String[1])
   {
        $this.columns->cast(@Column)->filter(c | $c.name == $columnName )->first();
   }:Column[0..1];

   isTemporaryTable()
   {
        !$this.temporaryTable->isEmpty() && $this.temporaryTable->toOne()
   }:Boolean[1];
}

Class meta::relational::metamodel::RelationalMappingSpecification
{
    userDefinedPrimaryKey : Boolean[1];
    filter : FilterMapping[0..1];
    distinct : Boolean[0..1];
    groupBy : GroupByMapping[0..1];
    mainTableAlias : TableAlias[1];

    mainRelation(){$this.mainTableAlias.relation}:Relation[1];
    mainTable(){$this.mainTableAlias.relationalElement->match([t:Table[1]|$t, v:View[1]|$v.mainTable])}:Table[1];
}

Class meta::relational::metamodel::relation::View extends NamedRelation, RelationalMappingSpecification
{
    schema : Schema[1];
    primaryKey : Column[*];
    columnMappings : ColumnMapping[*];
}

Class meta::relational::mapping::ColumnMapping
{
    columnName : String[1];
    relationalOperationElement : RelationalOperationElement[1];
}

Class meta::relational::metamodel::join::RelationalTreeNode extends TreeNode
{
    alias : TableAlias[1];
    children()
    {
        $this.childrenData->cast(@JoinTreeNode)
    }:JoinTreeNode[*];
    childByJoinName(s:String[1])
    {
        $this.children()->filter(c| $c.join.name == $s)->first()
    }:JoinTreeNode[0..1];
}

Class meta::relational::metamodel::join::RootJoinTreeNode extends RelationalTreeNode, Relation
{
}

Class meta::relational::metamodel::join::JoinTreeNode extends RelationalTreeNode
{
   setMappingOwner : PropertyMappingsImplementation[0..1];
   database : Database[1];
   joinName : String[1];
   join : Join[1];
   joinType : JoinType[0..1];
}

Enum meta::relational::metamodel::join::JoinType
{
   INNER,
   LEFT_OUTER,
   RIGHT_OUTER
}

Class meta::relational::metamodel::Filter
{
    name : String[1];
    database : Database[0..1];
    operation : Operation[1];
}

Class meta::relational::metamodel::join::Join
{
    name : String[1];
    database : Database[0..1];
    target : TableAlias[0..1];
    aliases : Pair<TableAlias,TableAlias>[*];
    otherTableFromAlias(tableAlias:TableAlias[1])
    {
        let aliasesByTableAliasName  = $this.aliases->filter(t | ($t.first.name == $tableAlias.name));
        let aliases = if($aliasesByTableAliasName->size() > 1,|filterBySchemaName($aliasesByTableAliasName, $tableAlias.relationalElement->cast(@NamedRelation));, |$aliasesByTableAliasName);
        if ($aliases->isEmpty(), | [], | $aliases->at(0).second);
    }:TableAlias[0..1];
    otherTable(namedRelation:NamedRelation[1])
    {
        let aliasesByTableName = $this.aliases->filter(t | $t.first.relation->cast(@NamedRelation).name == $namedRelation.name);
        let aliases = if($aliasesByTableName->size() > 1,|filterBySchemaName($aliasesByTableName, $namedRelation);, |$aliasesByTableName);
        if ($aliases->isEmpty(), | [], | $aliases->at(0).second);
    }:TableAlias[0..1];
    operation : Operation[1];
}

function meta::relational::metamodel::filterBySchemaName(aliases:Pair<TableAlias, TableAlias>[*], namedRelation:NamedRelation[1]):Pair<TableAlias, TableAlias>[*]
{
    $namedRelation->match([
                        t:Table[1]|$aliases->filter(p|$p.first.relation()->instanceOf(Table) && $t->cast(@Table).schema.name == $p.first.relation()->cast(@Table).schema.name),
                        v:View[1]|$aliases->filter(p|$p.first.relation()->instanceOf(View) && $v->cast(@View).schema.name == $p.first.relation()->cast(@View).schema.name)
    ]);
}

Class meta::relational::metamodel::operation::Function extends meta::relational::metamodel::RelationalOperationElement
{
}

Class meta::relational::metamodel::operation::Operation extends meta::relational::metamodel::operation::Function
{
}

Class meta::relational::metamodel::Alias extends meta::relational::metamodel::RelationalOperationElement
{
   <<equality.Key>> name : String[1];
   <<equality.Key>> relationalElement : RelationalOperationElement[1];
}

Class meta::relational::metamodel::SQLQuery extends meta::relational::metamodel::RelationalOperationElement
{
}

Class meta::relational::metamodel::TableAlias extends Alias
{
   setMappingOwner : PropertyMappingsImplementation[0..1];

   database : Database[0..1];
   schema : String[0..1];
   relation(){$this.relationalElement->cast(@Relation)}:Relation[1];
}

Class meta::relational::metamodel::Column extends meta::relational::metamodel::RelationalOperationElement, meta::pure::store::set::SetColumn
{
   <<equality.Key>> name : String[1];
   <<equality.Key>> type : meta::relational::metamodel::datatype::DataType[1];
   nullable : Boolean[0..1];
   owner : Relation[0..1];
}

Class meta::relational::metamodel::datatype::DataType
{
}

Class meta::relational::metamodel::RelationalOperationElement
{
}
