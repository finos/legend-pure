// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::collection::tests::removeDuplicates::*;


native function meta::pure::functions::collection::removeDuplicates<T,V>(col:T[*], key:Function<{T[1]->V[1]}>[0..1], eql:Function<{V[1],V[1]->Boolean[1]}>[0..1]):T[*];

function meta::pure::functions::collection::removeDuplicates<T>(col:T[*], eql:Function<{T[1],T[1]->Boolean[1]}>[1]):T[*]
{
    $col->removeDuplicates([], $eql)
}

function meta::pure::functions::collection::removeDuplicatesBy<T>(col:T[*], key:Function<{T[1]->Any[1]}>[1]):T[*]
{
    $col->removeDuplicates($key, [])
}

function meta::pure::functions::collection::removeDuplicates<T>(col:T[*]):T[*]
{
    $col->removeDuplicates([], [])
}







function meta::pure::functions::collection::tests::removeDuplicates::cmp(a:Any[1],b:Any[1]):Boolean[1]
{
    $a->toString() == $b->toString()
}

function <<test.Test>> meta::pure::functions::collection::tests::removeDuplicates::testRemoveDuplicatesPrimitiveStandardFunction():Boolean[1]
{
    assertEquals([1, 2, 3], [1, 2, 1, 3, 1, 3, 3, 2]->removeDuplicates(eq_Any_1__Any_1__Boolean_1_));
    assertEquals([1, 2, 3], [1, 2, 1, 3, 1, 3, 3, 2]->removeDuplicates(equal_Any_MANY__Any_MANY__Boolean_1_));
    assertEquals([1, 2, 3], [1, 2, 1, 3, 1, 3, 3, 2]->removeDuplicates());

    assertEquals(['a', 'b', 'c'], ['a', 'a', 'b', 'b', 'c']->removeDuplicates(eq_Any_1__Any_1__Boolean_1_));
    assertEquals(['a', 'b', 'c'], ['a', 'a', 'b', 'b', 'c']->removeDuplicates(equal_Any_MANY__Any_MANY__Boolean_1_));
    assertEquals(['a', 'b', 'c'], ['a', 'a', 'b', 'b', 'c']->removeDuplicates());

    assertEquals([1, 2, '1', '3', 3], [1, 2, '1', '3', 1, 3, '3', 2]->removeDuplicates(eq_Any_1__Any_1__Boolean_1_));
    assertEquals([1, 2, '1', '3', 3], [1, 2, '1', '3', 1, 3, '3', 2]->removeDuplicates(equal_Any_MANY__Any_MANY__Boolean_1_));

    assertEquals(['1', 2, '3'], ['1', 2, '1', '3', 1, 3, '3', 2]->removeDuplicates(cmp_Any_1__Any_1__Boolean_1_));
}

function <<test.Test>> meta::pure::functions::collection::tests::removeDuplicates::testRemoveDuplicatesPrimitiveNonStandardFunction():Boolean[1]
{
     assertEquals([1, 2, '3'], [1, 2, '1', '3', 1, 3, '3', 2]->removeDuplicates({x, y | $x->toString() == $y->toString()}));
     assertEquals(['1', 2, '3'], ['1', 2, '1', '3', 1, 3, '3', 2]->removeDuplicates({x, y | $x->toString() == $y->toString()}));
     assertEquals([4,1,1,1,3,6],[4,1,1,1,2,3,2,6]->removeDuplicates({x:Integer[1], y:Integer[1] | ($x == 2 + $y)}));
     assertEquals([4,2,3,2,6],[4,1,1,1,2,3,2,6]->removeDuplicates({x:Integer[1] | ($x +2)}, {x:Integer[1], y:Integer[1] | ($x == 3 + $y)}));

     assertEquals([1, 2, '1', '3', 3], [1, 2, '1', '3', 1, 3, '3', 2]->removeDuplicates());
}

function <<test.Test>> meta::pure::functions::collection::tests::removeDuplicates::testRemoveDuplicatesByPrimitive():Boolean[1]
{
    assertEquals([1, 2, '3'], [1, 2, '1', '3', 1, 3, '3', 2]->removeDuplicatesBy({x | $x->toString()}));
    assertEquals(['1', 2, '3'], ['1', 2, '1', '3', 1, 3, '3', 2]->removeDuplicatesBy({x | $x->toString()}));
    assertEquals(['hello', 'world'], ['hello', 'helloWorld', 'world']->removeDuplicatesBy(x:String[1]|$x->substring(0,1)));
}

function <<test.Test>> meta::pure::functions::collection::tests::removeDuplicates::testRemoveDuplicatesEmptyList():Boolean[1]
{
    assertEquals([], []->removeDuplicates());
    assertEquals([], []->removeDuplicates({x, y | $x->toString() == $y->toString()}));
    assertEquals([], []->removeDuplicatesBy({x | $x->toString()}));
}