// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::asserts::*;

function meta::pure::functions::asserts::assertEqWithinTolerance(expected:Number[1], actual:Number[1], delta:Number[1]):Boolean[1]
{
    assertEqWithinTolerance($expected, $actual, $delta, '\nexpected: %r\nactual:   %r', [$expected, $actual]);
}

function meta::pure::functions::asserts::assertEqWithinTolerance(expected:Number[1], actual:Number[1], delta:Number[1], message:String[1]):Boolean[1]
{
    assert(abs($expected - $actual) <= abs($delta), $message);
}

function meta::pure::functions::asserts::assertEqWithinTolerance(expected:Number[1], actual:Number[1], delta:Number[1], formatString:String[1], formatArgs:Any[*]):Boolean[1]
{
    assert(abs($expected - $actual) <= abs($delta), $formatString, $formatArgs);
}

function meta::pure::functions::asserts::assertEqWithinTolerance(expected:Number[1], actual:Number[1], delta:Number[1], message:Function<{->String[1]}>[1]):Boolean[1]
{
    assert(abs($expected - $actual) <= abs($delta), $message);
}


function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertWithToleranceExactMatch():Boolean[1]
{
    assertEqWithinTolerance(1, 1, 0);
    assertEqWithinTolerance(1, 1, 0.0);
    assertEqWithinTolerance(1, 1.0, 0);
    assertEqWithinTolerance(1, 1.0, 0.0);
    assertEqWithinTolerance(1.0, 1, 0);
    assertEqWithinTolerance(1.0, 1, 0.0);
    assertEqWithinTolerance(1.0, 1.0, 0);
    assertEqWithinTolerance(1.0, 1.0, 0.0);

    assertEqWithinTolerance(-1, -1, 0);
    assertEqWithinTolerance(-1, -1, 0.0);
    assertEqWithinTolerance(-1, -1.0, 0);
    assertEqWithinTolerance(-1, -1.0, 0.0);
    assertEqWithinTolerance(-1.0, -1, 0);
    assertEqWithinTolerance(-1.0, -1, 0.0);
    assertEqWithinTolerance(-1.0, -1.0, 0);
    assertEqWithinTolerance(-1.0, -1.0, 0.0);

    assertEqWithinTolerance(3.14159, 3.14159, 0);
    assertEqWithinTolerance(3.14159, 3.14159, 0.0);
    assertEqWithinTolerance(-3.14159, -3.14159, 0);
    assertEqWithinTolerance(-3.14159, -3.14159, 0.0);
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertWithToleranceInexactMatch():Boolean[1]
{
    assertEqWithinTolerance(1, 0, 1);
    assertEqWithinTolerance(1, 0, 10);
    assertEqWithinTolerance(2.718281828459045, 2.7182818284590455, 0.000000000000001);
    assertEqWithinTolerance(-2.718281828459045, -2.7182818284590455, 0.000000000000001);
}
