// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::asserts::*;

function meta::pure::functions::asserts::assertInstanceOf(instance:Any[1], type:Type[1]):Boolean[1]
{
    assertInstanceOf($instance, $type, | format('expected %r to be an instance of %s, actual: %s', [$instance, $type->elementToPath(), $instance->type()->toOne()->elementToPath()]));
}

function meta::pure::functions::asserts::assertInstanceOf(instance:Any[1], type:Type[1], message:String[1]):Boolean[1]
{
    assert($instance->instanceOf($type), $message);
}

function meta::pure::functions::asserts::assertInstanceOf(instance:Any[1], type:Type[1], formatString:String[1], formatArgs:Any[*]):Boolean[1]
{
    assert($instance->instanceOf($type), $formatString, $formatArgs);
}

function meta::pure::functions::asserts::assertInstanceOf(instance:Any[1], type:Type[1], message:Function<{->String[1]}>[1]):Boolean[1]
{
    assert($instance->instanceOf($type), $message);
}



function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertInstanceOf():Any[*]
{
    assertInstanceOf(1, Integer);
    assertInstanceOf('the quick' + ' ' + 'brown fox', String);
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertInstanceOfDates():Any[*]
{
    assertInstanceOf(%2015-03-14, Date);
    assertInstanceOf(%2015-03-14, StrictDate);
    assertInstanceOf(%2015-03-14, Any);
    assertInstanceOf(%2015-03-14T23:59:00, DateTime);
}