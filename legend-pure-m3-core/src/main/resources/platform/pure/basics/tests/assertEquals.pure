// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::asserts::*;

function meta::pure::functions::asserts::assertEquals(expected:Any[*], actual:Any[*]):Boolean[1]
{
    if(eq($expected->size(), 1) && eq($actual->size(), 1),
       | assertEquals($expected, $actual, '\nexpected: %r\nactual:   %r', [$expected->toOne(), $actual->toOne()]),
       | assertEquals($expected, $actual, '\nexpected: %s\nactual:   %s', [$expected->map(x | $x->toRepresentation())->joinStrings('[', ', ', ']'), $actual->map(x | $x->toRepresentation())->joinStrings('[', ', ', ']')]));
}

function meta::pure::functions::asserts::assertEquals(expected:Any[*], actual:Any[*], formatString:String[1], formatArgs:Any[*]):Boolean[1]
{
    assert(equal($expected, $actual), $formatString, $formatArgs);
}

function meta::pure::functions::asserts::assertEquals(expected:Any[*], actual:Any[*], message:Function<{->String[1]}>[1]):Boolean[1]
{
    assert(equal($expected, $actual), $message);
}

function meta::pure::functions::asserts::assertEquals(expected:Any[*], actual:Any[*], message:String[1]):Boolean[1]
{
    assert(equal($expected, $actual), $message);
}



function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertEquals():Boolean[1]
{
    assertEquals(1, 1);
    assertEquals('aaa', 'aaa');
}

function <<test.Test>> meta::pure::functions::asserts::tests::testSuccessAssertEqualsWithCollections():Boolean[1]
{
    assertEquals([1, 2], [1, 2]);
    assertEquals(['aaa'], ['aaa']);
    assertEquals(['aaa', 'bb'], ['aaa', 'bb']);
    assertEquals(['aaa', 2], ['aaa', 2]);
}