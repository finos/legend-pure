// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::meta::tests::model::*;

function meta::pure::functions::meta::elementToPath(element:Function<Any>[1]):String[1]
{
    $element->match(
        [
            p : PackageableElement[1] | $p->elementToPath('::'),
            p : AbstractProperty<Any>[1] | $p.name->toOne()
        ]
    )
}

function meta::pure::functions::meta::elementToPath(element:Type[1]):String[1]
{
    $element->cast(@PackageableElement)->elementToPath('::')
}

function meta::pure::functions::meta::elementToPath(element:Type[1], separator:String[1]):String[1]
{
    $element->cast(@PackageableElement)->elementToPath($separator)
}

function meta::pure::functions::meta::elementToPath(element:PackageableElement[1]):String[1]
{
    $element->elementToPath('::')
}

function meta::pure::functions::meta::elementToPath(element:PackageableElement[1], separator:String[1]):String[1]
{
    let path = $element->elementPath();
    if($path->size() == 1,
       | let first = $path->at(0);
         if(is(::, $first),
            | '',
            | $first.name->toOne());,
       | $path->tail()->map(e | $e.name)->joinStrings($separator));
}

function meta::pure::functions::meta::elementPath(element:PackageableElement[1]):PackageableElement[1..*]
{
    let pkg = $element.package;
    if ($pkg->isEmpty(),
        | $element->toOneMany(), // this is a hack to work around a problem with the compiled execution
        | elementPath($pkg->toOne())->add($element));
}




function <<test.Test>> meta::pure::functions::meta::tests::elementToPath::testElementToPath():Boolean[1]
{
    let path = 'meta::pure::functions::lang';
    assertEquals($path, elementToPath($path->pathToElement()));
}

function <<test.Test>> meta::pure::functions::meta::tests::elementToPath::testTopLevelElementToPath():Boolean[1]
{
    assertEquals('Package', elementToPath(Package));
    assertEquals('Number', elementToPath(Number));
    assertEquals('Boolean', elementToPath(Boolean));
    assertEquals('Date', elementToPath(Date));
    assertEquals('Float', elementToPath(Float));
    assertEquals('Integer', elementToPath(Integer));
    assertEquals('String', elementToPath(String));
}

function <<test.Test>> meta::pure::functions::meta::tests::elementToPath::testRootElementToPath():Boolean[1]
{
    assertEquals('', elementToPath(::));
    assertEquals('', elementToPath(::, '.'));
}

function <<test.Test>> meta::pure::functions::meta::tests::elementToPath::testPackageablesToPath():Boolean[1]
{
    assertEquals('meta::pure::functions::meta::tests::model::CC_Person', elementToPath(CC_Person));
    assertEquals('meta.pure.functions.meta.tests.model.CC_Person', elementToPath(CC_Person, '.'));
    assertEquals('meta::pure::functions::meta::tests::model', elementToPath(CC_Person.package->at(0)));
    assertEquals('meta_pure_functions_meta_tests_model', elementToPath(CC_Person.package->at(0), '_'));
}

function <<test.Test>> meta::pure::functions::meta::tests::elementToPath::testEnumerationToPath():Boolean[1]
{
    assertEquals('meta::pure::functions::meta::tests::model::CC_GeographicEntityType', elementToPath(CC_GeographicEntityType));
    assertEquals('meta_pure_functions_meta_tests_model_CC_GeographicEntityType', elementToPath(CC_GeographicEntityType, '_'));
    assertEquals('meta::pure::functions::meta::tests::model', elementToPath(CC_GeographicEntityType->cast(@PackageableElement).package->at(0)));
    assertEquals('meta.pure.functions.meta.tests.model', elementToPath(CC_GeographicEntityType->cast(@PackageableElement).package->at(0), '.'));
}
