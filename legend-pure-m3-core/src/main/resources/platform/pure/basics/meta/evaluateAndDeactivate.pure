// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

native function meta::pure::functions::meta::evaluateAndDeactivate<T|m>(var:T[m]):T[m];

function <<test.Test>> meta::pure::functions::meta::tests::evaluateAndDeactivate::testEvaluateAndDeactivate():Boolean[1]
{
    let f = {a:String[1], b:Integer[1] | true};
    assertEquals(['a', 'b'], $f->genericType().typeArguments->at(0).rawType->toOne()->cast(@FunctionType).parameters->evaluateAndDeactivate()->map(v | $v.name));
}

function <<test.Test>> meta::pure::functions::meta::tests::evaluateAndDeactivate::testEvaluateAndDeactivateFunctionDefinition():Boolean[1]
{
    let f = {| true};
    assertEquals(true, $f->evaluateAndDeactivate().expressionSequence->cast(@InstanceValue).values);
}

function meta::pure::functions::meta::tests::evaluateAndDeactivate::f(i:Integer[1]):Integer[1]
{
   $i;
}