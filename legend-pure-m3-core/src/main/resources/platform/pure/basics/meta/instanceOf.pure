// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::meta::tests::model::*;


native function meta::pure::functions::meta::instanceOf(instance:Any[1], type:Type[1]):Boolean[1];


function <<test.Test>> meta::pure::functions::meta::tests::instanceOf::testInstanceOfPrimitive():Boolean[1]
{
    assert(1->instanceOf(Integer));
    assert(1->instanceOf(Number));
    assert(1->instanceOf(Any));
    assertFalse(1->instanceOf(String));
    assertFalse(1->instanceOf(Boolean));
    assertFalse(1->instanceOf(Date));
    assertFalse(1->instanceOf(Float));

    assert('the quick brown fox jumps over the lazy dog'->instanceOf(String));
    assert('the quick brown fox jumps over the lazy dog'->instanceOf(Any));
    assertFalse('the quick brown fox jumps over the lazy dog'->instanceOf(Integer));
    assertFalse('the quick brown fox jumps over the lazy dog'->instanceOf(Number));
    assertFalse('the quick brown fox jumps over the lazy dog'->instanceOf(Boolean));
    assertFalse('the quick brown fox jumps over the lazy dog'->instanceOf(Date));
    assertFalse('the quick brown fox jumps over the lazy dog'->instanceOf(Float));

    assert(true->instanceOf(Boolean));
    assert(true->instanceOf(Any));
    assertFalse(true->instanceOf(Integer));
    assertFalse(true->instanceOf(Number));
    assertFalse(true->instanceOf(String));
    assertFalse(true->instanceOf(Date));
    assertFalse(true->instanceOf(Float));
}

function <<test.Test>> meta::pure::functions::meta::tests::instanceOf::testInstanceOfPrimitiveType():Boolean[1]
{
    assert(Boolean->instanceOf(PrimitiveType));
    assert(Date->instanceOf(PrimitiveType));
    assert(Integer->instanceOf(PrimitiveType));
    assert(Float->instanceOf(PrimitiveType));
    assert(Number->instanceOf(PrimitiveType));
    assert(String->instanceOf(PrimitiveType));
}

function <<test.Test>>   meta::pure::functions::meta::tests::instanceOf::testInstanceOfDate():Boolean[1]
{
    assert(%2015-01-01->instanceOf(Date));
    assertFalse(1->instanceOf(Date));
}

function <<test.Test>> meta::pure::functions::meta::tests::instanceOf::testInstanceOfInstance():Boolean[1]
{
    let a = ^CC_Address(name='Jersey City', type=CC_GeographicEntityType.CITY);
    assert($a->instanceOf(CC_Address));
    assert($a->instanceOf(CC_GeographicEntity));
    assert($a->instanceOf(Any));
    assertFalse($a->instanceOf(CC_Person));
    assertFalse($a->instanceOf(Integer));
}

function <<test.Test>> meta::pure::functions::meta::tests::instanceOf::testInstanceOfClass():Boolean[1]
{
    assert(CC_Person->instanceOf(Class));
    assert(CC_Person->instanceOf(Type));
    assert(CC_Person->instanceOf(Any));
}

function <<test.Test>> meta::pure::functions::meta::tests::instanceOf::testInstanceOfEnum():Boolean[1]
{
    assert(CC_GeographicEntityType->instanceOf(Type));
    assert(CC_GeographicEntityType->instanceOf(Any));
    assertFalse(CC_GeographicEntityType->instanceOf(Class));
}

function <<test.Test>> meta::pure::functions::meta::tests::instanceOf::testInstanceOfFromEnumVal():Boolean[1]
{
    assert(CC_GeographicEntityType.CITY->instanceOf(CC_GeographicEntityType));
    assert(CC_GeographicEntityType.CITY->instanceOf(Enum));
    assert(CC_GeographicEntityType.CITY->instanceOf(Any));
    assertFalse(CC_GeographicEntityType.CITY->instanceOf(Enumeration));
    assertFalse(CC_GeographicEntityType.CITY->instanceOf(Type));
    assertFalse(CC_GeographicEntityType.CITY->instanceOf(Integer));
}
