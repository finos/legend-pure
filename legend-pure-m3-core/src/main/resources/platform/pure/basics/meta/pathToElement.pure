// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::meta::tests::model::*;

function meta::pure::functions::meta::pathToElement(path:String[1]):PackageableElement[1]
{
    $path->pathToElement('::')
}

function meta::pure::functions::meta::pathToElement(path:String[1], separator:String[1]):PackageableElement[1]
{
    $path->split($separator)->fold({str:String[1], pkg:PackageableElement[1] | let p = $pkg->cast(@Package).children->filter(c | $c.name == $str);
                                                                               if ($p->isEmpty(), | fail(| $path + ' is not a valid PackageableElement. Package \'' + $str + '\' not found'); $p->toOne();, | $p->toOne());
                                   }, ::)
}



function <<test.Test>> meta::pure::functions::meta::tests::pathToElement::testPathToElement():Boolean[1]
{
    assertIs(CC_Person, pathToElement('meta::pure::functions::meta::tests::model::CC_Person'));
    assertIs(CC_Person, pathToElement('meta.pure.functions.meta.tests.model.CC_Person', '.'));
    assertIs(CC_Person.package->toOne(), pathToElement('meta::pure::functions::meta::tests::model'));
    assertIs(CC_Person.package->toOne(), pathToElement('meta_pure_functions_meta_tests_model', '_'));
}

function <<test.Test>> meta::pure::functions::meta::tests::pathToElement::testRootPathToElement():Boolean[1]
{
    assertIs(::, pathToElement('::'));
    assertIs(::, pathToElement('.', '.'));
}

function <<test.Test>> meta::pure::functions::boolean::tests::testIsNativeFunctions():Boolean[1]
{
    assert(is(meta::pure::functions::string::toString_Any_1__String_1_, pathToElement('meta::pure::functions::string::toString_Any_1__String_1_')));
}

function <<test.Test, test.ToFix>> meta::pure::functions::boolean::tests::testIsConcreteFunctionDefinitions():Boolean[1]
{
    assert(is(meta::pure::functions::boolean::greaterThan_Number_1__Number_1__Boolean_1_, pathToElement('meta::pure::functions::boolean::greaterThan_Number_1__Number_1__Boolean_1_')));
}
