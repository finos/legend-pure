// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::lang::tests::match::*;

native function meta::pure::functions::lang::match<T|m,n>(var:Any[*], functions:Function<{Nil[n]->T[m]}>[1..*]):T[m];

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchOneWithZeroOne():Boolean[1]
{
   assertEquals(1, [1]->match([
         i:Integer[0..1] | [1],
         s:String[1]     | 'address:'
   ]))
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchOneWith():Boolean[1]
{
   assertEquals('address:Digby', 'Digby'->match([
         i:Integer[1..4] | [1,2,3],
         s:String[1]     | 'address:' + $s
   ]))
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchOneWithMany():Boolean[1]
{
   assertEquals('address:Digby', 'Digby'->match([
         i:Integer[1..4] | [1,2,3],
         s:String[1..2]  | 'address:Digby'
   ]))
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchZeroWithZero():Boolean[1]
{
   assertEquals('address', []->cast(@String)->match([
         i:Integer[1..4] | [1,2,3],
         s:String[0]     | 'address'
   ]))
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchZeroWithMany():Boolean[1]
{
   assertEquals('address', []->cast(@String)->match([
         i:Integer[1..4] | [1,2,3],
         s:String[*]     | 'address'
   ]))
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchManyWithMany():Boolean[1]
{
   assertEquals('address:3', ['w','w','w']->match([
         i:Integer[1..4] | 'z',
         s:String[*]     | 'address:' + $s->size()->toString()
   ]))
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchWithFunctionsAsParam():Boolean[1]
{
    let lambdas = [{a:Integer[1]|1}, {a:String[1]|[1,2]}, {a:Date[1]|[4,5,6]}];
    assertEquals([1], 1->match($lambdas));
    assertEquals([1,2], '1'->match($lambdas));
    assertEquals([4,5,6], %2005->match($lambdas));
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchWithFunctionsAsParamManyMatch():Boolean[1]
{
    let lambdas = [{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}];
    assertEquals([1], 1->match($lambdas));
    assertEquals(['1','2'], ['1','2']->match($lambdas));
    assertEquals([6,7,1,2], '1'->match($lambdas));
    assertEquals([4,5,6], %2005->match($lambdas));

    let lambdas2 = [{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}];
    assertEquals([1], 1->match($lambdas2));
    assertEquals(['1','2'], ['1','2']->match($lambdas2));
    assertEquals('1', '1'->match($lambdas2));
    assertEquals([4,5,6], %2005->match($lambdas2));
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchWithFunctions():Boolean[1]
{
    assertEquals([1], 1->match([{a:Integer[1]|1}, {a:String[1]|[1,2]}, {a:Date[1]|[4,5,6]}]));
    assertEquals([1,2], '1'->match([{a:Integer[1]|1}, {a:String[1]|[1,2]}, {a:Date[1]|[4,5,6]}]));
    assertEquals([4,5,6], %2005->match([{a:Integer[1]|1}, {a:String[1]|[1,2]}, {a:Date[1]|[4,5,6]}]));
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatchWithFunctionsManyMatch():Boolean[1]
{

    assertEquals([1], 1->match([{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}]));
    assertEquals(['1','2'], ['1','2']->match([{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}]));
    assertEquals([6,7,1,2], '1'->match([{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}]));
    assertEquals([4,5,6], %2005->match([{a:Integer[1]|1}, {a:String[1]|[6,7,1,2]}, {a:String[*]|$a}, {a:Date[1]|[4,5,6]}]));


    assertEquals([1], 1->match([{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}]));
    assertEquals(['1','2'], ['1','2']->match([{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}]));
    assertEquals('1', '1'->match([{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}]));
    assertEquals([4,5,6], %2005->match([{a:Integer[1]|1}, {a:String[*]|$a}, {a:String[1]|[6,7,1,2]}, {a:Date[1]|[4,5,6]}]));
}

Class meta::pure::functions::lang::tests::match::Geo
{
    type : MA_GeographicEntityType[1];
}

Class meta::pure::functions::lang::tests::match::MA_Address extends Geo
{
    name : String[1];
}

Class meta::pure::functions::lang::tests::match::MA_Person
{
    firstName : String[1];
    lastName : String[1];
}

Class meta::pure::functions::lang::tests::match::MA_Location extends Geo
{
    place : String[1];
}

Enum meta::pure::functions::lang::tests::match::MA_GeographicEntityType
{
    CITY
}

function <<test.Test>> meta::pure::functions::lang::tests::match::testMatch():Boolean[1]
{
    assertEq('address', ^MA_Address(name='Hoboken, NJ', type=MA_GeographicEntityType.CITY)->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[1] | 'Any1']));
    assertEq('location', ^MA_Location(place='Hoboken, NJ', type=MA_GeographicEntityType.CITY)->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[1] | 'Any1']));
    assertEq('Any1', ^MA_Person(firstName='Pierre', lastName='Doe')->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[1] | 'Any1']));
    assertEq('Any*', ^MA_Person(firstName='Pierre', lastName='Doe')->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[*] | 'Any*']));
    assertEq('Any*', [^MA_Person(firstName='Pierre', lastName='Doe'), ^MA_Person(firstName='Fabrice', lastName='Smith')]->match([a:MA_Address[1] | 'address', l:MA_Location[1] | 'location', a:Any[*] | 'Any*']));
}


