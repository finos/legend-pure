// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

native function meta::pure::functions::lang::new<T>(class:Class<T>[1], id:String[1]):T[1];
native function meta::pure::functions::lang::new<T>(class:Class<T>[1], id:String[1], keyExpressions:KeyExpression[*]):T[1];

native function meta::pure::functions::lang::copy<T>(object:T[1], id:String[1], keyExpressions:KeyExpression[*]):T[1];
native function meta::pure::functions::lang::copy<T>(object:T[1], id:String[1]):T[1];

native function meta::pure::functions::lang::letFunction<T|m>(left:String[1], right:T[m]):T[m];

native function meta::pure::functions::math::plus(ints:Integer[*]):Integer[1];
native function meta::pure::functions::math::plus(float:Float[*]):Float[1];
native function meta::pure::functions::math::plus(decimal:Decimal[*]):Decimal[1];
native function meta::pure::functions::math::plus(numbers:Number[*]):Number[1];
function meta::pure::functions::string::plus(strings:String[*]):String[1]
{
    $strings->joinStrings('', '', '')
}
native function meta::pure::functions::string::joinStrings(strings:String[*], prefix:String[1], separator:String[1], suffix:String[1]):String[1];

native function meta::pure::functions::math::minus(ints:Integer[*]):Integer[1];
native function meta::pure::functions::math::minus(float:Float[*]):Float[1];
native function meta::pure::functions::math::minus(decimal:Decimal[*]):Decimal[1];
native function meta::pure::functions::math::minus(numbers:Number[*]):Number[1];

native function meta::pure::functions::math::times(ints:Integer[*]):Integer[1];
native function meta::pure::functions::math::times(ints:Float[*]):Float[1];
native function meta::pure::functions::math::times(decimal:Decimal[*]):Decimal[1];
native function meta::pure::functions::math::times(numbers:Number[*]):Number[1];

native function meta::pure::functions::math::divide(left:Number[1], right:Number[1]):Float[1];
native function meta::pure::functions::math::divide(left:Decimal[1], right:Decimal[1], scale:Integer[1]):Decimal[1];

native function meta::pure::functions::collection::range(start:Integer[1], stop:Integer[1], step:Integer[1]):Integer[*];

native function meta::pure::functions::collection::getAll<T>(type:Class<T>[1]):T[*];
native function meta::pure::functions::collection::getAllVersions<T>(type:Class<T>[1]):T[*];
native function meta::pure::functions::collection::getAllVersionsInRange<T>(type:Class<T>[1], start:Date[1], end:Date[1]):T[*];
native function meta::pure::functions::collection::getAll<T>(type:Class<T>[1], milestoningDate:Date[1]):T[*];
native function meta::pure::functions::collection::getAll<T>(type:Class<T>[1], processingDate:Date[1], businessDate:Date[1]):T[*];

// For automap
native function meta::pure::functions::collection::map<T,V|m>(value:T[m], func:Function<{T[1]->V[1]}>[1]):V[m];
native function meta::pure::functions::collection::map<T,V>(value:T[*], func:Function<{T[1]->V[*]}>[1]):V[*];
native function meta::pure::functions::collection::map<T,V>(value:T[0..1], func:Function<{T[1]->V[0..1]}>[1]):V[0..1];
//--------------------------------------

// For Milestoning generated properties
native function meta::pure::functions::collection::filter<T>(value:T[*], func:Function<{T[1]->Boolean[1]}>[1]):T[*];
// Return the first element of the collection, or nothing if the collection is empty
native function meta::pure::functions::collection::first<T>(set:T[*]):T[0..1];
native function meta::pure::functions::multiplicity::toOneMany<T>(values:T[*]):T[1..*];
native function meta::pure::functions::multiplicity::toOneMany<T>(values:T[*], message: String[1]):T[1..*];
//--------------------------------------

native function meta::pure::functions::meta::extractEnumValue<T>(enum:Enumeration<T>[1], value:String[1]):T[1];

native function meta::pure::functions::boolean::and(first:Boolean[1], second:Boolean[1]):Boolean[1];
native function meta::pure::functions::boolean::or(first:Boolean[1], second:Boolean[1]):Boolean[1];
native function meta::pure::functions::boolean::not(bool:Boolean[1]):Boolean[1];

native function meta::pure::functions::boolean::lessThan(left:Number[1], right:Number[1]):Boolean[1];
native function meta::pure::functions::boolean::lessThanEqual(left:Number[1], right:Number[1]):Boolean[1];
function meta::pure::functions::boolean::greaterThan(left:Number[1], right:Number[1]):Boolean[1]
{
    lessThan($right, $left)
}

native function meta::pure::functions::collection::isEmpty(p:Any[*]):Boolean[1];

function meta::pure::functions::collection::isEmpty(p:Any[0..1]):Boolean[1]
{
    eq($p->size(), 0)
}

native function meta::pure::functions::collection::size(p:Any[*]):Integer[1];

function meta::pure::functions::collection::isNotEmpty(p:Any[0..1]):Boolean[1]
{
    !isEmpty($p)
}

native function meta::pure::functions::multiplicity::toOne<T>(values:T[*]):T[1];

native function meta::pure::functions::multiplicity::toOne<T>(values:T[*], message: String[1]): T[1];

function meta::pure::functions::boolean::lessThan(left:Number[0..1], right:Number[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThan($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThan(left:Number[1], right:Number[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThan($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThan(left:Number[0..1], right:Number[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThan($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThanEqual(left:Number[0..1], right:Number[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Number[1], right:Number[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Number[0..1], right:Number[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::greaterThan(left:Number[0..1], right:Number[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThan($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::greaterThan(left:Number[1], right:Number[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThan($left, $right->toOne())
}

function meta::pure::functions::boolean::greaterThan(left:Number[0..1], right:Number[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThan($left->toOne(), $right)
}

function meta::pure::functions::boolean::greaterThanEqual(left:Number[0..1], right:Number[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::greaterThanEqual(left:Number[1], right:Number[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::greaterThanEqual(left:Number[0..1], right:Number[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThan(left:Date[0..1], right:Date[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThan($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThan(left:Date[1], right:Date[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThan($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThan(left:Date[0..1], right:Date[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThan($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThanEqual(left:Date[0..1], right:Date[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Date[1], right:Date[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Date[0..1], right:Date[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::greaterThan(left:Date[0..1], right:Date[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThan($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::greaterThan(left:Date[1], right:Date[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThan($left, $right->toOne())
}

function meta::pure::functions::boolean::greaterThan(left:Date[0..1], right:Date[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThan($left->toOne(), $right)
}

function meta::pure::functions::boolean::greaterThanEqual(left:Date[0..1], right:Date[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::greaterThanEqual(left:Date[1], right:Date[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::greaterThanEqual(left:Date[0..1], right:Date[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThan(left:String[0..1], right:String[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThan($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThan(left:String[1], right:String[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThan($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThan(left:String[0..1], right:String[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThan($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThanEqual(left:String[0..1], right:String[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:String[1], right:String[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:String[0..1], right:String[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::greaterThan(left:String[0..1], right:String[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThan($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::greaterThan(left:String[1], right:String[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThan($left, $right->toOne())
}

function meta::pure::functions::boolean::greaterThan(left:String[0..1], right:String[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThan($left->toOne(), $right)
}

function meta::pure::functions::boolean::greaterThanEqual(left:String[0..1], right:String[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::greaterThanEqual(left:String[1], right:String[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::greaterThanEqual(left:String[0..1], right:String[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThan(left:Boolean[0..1], right:Boolean[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThan($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThan(left:Boolean[1], right:Boolean[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThan($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThan(left:Boolean[0..1], right:Boolean[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThan($left->toOne(), $right)
}

function meta::pure::functions::boolean::lessThanEqual(left:Boolean[0..1], right:Boolean[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && lessThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Boolean[1], right:Boolean[0..1]):Boolean[1]
{
    $right->isNotEmpty() && lessThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::lessThanEqual(left:Boolean[0..1], right:Boolean[1]):Boolean[1]
{
    $left->isNotEmpty() && lessThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::greaterThan(left:Boolean[0..1], right:Boolean[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThan($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::greaterThan(left:Boolean[1], right:Boolean[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThan($left, $right->toOne())
}

function meta::pure::functions::boolean::greaterThan(left:Boolean[0..1], right:Boolean[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThan($left->toOne(), $right)
}

function meta::pure::functions::boolean::greaterThanEqual(left:Boolean[0..1], right:Boolean[0..1]):Boolean[1]
{
    $left->isNotEmpty() && $right->isNotEmpty() && greaterThanEqual($left->toOne(), $right->toOne())
}

function meta::pure::functions::boolean::greaterThanEqual(left:Boolean[1], right:Boolean[0..1]):Boolean[1]
{
    $right->isNotEmpty() && greaterThanEqual($left, $right->toOne())
}

function meta::pure::functions::boolean::greaterThanEqual(left:Boolean[0..1], right:Boolean[1]):Boolean[1]
{
    $left->isNotEmpty() && greaterThanEqual($left->toOne(), $right)
}

function meta::pure::functions::boolean::greaterThanEqual(left:Number[1], right:Number[1]):Boolean[1]
{
    lessThanEqual($right, $left)
}

native function meta::pure::functions::lang::compare<T>(a:T[1], b:T[1]):Integer[1];

function meta::pure::functions::boolean::lessThan(left:Date[1], right:Date[1]):Boolean[1]
{
    compare($left, $right) < 0
}

function meta::pure::functions::boolean::lessThanEqual(left:Date[1], right:Date[1]):Boolean[1]
{
    compare($left, $right) <= 0
}

function meta::pure::functions::boolean::greaterThan(left:Date[1], right:Date[1]):Boolean[1]
{
    lessThan($right, $left)
}

function meta::pure::functions::boolean::greaterThanEqual(left:Date[1], right:Date[1]):Boolean[1]
{
    lessThanEqual($right, $left)
}

function meta::pure::functions::boolean::lessThan(left:String[1], right:String[1]):Boolean[1]
{
    compare($left, $right) < 0
}

function meta::pure::functions::boolean::lessThanEqual(left:String[1], right:String[1]):Boolean[1]
{
    compare($left, $right) <= 0
}

function meta::pure::functions::boolean::greaterThan(left:String[1], right:String[1]):Boolean[1]
{
    lessThan($right, $left)
}

function meta::pure::functions::boolean::greaterThanEqual(left:String[1], right:String[1]):Boolean[1]
{
    lessThanEqual($right, $left)
}

function meta::pure::functions::boolean::lessThan(left:Boolean[1], right:Boolean[1]):Boolean[1]
{
    !$left && $right
}

function meta::pure::functions::boolean::lessThanEqual(left:Boolean[1], right:Boolean[1]):Boolean[1]
{
    !$left || $right
}

function meta::pure::functions::boolean::greaterThan(left:Boolean[1], right:Boolean[1]):Boolean[1]
{
    lessThan($right, $left)
}

function meta::pure::functions::boolean::greaterThanEqual(left:Boolean[1], right:Boolean[1]):Boolean[1]
{
    lessThanEqual($right, $left)
}


