// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

native function meta::pure::functions::boolean::or(first:Boolean[1], second:Boolean[1]):Boolean[1];

function <<test.Test>> meta::pure::functions::boolean::tests::or::testBinaryTruthTable():Boolean[1]
{
    assert(true || true);
    assert(true || false);
    assert(false || true);
    assertFalse(false || false);
}

function <<test.Test>> meta::pure::functions::boolean::tests::or::testBinaryExpressions():Boolean[1]
{
    assert((1 == 1) || (2 == 3));
    assertFalse((1 == 2) || (2 == 3));
}

function <<test.Test>> meta::pure::functions::boolean::tests::or::testTernaryTruthTable():Boolean[1]
{
    assert(true || true || true);
    assert(true || true || false);
    assert(true || false || true);
    assert(true || false || false);
    assert(false || true || true);
    assert(false || true || false);
    assert(false || false || true);
    assertFalse(false || false || false);
}

function <<test.Test>> meta::pure::functions::boolean::tests::or::testTernaryExpressions():Boolean[1]
{
    assert((1 != 1) || (2 == 3) || true);
    assertFalse((1 == 2) || (2 == 3) || false);
}

function <<test.Test>> meta::pure::functions::boolean::tests::or::testShortCircuit():Boolean[1]
{
    let val1 = ^List<String>(values=['Claudius', 'Ptolemy']);
    let val2 = 'Claudius Ptolemy';
    assertFalse(!$val1->instanceOf(List) || ($val1->cast(@List<String>).values != ['Claudius', 'Ptolemy']));
    assert(!$val2->instanceOf(List) || ($val2->cast(@List<String>).values != ['Claudius', 'Ptolemy']));
}

function <<test.Test>> meta::pure::functions::boolean::tests::or::testShortCircuitInDynamicEvaluation():Boolean[1]
{
    let fn1 = {|let val1 = ^List<String>(values=['Claudius', 'Ptolemy']);
                !$val1->instanceOf(List) || ($val1->cast(@List<String>).values != ['Claudius', 'Ptolemy']);};
    let lambda1 = ^LambdaFunction<{->Boolean[1]}>(expressionSequence = $fn1.expressionSequence);
    assertEquals(false, $lambda1->evaluate([]));

    let fn2 = {|let val2 = 'Claudius Ptolemy';
                !$val2->instanceOf(List) || ($val2->cast(@List<String>).values != ['Claudius', 'Ptolemy']);};
    let lambda2 = ^LambdaFunction<{->Boolean[1]}>(expressionSequence = $fn2.expressionSequence);
    assertEquals(true, $lambda2->evaluate([]));
}
