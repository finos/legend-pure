// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// For Milestoning generated properties
native function meta::pure::functions::multiplicity::toOneMany<T>(values:T[*]):T[1..*];
native function meta::pure::functions::multiplicity::toOneMany<T>(values:T[*], message: String[1]):T[1..*];

function <<test.Test>> meta::pure::functions::multiplicity::tests::toOneMany::testToOneManyMultiplicity():Boolean[1]
{
    assertIs(OneMany, {|toOneMany('a')}.expressionSequence->at(0)->evaluateAndDeactivate().multiplicity);
    assertIs(OneMany, {|toOneMany(['a', 'b', 'c'])}.expressionSequence->at(0)->evaluateAndDeactivate().multiplicity);
    assertIs(OneMany, {|[1, 2, 3]->first()->toOneMany()}.expressionSequence->at(0)->evaluateAndDeactivate().multiplicity);
    assertIs(OneMany, {|[1, 2, 3]->filter(x | $x > 1)->toOneMany()}.expressionSequence->at(0)->evaluateAndDeactivate().multiplicity);
}

function <<test.Test>> meta::pure::functions::multiplicity::tests::toOneMany::testToOneMany():Boolean[1]
{
    assertEquals('a', 'a'->toOneMany());
    assertEquals(['a', 'b', 'c'], ['a', 'b', 'c']->toOneMany());
    assertEquals(1, [1, 2, 3]->first()->toOneMany());
    assertEquals([2, 3], [1, 2, 3]->filter(x | $x > 1)->toOneMany());
}