// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::functions::string::tests::plus::model::*;

function meta::pure::functions::string::plus(strings:String[*]):String[1]
{
    $strings->joinStrings('', '', '')
}

function <<test.Test>> meta::pure::functions::string::tests::plus::testPlus():Boolean[1]
{
    assertEq('ap', 'a' + 'p');
}

function <<test.Test>> meta::pure::functions::string::tests::plus::testMultiPlus():Boolean[1]
{
    assertEq('the quick brown fox jumps over the lazy dog', 'the quick brown fox' + ' jumps over ' + 'the lazy dog');
    assertEq('the quick brown fox jumps over the lazy dog', ('the quick brown fox' + ' jumps over ') + 'the lazy dog');
    assertEq('the quick brown fox jumps over the lazy dog', 'the quick brown fox' + ' ' + 'jumps' + ' ' + 'over' + ' ' + 'the lazy dog');
    assertEq('the quick brown fox jumps over the lazy dog', 'the quick brown fox' + (' ' + 'jumps' + ' ' + 'over' + ' ' + 'the lazy dog'));
}

function <<test.Test>> meta::pure::functions::string::tests::plus::testMultiPlusWithFunctionExpressions():Boolean[1]
{
    assertEq('1 2 3', toString(1) + ' ' + toString(1 + 1) + ' ' + toString(2 + 1));
}

function <<test.Test>> meta::pure::functions::string::tests::plus::testMultiPlusWithPropertyExpressions():Boolean[1]
{
    let hoboken = ^P_Location(place='Hoboken, NJ', type=P_GeographicEntityType.CITY);
    let jc = ^P_Location(place='Jersey City, NJ', type=P_GeographicEntityType.CITY);
    assertEq('Hoboken, NJ; Jersey City, NJ', $hoboken.place + '; ' + $jc.place);
}

function <<test.Test>> meta::pure::functions::string::tests::plus::testPlusInCollect():Boolean[1]
{
    let people = [^P_Person(firstName='Pierre', lastName='Doe'), ^P_Person(firstName='Kevin', lastName='RoeDoe')];
    assertEquals(['Doe, Pierre', 'RoeDoe, Kevin'], $people->map(p | $p.lastName->at(0) + ', ' + $p.firstName->at(0)));
}

function <<test.Test>> meta::pure::functions::string::tests::plus::testPlusInIterate():Boolean[1]
{
    let people = [^P_Person(firstName='Pierre', lastName='Doe'), ^P_Person(firstName='Kevin', lastName='RoeDoe'), ^P_Person(firstName='Andrew', lastName='Some_LName')];
    assertEq('names; Doe, Pierre; RoeDoe, Kevin; Some_LName, Andrew', $people->fold({p, s | $s + '; ' + $p.lastName->at(0) + ', ' + $p.firstName->at(0)}, 'names'));

    let person = $people->fold({p1, p2 | ^$p2(lastName = ($p2.lastName->at(0) + ' ' + $p1.lastName->at(0)))}, ^P_Person(firstName='', lastName='init:'));
    assertEquals('init: Doe RoeDoe Some_LName', $person.lastName);
}

Class meta::pure::functions::string::tests::plus::model::P_GeographicEntity
{
    type : P_GeographicEntityType[1];
}

Class meta::pure::functions::string::tests::plus::model::P_Location extends P_GeographicEntity
{
    place : String[1];
    censusdate: Date[0..1];
}

Class meta::pure::functions::string::tests::plus::model::P_Person
{
    firstName : String[1];
    lastName: String[1];
}

Enum meta::pure::functions::string::tests::plus::model::P_GeographicEntityType
{
    {doc.doc = 'A city, town, village, or other urban area.'} CITY,
    <<doc.deprecated>> COUNTRY,
    {doc.doc = 'Any geographic entity other than a city or country.'} REGION
}
