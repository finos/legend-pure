// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function meta::pure::functions::meta::hasUpperBound(multiplicity:Multiplicity[1]):Boolean[1]
{
    let upperBound = $multiplicity.upperBound;
    !$upperBound->isEmpty() && !$upperBound->toOne().value->isEmpty() && $upperBound->toOne().value != -1;
}

function <<test.Test>> meta::pure::functions::multiplicity::tests::hasUpperBound::testHasUpperBound():Boolean[1]
{
    assert(PureZero->hasUpperBound());
    assert(ZeroOne->hasUpperBound());
    assert(PureOne->hasUpperBound());
    assertFalse(ZeroMany->hasUpperBound());
    assertFalse(OneMany->hasUpperBound());
}

function <<test.Test>> meta::pure::functions::multiplicity::tests::hasUpperBound::testHasUpperBoundNonConcrete():Boolean[1]
{
    assertFalse(sort_T_m__T_m_->functionType().returnMultiplicity->hasUpperBound());
}