// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

import meta::pure::functions::collection::tests::contains::*;
import meta::pure::functions::collection::tests::model::*;

function <<PCT.function>> meta::pure::functions::collection::contains(collection:Any[*], value:Any[1]):Boolean[1]
{
    $collection->exists(x | $value == $x)
}

function <<PCT.function>> meta::pure::functions::collection::contains<Z>(collection:Z[*], value:Z[1], comparator:Function<{Z[1],Z[1]->Boolean[1]}>[1]):Boolean[1]
{
    $collection->exists(x | $comparator->eval($value, $x))
}

function <<PCT.test>> meta::pure::functions::collection::tests::contains::testContainsPrimitive<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let col = [1, 2, 5, 2, 'a', true, %2014-02-01, 'c'];
    assert($f->eval(|$col->contains(1)));
    assert($f->eval(|$col->contains(2)));
    assert($f->eval(|$col->contains(5)));
    assert($f->eval(|$col->contains('a')));
    assert($f->eval(|$col->contains(true)));
    assert($f->eval(|$col->contains(%2014-02-01)));
    assert($f->eval(|$col->contains('c')));

    assertFalse($f->eval(|$col->contains(-5)));
    assertFalse($f->eval(|$col->contains(%2014-02-02)));
    assertFalse($f->eval(|$col->contains('the quick brown fox')));
    assertFalse($f->eval(|$col->contains(false)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::contains::testContainsNonPrimitive<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let f1 = ^CO_Firm(legalName='f1');
    let f2 = ^CO_Firm(legalName='f2');
    let col = [$f1, $f2];
    assert($f->eval(|$col->contains($f1)));
    assert($f->eval(|$col->contains(^CO_Firm(legalName='f1'))));
    assert($f->eval(|$col->contains($f2)));
    assert($f->eval(|$col->contains(^CO_Firm(legalName='f2'))));

    assertFalse($f->eval(|$col->contains(3)));
    assertFalse($f->eval(|$col->contains(^CO_Firm(legalName='f3'))));
}

Class meta::pure::functions::collection::tests::contains::ClassWithoutEquality
{
   name : String[1];
}

function meta::pure::functions::collection::tests::contains::comparator(a:ClassWithoutEquality[1], b:ClassWithoutEquality[1]):Boolean[1]
{
   $a.name == $b.name
}


function <<PCT.test>> meta::pure::functions::collection::tests::contains::testContainsWithFunction<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
    let f1 = ^ClassWithoutEquality(name='f1');
    let f2 = ^ClassWithoutEquality(name='f2');
    let f1Prime = ^ClassWithoutEquality(name='f1');

    let col = [$f1, $f2];
    assert($f->eval(|$col->contains($f1Prime, comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_)));
    assert($f->eval(|$col->contains(^ClassWithoutEquality(name='f1'), comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_)));
    assert($f->eval(|$col->contains($f2, comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_)));
    assert($f->eval(|$col->contains(^ClassWithoutEquality(name='f2'), comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_)));

    assertFalse($f->eval(|$col->contains(^ClassWithoutEquality(name='f3'), comparator_ClassWithoutEquality_1__ClassWithoutEquality_1__Boolean_1_)));
}