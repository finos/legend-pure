// Copyright 2022 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>> meta::pure::functions::collection::take<T>(set:T[*], count:Integer[1]):T[*];

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeNegativeOnEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEmpty($f->eval(|[]->take(-1)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeNegativeOnNonEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEmpty($f->eval(|[1, 2, 3]->take(-1)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeZeroOnEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEmpty($f->eval(|[]->take(0)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeZeroOnNonEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEmpty($f->eval(|[1, 2, 3]->take(0)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeOneOnEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEmpty($f->eval(|[]->take(1)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeOneOnNonEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([1], $f->eval(|[1, 2, 3]->take(1)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeManyOnEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEmpty($f->eval(|[]->take(2)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeManyOnNonEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([1, 2], $f->eval(|[1, 2, 3]->take(2)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeExceedsSizeOnEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEmpty($f->eval(|[]->take(5)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeExceedsSizeOnNonEmptyList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals([1, 2, 3], $f->eval(|[1, 2, 3]->take(5)));
}

function <<PCT.test>> meta::pure::functions::collection::tests::take::testTakeInList<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
  assertEquals(list([1, 2]), $f->eval(|list([1, 2, 3]->take(2))));
}
