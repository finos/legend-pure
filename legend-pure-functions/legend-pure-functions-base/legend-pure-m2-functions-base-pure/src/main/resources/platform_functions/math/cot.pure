// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::test::pct::*;

native function <<PCT.function>> meta::pure::functions::math::cot(number:Number[1]):Float[1];

function <<PCT.test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::math::tests::trigonometry::testCoTangent<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEqWithinTolerance(0.642092615934, $f->eval(|cot(1)), 0.000000000001);
   assertEqWithinTolerance(0.070914844302, $f->eval(|cot(1.5)), 0.000000000001);
}

function <<PCT.test>> {test.excludePlatform = 'Java compiled'} meta::pure::functions::math::tests::trigonometry::testCoTangentEval<Z|y>(f:Function<{Function<{->Z[y]}>[1]->Z[y]}>[1]):Boolean[1]
{
   assertEqWithinTolerance(0.070914844302, $f->eval(|cot_Number_1__Float_1_->eval(1.5)), 0.000000000001);
}