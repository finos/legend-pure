// Copyright 2023 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

function meta::pure::functions::relation::testTDSMemoryRun<T>(f:Function<{->Any[1]}>[1]):Any[1]
{
  $f->eval();
}

Profile meta::pure::functions::relation::RelationProfile
{
  stereotypes : [test];
}

function <<test.Test>> meta::pure::functions::relation::tests::executeInMemoryTests():Boolean[1]
{
    meta::pure::functions::relation::tests::executeTests(meta::pure::functions::relation::testTDSMemoryRun_Function_1__Any_1_);
}

function meta::pure::functions::relation::tests::executeTests(f:Function<{Function<{->Any[1]}>[1]->Any[1]}>[1]):Boolean[1]
{
    meta::pure::functions::relation::tests::findFunctions(meta::pure::functions::relation)
      ->fold(
          {a,b| $b && $a->evaluate(list($f))->cast(@Boolean)->toOne()},
          true
        );
}

function meta::pure::functions::relation::tests::findFunctions(p:Package[1]):Function<Any>[*]
{
  $p.children->map(v | $v->match([
                          p:Package[1] | meta::pure::functions::relation::tests::findFunctions($p),
                          f:ConcreteFunctionDefinition<Any>[1] | if ($f->meta::pure::functions::relation::tests::hasStereotype('test', RelationProfile),|$f,|[]),
                          a:Any[1]|[]
                        ]);
  );
}

function meta::pure::functions::relation::tests::hasStereotype(f:ElementWithStereotypes[1], stereotype:String[1], profile:Profile[1]):Boolean[1]
{
    let st = $profile->stereotype($stereotype);
    $f.stereotypes->exists(s | $s == $st);
}
